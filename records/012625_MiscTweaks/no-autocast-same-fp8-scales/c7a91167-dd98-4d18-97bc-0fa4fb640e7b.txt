import os
import sys
with open(sys.argv[0]) as f:
    code = f.read() # read the code of this file ASAP, for logging
import uuid
import time
from dataclasses import dataclass
from functools import lru_cache
from pathlib import Path

os.environ["PYTORCH_CUDA_ALLOC_CONF"] = "expandable_segments:True"
import torch
torch.empty(1, device="cuda", requires_grad=True).backward() # prevents a bug on some systems
from torch import Tensor, nn
import torch.nn.functional as F
import torch.distributed as dist
# use of FlexAttention contributed by @KoszarskyB
from torch.nn.attention.flex_attention import BlockMask, flex_attention
torch._inductor.config.coordinate_descent_tuning = True # turn this off for a faster compile time (but slightly slower run)

# -----------------------------------------------------------------------------
# Custom operators : FP8 forward & backward by @YouJiacheng

@torch.library.custom_op("nanogpt::mm", mutates_args=())
def mm_op(x: Tensor, w: Tensor, x_s: float, w_s: float, grad_s: float) -> tuple[Tensor, Tensor, Tensor]:
    @torch.compile
    def impl(x: Tensor, w: Tensor):
        assert x.is_contiguous() and w.is_contiguous()
        x_f8 = x.mul(x_s).to(torch.float8_e4m3fn)
        w_f8 = w.mul(w_s).to(torch.float8_e4m3fn)
        out = torch._scaled_mm(
            x_f8,
            w_f8.t(),
            out_dtype=torch.bfloat16,
            scale_a=x.new_tensor(1 / x_s, dtype=torch.float32),
            scale_b=x.new_tensor(1 / w_s, dtype=torch.float32),
            use_fast_accum=True,
        )
        return out, x_f8, w_f8

    return impl(x, w)

@mm_op.register_fake
def _(x: Tensor, w: Tensor, *_):
    assert x.ndim == w.ndim == 2
    assert x.shape[1] == w.shape[1]
    assert x.device == w.device
    assert x.is_contiguous() and w.is_contiguous()
    return x @ w.t(), x.to(torch.float8_e4m3fn), w.to(torch.float8_e4m3fn)

@torch.library.custom_op("nanogpt::mm_backward", mutates_args=())
def mm_backward_op(g: Tensor, x_f8: Tensor, w_f8: Tensor, x_s: float, w_s: float, grad_s: float) -> tuple[Tensor, Tensor]:
    @torch.compile
    def impl(grad: Tensor, x_f8: Tensor, w_f8: Tensor):
        assert grad.is_contiguous()
        x_inv_s = grad.new_tensor(1 / x_s, dtype=torch.float32)
        w_inv_s = grad.new_tensor(1 / w_s, dtype=torch.float32)
        grad_inv_s = grad.new_tensor(1 / grad_s, dtype=torch.float32)
        grad_f8 = grad.mul(grad_s).to(torch.float8_e5m2)
        grad_x = torch._scaled_mm(
            grad_f8,
            w_f8.t().contiguous().t(),
            out_dtype=torch.bfloat16,
            scale_a=grad_inv_s,
            scale_b=w_inv_s,
            use_fast_accum=False,
        )
        # faster than grad_f8_t @ x_f8, for (d_out, d_in) == (50304, 768)
        grad_w = torch._scaled_mm(
            x_f8.t().contiguous(),
            grad_f8.t().contiguous().t(),
            out_dtype=torch.float32,
            scale_a=x_inv_s,
            scale_b=grad_inv_s,
            use_fast_accum=False,
        ).t()
        return grad_x, grad_w

    return impl(g, x_f8, w_f8)

@mm_backward_op.register_fake
def _(g: Tensor, x_f8: Tensor, w_f8: Tensor, *_):
    return x_f8.to(torch.bfloat16), w_f8.to(torch.float32)

def mm_backward(ctx, grad_out: Tensor, *_):
    x_f8, w_f8 = ctx.saved_tensors
    x_s, w_s, grad_s = ctx.scales
    grad_x, grad_w = torch.ops.nanogpt.mm_backward(
        grad_out, x_f8, w_f8, x_s, w_s, grad_s
    )
    return grad_x, grad_w, None, None, None

def mm_setup_context(ctx: torch.autograd.function.FunctionCtx, inputs, output):
    *_, x_s, w_s, grad_s = inputs
    _, x_f8, w_f8 = output
    ctx.save_for_backward(x_f8, w_f8)
    ctx.scales = x_s, w_s, grad_s
    ctx.set_materialize_grads(False)

mm_op.register_autograd(mm_backward, setup_context=mm_setup_context)

# Custom operators : FP8 forward & bfloat16 backward

@torch.library.custom_op("nanogpt::mm_mixed", mutates_args=())
def mm_mixed_op(x: Tensor, w: Tensor, x_s: float, w_s: float, grad_s: float) -> tuple[Tensor, Tensor, Tensor]:
    @torch.compile
    def impl(x: Tensor, w: Tensor):
        assert x.is_contiguous() and w.is_contiguous()
        x_f8 = x.mul(x_s).to(torch.float8_e4m3fn)
        w_f8 = w.mul(w_s).to(torch.float8_e4m3fn)
        out = torch._scaled_mm(
            x_f8,
            w_f8.t(),
            out_dtype=torch.bfloat16,
            scale_a=x.new_tensor(1 / x_s, dtype=torch.float32),
            scale_b=x.new_tensor(1 / w_s, dtype=torch.float32),
            use_fast_accum=True,
        )
        return out, x_f8, w_f8

    return impl(x, w)

@mm_mixed_op.register_fake
def _(x: Tensor, w: Tensor, *_):
    assert x.ndim == w.ndim == 2
    assert x.shape[1] == w.shape[1]
    assert x.device == w.device
    assert x.is_contiguous() and w.is_contiguous()
    return x @ w.t(), x.to(torch.float8_e4m3fn), w.to(torch.float8_e4m3fn)

@torch.library.custom_op("nanogpt::mm_mixed_backward", mutates_args=())
def mm_mixed_backward_op(g: Tensor, x_f8: Tensor, w_f8: Tensor, x_s: float, w_s: float, grad_s: float) -> tuple[Tensor, Tensor]:
    @torch.compile
    def impl(grad: Tensor, x_f8: Tensor, w_f8: Tensor):
        assert grad.is_contiguous()
        x_inv_s = grad.new_tensor(1 / x_s, dtype=torch.float32)
        w_inv_s = grad.new_tensor(1 / w_s, dtype=torch.float32)
        grad_inv_s = grad.new_tensor(1 / grad_s, dtype=torch.float32)
        x_bfloat16 = x_f8.to(torch.bfloat16)
        w_bfloat16 = w_f8.to(torch.bfloat16)
        grad_bfloat16 = grad.mul(grad_s).to(torch.bfloat16)
        grad_x = torch._scaled_mm(
            grad_bfloat16,
            w_bfloat16.t().contiguous().t(),
            out_dtype=torch.bfloat16,
            scale_a=grad_inv_s,
            scale_b=w_inv_s,
            use_fast_accum=False,
        )
        grad_w = torch._scaled_mm(
            x_bfloat16.t().contiguous(),
            grad_bfloat16.t().contiguous().t(),
            out_dtype=torch.float32,
            scale_a=x_inv_s,
            scale_b=grad_inv_s,
            use_fast_accum=False,
        ).t()
        return grad_x, grad_w

    return impl(g, x_f8, w_f8)

@mm_mixed_backward_op.register_fake
def _(g: Tensor, x_f8: Tensor, w_f8: Tensor, *_):
    return x_f8.to(torch.bfloat16), w_f8.to(torch.float32)

def mm_mixed_backward(ctx, grad_out: Tensor, *_):
    x_f8, w_f8 = ctx.saved_tensors
    x_s, w_s, grad_s = ctx.scales
    grad_x, grad_w = torch.ops.nanogpt.mm_mixed_backward(
        grad_out, x_f8, w_f8, x_s, w_s, grad_s
    )
    return grad_x, grad_w, None, None, None

def mm_mixed_setup_context(ctx: torch.autograd.function.FunctionCtx, inputs, output):
    *_, x_s, w_s, grad_s = inputs
    _, x_f8, w_f8 = output
    ctx.save_for_backward(x_f8, w_f8)
    ctx.scales = x_s, w_s, grad_s
    ctx.set_materialize_grads(False)

mm_mixed_op.register_autograd(mm_mixed_backward, setup_context=mm_mixed_setup_context)

def linear_mixed(x: Tensor, w: Tensor) -> Tensor:
    _x = x.flatten(0, -2)
    out: Tensor = torch.ops.nanogpt.mm_mixed(_x, w, x_s=2.0, w_s=2.0**5, grad_s=2.0**29)[0]
    return out.reshape(*x.shape[:-1], -1)

# -----------------------------------------------------------------------------
# Muon optimizer

@torch.compile
def zeropower_via_newtonschulz5(G: Tensor, steps: int) -> Tensor:
    """
    Newton-Schulz iteration to compute the zeroth power / orthogonalization of G. We opt to use a
    quintic iteration whose coefficients are selected to maximize the slope at zero. For the purpose
    of minimizing steps, it turns out to be empirically effective to keep increasing the slope at
    zero even beyond the point where the iteration no longer converges all the way to one everywhere
    on the interval. This iteration therefore does not produce UV^T but rather something like US'V^T
    where S' is diagonal with S_{ii}' ~ Uniform(0.5, 1.5), which turns out not to hurt model
    performance at all relative to UV^T, where USV^T = G is the SVD.
    """
    assert G.ndim >= 2 # batched Muon implementation by @scottjmaddox, and put into practice in the record by @YouJiacheng
    a, b, c = (3.4445, -4.7750,  2.0315)
    X = G.bfloat16()
    if G.size(-2) > G.size(-1):
        X = X.mT

    # Ensure spectral norm is at most 1
    X = X / (X.norm(dim=(-2, -1), keepdim=True) + 1e-7)
    # Perform the NS iterations
    for _ in range(steps):
        A = X @ X.mT
        B = b * A + c * A @ A # quintic computation strategy adapted from suggestion by @jxbz, @leloykun, and @YouJiacheng
        X = a * X + B @ X
    
    if G.size(-2) > G.size(-1):
        X = X.mT
    return X

class Muon(torch.optim.Optimizer):
    """
    Muon - MomentUm Orthogonalized by Newton-schulz

    Muon internally runs standard SGD-momentum, and then performs an orthogonalization post-
    processing step, in which each 2D parameter's update is replaced with the nearest orthogonal
    matrix. To efficiently orthogonalize each update, we use a Newton-Schulz iteration, which has
    the advantage that it can be stably run in bfloat16 on the GPU.

    Some warnings:
    - This optimizer assumes that all parameters passed in are 2D.
    - It should not be used for the embedding layer, the final fully connected layer, or any {0,1}-D
    parameters; those should all be optimized by a standard method (e.g., AdamW).
    - To use it with 4D convolutional filters, it works well to just flatten their last 3 dimensions.
    - We believe it is unlikely to work well for training with small batch size.
    - We believe it may not work well for finetuning pretrained models, but we haven"t tested this.
    - We have not yet tried this optimizer for training scenarios larger than NanoGPT (124M).

    Arguments:
        lr: The learning rate used by the internal SGD.
        momentum: The momentum used by the internal SGD.
        nesterov: Whether to use Nesterov-style momentum in the internal SGD. (recommended)
        ns_steps: The number of Newton-Schulz iteration steps to use.
    """
    def __init__(self, params, lr=0.02, momentum=0.95, nesterov=True, ns_steps=5, rank=0, world_size=1):
        self.rank = rank
        self.world_size = world_size
        defaults = dict(lr=lr, momentum=momentum, nesterov=nesterov, ns_steps=ns_steps)
        params: list[Tensor] = [*params]
        assert all(isinstance(p, Tensor) for p in params)
        sizes = {p.numel() for p in params}
        def create_update_buffer(size: int):
            b = torch.empty(self.world_size, size, dtype=torch.bfloat16, device="cuda")
            return dict(update_buffer=b, update_buffer_views=[b[i] for i in range(self.world_size)])
        param_groups = [
            dict(params=[p for p in params if p.numel() == size], **create_update_buffer(size)) for size in sizes]
        super().__init__(param_groups, defaults)

    @torch.no_grad()
    def step(self):
        for group in self.param_groups:
            lr = group["lr"]
            momentum = group["momentum"]
            nesterov = group["nesterov"]
            ns_steps = group["ns_steps"]
            update_buffer = group["update_buffer"]
            update_buffer_views: list[Tensor] = group["update_buffer_views"]
            # generate weight updates in distributed fashion
            params: list[Tensor] = group["params"]
            handle = None
            params_world = None
            def update_prev(): # optimized Muon implementation contributed by @YouJiacheng
                if params_world is None:
                    return
                assert handle is not None
                handle.wait()
                for p_world, g_world in zip(params_world, update_buffer_views):
                    p_world.add_(
                        g_world.view_as(p_world),
                        alpha=-lr * max(1, p_world.size(-2) / p_world.size(-1)) ** 0.5,
                    )
            for base_i in range(len(params))[::self.world_size]:
                if base_i + self.rank < len(params):
                    p = params[base_i + self.rank]
                    g = p.grad
                    assert g is not None
                    state = self.state[p]
                    if "momentum_buffer" not in state:
                        state["momentum_buffer"] = torch.zeros_like(g)
                    buf: Tensor = state["momentum_buffer"]
                    buf.lerp_(g, 1 - momentum)
                    g = g.lerp_(buf, momentum) if nesterov else buf
                    g = zeropower_via_newtonschulz5(g, steps=ns_steps).flatten()
                else:
                    g = update_buffer_views[self.rank]
                update_prev() # async all_gather instead of sync all_reduce by @YouJiacheng
                handle = dist.all_gather_into_tensor(update_buffer, g, async_op=True)
                params_world = params[base_i : base_i + self.world_size]
            update_prev()

# -----------------------------------------------------------------------------
# PyTorch nn.Module definitions for the model

def norm(x: Tensor):
    return F.rms_norm(x, (x.size(-1),))

class CastedLinear(nn.Linear):
    def __init__(self, in_features: int, out_features: int, use_fp8: bool = False, x_s: float = 1.0, w_s: float = 1.0, grad_s: float = 1.0):
        super().__init__(in_features, out_features, bias=False)
        self.use_fp8 = use_fp8
        self.x_s = x_s
        self.w_s = w_s
        self.grad_s = grad_s

    def reset_parameters(self) -> None:
        std = 0.5 * (self.in_features ** -0.5) # 0.5 is a bit better than the default 1/sqrt(3)
        bound = (3 ** 0.5) * std
        with torch.no_grad():
            self.weight.uniform_(-bound, bound)

    def forward(self, x: Tensor):
        if self.use_fp8 and self.training:
            _x = x.flatten(0, -2)
            out: Tensor = torch.ops.nanogpt.mm(_x, self.weight, x_s=self.x_s, w_s=self.w_s, grad_s=self.grad_s)[0]
            return out.reshape(*x.shape[:-1], -1)
        else:
            return F.linear(x, self.weight.type_as(x))

class Rotary(nn.Module):
    def __init__(self, dim: int, max_seq_len: int):
        super().__init__()
        # half-truncate RoPE by @YouJiacheng (w/ base freq tuning)
        angular_freq = (1 / 1024) ** torch.linspace(0, 1, steps=dim//4, dtype=torch.float32)
        angular_freq = torch.cat([angular_freq, angular_freq.new_zeros(dim//4)])
        t = torch.arange(max_seq_len, dtype=torch.float32)
        theta = torch.einsum("i,j -> ij", t, angular_freq)
        self.cos = nn.Buffer(theta.cos(), persistent=False)
        self.sin = nn.Buffer(theta.sin(), persistent=False)

    def forward(self, x_BTHD: Tensor):
        assert self.cos.size(0) >= x_BTHD.size(-3)
        cos, sin = self.cos[None, :x_BTHD.size(-3), None, :], self.sin[None, :x_BTHD.size(-3), None, :]
        x1, x2 = x_BTHD.to(dtype=torch.float32).chunk(2, dim=-1)
        y1 = x1 * cos + x2 * sin
        y2 = x1 * (-sin) + x2 * cos
        return torch.cat((y1, y2), 3).type_as(x_BTHD)

class CausalSelfAttention(nn.Module):
    def __init__(self, dim: int, num_heads: int, max_seq_len: int, head_dim=128):
        super().__init__()
        self.num_heads = num_heads
        self.head_dim = head_dim
        hdim = num_heads * head_dim
        std = 0.5 * (dim ** -0.5)
        bound = (3 ** 0.5) * std # improved init scale by @YouJiacheng
        # merged QKV weights: suggested by many, implemented by @fernbear.bsky.social, and further improved by @YouJiacheng
        # https://x.com/hi_tysam/status/1879699187107033311
        self.qkv_w = nn.Parameter(torch.empty(3, hdim, dim).uniform_(-bound, bound))
        self.lambdas = nn.Parameter(torch.tensor([0.5, 0.5]))
        self.rotary = Rotary(head_dim, max_seq_len)
        self.c_proj = CastedLinear(hdim, dim)
        self.c_proj.weight.detach().zero_() # zero init suggested by @Grad62304977
        # scale the attention logits by given constant, instead of the default head_dim**-0.5, by @leloykun
        # inspired by learnable scalars used by @brendanh0gan https://x.com/hi_tysam/status/1879693583898591283
        self.attn_scale = 0.12

    def forward(self, x: Tensor, ve: Tensor | None, block_mask: BlockMask):
        B, T = x.size(0), x.size(1) # batch size, sequence length
        assert B == 1, "Must use batch size = 1 for FlexAttention"
        q, k, v = F.linear(x, self.qkv_w.flatten(end_dim=1).type_as(x)).view(B, T, 3 * self.num_heads, self.head_dim).chunk(3, dim=-2)
        q, k = norm(q), norm(k) # QK norm @Grad62304977
        q, k = self.rotary(q), self.rotary(k)
        if ve is not None:
            v = self.lambdas[0] * v + self.lambdas[1] * ve.view_as(v) # @KoszarskyB & @Grad62304977
        else: # skip mid-layers token value embeddings by @YouJiacheng
            v = self.lambdas[0] * v
        y = flex_attention(q.transpose(1, 2), k.transpose(1, 2), v.transpose(1, 2), block_mask=block_mask, scale=self.attn_scale).transpose(1, 2)
        y = y.contiguous().view(B, T, self.num_heads * self.head_dim) # re-assemble all head outputs side by side
        y = self.c_proj(y)
        return y

class MLP(nn.Module):
    def __init__(self, dim: int):
        super().__init__()
        hdim = 4 * dim
        self.c_fc = CastedLinear(dim, hdim)
        self.c_proj = CastedLinear(hdim, dim)
        self.c_proj.weight.detach().zero_() # zero init suggested by @Grad62304977

    def forward(self, x: Tensor):
        x = self.c_fc(x)
        x = F.relu(x).square() # https://arxiv.org/abs/2109.08668v2; ~1-2% better than GELU; suggested by @SKYLINEZ007 and @Grad62304977
        x = self.c_proj(x)
        return x

class Block(nn.Module):
    def __init__(self, dim: int, num_heads: int, layer_idx: int, max_seq_len: int):
        super().__init__()
        # skip attention of blocks.7 (the 8th layer) by @YouJiacheng
        self.attn = CausalSelfAttention(dim, num_heads, max_seq_len) if layer_idx != 7 else None
        self.mlp = MLP(dim)
        self.lambdas = nn.Parameter(torch.tensor([1., 0.]))

    def forward(self, x: Tensor, ve: Tensor | None, x0: Tensor, block_mask: BlockMask):
        x = self.lambdas[0] * x + self.lambdas[1] * x0
        if self.attn is not None:
            x = x + self.attn(norm(x), ve, block_mask)
        x = x + self.mlp(norm(x))
        return x

class ValueEmbedding(nn.Module):
    def __init__(self, vocab_size: int, embedding_dim: int, num_layers: int, num_embeddings: int = 3):
        super().__init__()
        self.num_layers = num_layers
        self.num_embeddings = num_embeddings
        self.embed = nn.ModuleList([nn.Embedding(vocab_size, embedding_dim) for _ in range(num_embeddings)])

    def forward(self, input_seq: Tensor) -> list[Tensor | None]:
        ve = [emb(input_seq) for emb in self.embed]
        # 012 ... 012 structure on token value embeddings by @YouJiacheng, improved on @leloykun's U-net structure
        ve = [ve[0], ve[1], ve[2]] + [None] * (self.num_layers - 2 * self.num_embeddings) + [ve[0], ve[1], ve[2]]
        return ve

# -----------------------------------------------------------------------------
# The main model

def next_multiple_of_n(v: float | int, *, n: int):
    return next(x for x in range(n, int(v) + 1 + n, n) if x >= v)

class GPT(nn.Module):
    def __init__(self, vocab_size: int, num_layers: int, num_heads: int, model_dim: int, max_seq_len: int):
        super().__init__()
        self.embed = nn.Embedding(vocab_size, model_dim)
        # token value embeddings by @KoszarskyB - inspired by @Grad62304977's value residual implementation following https://arxiv.org/abs/2410.17897
        self.value_embeds = ValueEmbedding(vocab_size, model_dim, num_layers)
        self.blocks = nn.ModuleList([Block(model_dim, num_heads, layer_idx, max_seq_len) for layer_idx in range(num_layers)])
        # U-net design by @brendanh0gan
        self.num_encoder_layers = num_layers // 2 # Half of the layers for encoder
        self.num_decoder_layers = num_layers - self.num_encoder_layers # Remaining for decoder
        # Add learnable skip connection weights for decoder layers
        self.skip_weights = nn.Parameter(torch.ones(self.num_decoder_layers))
        # there are only 50257 unique GPT-2 tokens; we extend to nearest multiple of 128 for efficiency.
        # suggested to me by @Grad62304977. this originates from Karpathy's experiments.
        self.lm_head = CastedLinear(model_dim, next_multiple_of_n(vocab_size, n=128), use_fp8=True, x_s=2.0, w_s=2.0**5, grad_s=2.0**29)
        self.lm_head.weight.detach().zero_() # @Grad62304977

    def create_block_masks(self, input_seq: Tensor, sliding_window_num_blocks: Tensor):
        BLOCK_SIZE = 128
        docs = (input_seq == 50256).cumsum(0)

        def document_causal(b, h, q_idx, kv_idx):
            causal_mask = q_idx >= kv_idx
            document_mask = docs[q_idx] == docs[kv_idx]
            return causal_mask & document_mask

        def dense_to_ordered(dense_mask: Tensor):
            num_blocks = dense_mask.sum(dim=-1, dtype=torch.int32)
            indices = dense_mask.argsort(dim=-1, descending=False, stable=True).flip(-1).to(torch.int32)
            return num_blocks[None, None].contiguous(), indices[None, None].contiguous()

        # manual block mask creation by @YouJiacheng
        assert len(input_seq) % BLOCK_SIZE == 0
        NUM_BLOCKS = len(input_seq) // BLOCK_SIZE
        block_idx = torch.arange(NUM_BLOCKS, dtype=torch.int32, device="cuda")
        any_causal_bm = block_idx[:, None] >= block_idx
        all_causal_bm = block_idx[:, None] > block_idx
        docs_low = docs.view(-1, BLOCK_SIZE)[:, 0].contiguous()
        docs_high = docs.view(-1, BLOCK_SIZE)[:, -1].contiguous()
        any_document_bm = (docs_low[:, None] <= docs_high) & (docs_high[:, None] >= docs_low)
        all_document_bm = (docs_low[:, None] == docs_high) & (docs_high[:, None] == docs_low)
        any_bm = any_causal_bm & any_document_bm
        all_bm = all_causal_bm & all_document_bm
        partial_kv_num_blocks, partial_kv_indices = dense_to_ordered(any_bm & ~all_bm)
        full_kv_num_blocks, full_kv_indices = dense_to_ordered(all_bm)
        def build_bm(sw_num_blocks: Tensor) -> BlockMask:
            return BlockMask.from_kv_blocks(
                torch.clamp_max(partial_kv_num_blocks, torch.clamp_min(sw_num_blocks - full_kv_num_blocks, 1)),
                partial_kv_indices,
                torch.clamp_max(full_kv_num_blocks, sw_num_blocks - 1),
                full_kv_indices,
                BLOCK_SIZE=BLOCK_SIZE,
                mask_mod=document_causal,
            )
        # Long-short SWA block masks by @leloykun & @YouJiacheng, adapated from suggestion by @Grad62304977, following Gemma 2 paper
        return build_bm(sliding_window_num_blocks), build_bm(sliding_window_num_blocks // 2)

    def forward(self, input_seq: Tensor, target_seq: Tensor, sliding_window_num_blocks: Tensor):
        assert input_seq.ndim == 1

        long_bm, short_bm = self.create_block_masks(input_seq, sliding_window_num_blocks)

        x = x0 = norm(self.embed(input_seq)[None]) # use of norm here by @Grad62304977
        ve = self.value_embeds(input_seq)
        assert len(ve) == len(self.blocks)
        ve_enc, ve_dec = ve[:self.num_encoder_layers], ve[self.num_encoder_layers:]
        assert len(ve_enc) == self.num_encoder_layers and len(ve_dec) == self.num_decoder_layers

        # Store outputs for U-Net skip connections
        skip_connections = []
        # Encoder pass - process only the first half of the blocks
        block_masks = [long_bm, short_bm, short_bm, short_bm, long_bm, short_bm]
        assert len(block_masks) == self.num_encoder_layers
        for i in range(self.num_encoder_layers):
            x = self.blocks[i](x, ve_enc[i], x0, block_masks[i])
            skip_connections.append(x)
        # Decoder pass - process the remaining blocks with weighted skip connections
        block_masks.reverse()
        assert len(block_masks) == self.num_decoder_layers
        for i in range(self.num_decoder_layers):
            x = x + self.skip_weights[i] * skip_connections.pop()
            x = self.blocks[self.num_encoder_layers + i](x, ve_dec[i], x0, block_masks[i])
        x = norm(x)
        logits = self.lm_head(x)
        # @Grad62304977 added tanh softcapping following Gemma 2 paper, @KoszarskyB reduced it from 30 to 15, @YouJiacheng shifted it by +15 (2*sigmoid(2*x)=tanh(x)+1)
        logits = 30 * torch.sigmoid(logits.float() / 7.5)
        loss = F.cross_entropy(logits.view(-1, logits.size(-1)), target_seq)
        return loss

# -----------------------------------------------------------------------------
# Our own simple Distributed Data Loader

def _load_data_shard(file: Path):
    header = torch.from_file(f"{file}", False, 256, dtype=torch.int32) # header is 256 int32
    assert header[0] == 20240520, "magic number mismatch in the data .bin file"
    assert header[1] == 1, "unsupported version"
    num_tokens = int(header[2]) # number of tokens (claimed)
    with file.open("rb", buffering=0) as f:
        tokens = torch.empty(num_tokens, dtype=torch.uint16, pin_memory=True) # avoid pin_memory copy by @YouJiacheng
        f.seek(256 * 4)
        nbytes = f.readinto(tokens.numpy()) # avoid bytes->array copy by @YouJiacheng
        assert nbytes == 2 * num_tokens, "number of tokens read does not match header"
    return tokens

def distributed_data_generator(filename_pattern: str, batch_size: int, rank : int, world_size : int):
    files = sorted(Path.cwd().glob(filename_pattern))
    assert batch_size % world_size == 0
    local_batch_size = batch_size // world_size
    file_iter = iter(files) # use itertools.cycle(files) instead if you want to do multi-epoch training
    tokens, pos = _load_data_shard(next(file_iter)), 0
    while True:
        if pos + batch_size + 1 >= len(tokens):
            tokens, pos = _load_data_shard(next(file_iter)), 0
        buf = tokens[pos + rank * local_batch_size:][:local_batch_size + 1]
        inputs = buf[:-1].to(device="cuda", dtype=torch.int32, non_blocking=True) # no sync on host side;
        targets = buf[1:].to(device="cuda", dtype=torch.int64, non_blocking=True) # H2D in another stream isn"t helpful.
        pos += batch_size
        yield inputs, targets

# -----------------------------------------------------------------------------
# int main

@dataclass
class Hyperparameters:
    # data
    train_files = "data/fineweb10B/fineweb_train_*.bin" # input .bin to train on
    val_files = "data/fineweb10B/fineweb_val_*.bin" # input .bin to eval validation loss on
    val_tokens = 10485760 # how many tokens of validation data? it's important to keep this fixed for consistent comparisons
    # optimization
    num_iterations = 1770 # number of iterations to run
    cooldown_frac = 0.4 # fraction of training spent cooling down the learning rate
    # evaluation and logging
    val_loss_every = 125 # every how many steps to evaluate val loss? 0 for only at the end
    # implementation
    seq_len = 48*1024 # FlexAttention sequence length
    val_seq_len = 4*64*1024 # FlexAttention sequence length for validation
    save_checkpoint = False
args = Hyperparameters()

# torchrun sets these env variables
rank = int(os.environ["RANK"])
world_size = int(os.environ["WORLD_SIZE"])
assert torch.cuda.is_available()
device = torch.device("cuda", int(os.environ["LOCAL_RANK"]))
torch.cuda.set_device(device)
dist.init_process_group(backend="nccl", device_id=device)
dist.barrier()
master_process = (rank == 0) # this process will do logging, checkpointing etc.

# begin logging
logfile = None
if master_process:
    run_id = uuid.uuid4()
    os.makedirs("logs", exist_ok=True)
    logfile = f"logs/{run_id}.txt"
    print(logfile)
def print0(s, console=False):
    if master_process:
        with open(logfile, "a") as f:
            if console:
                print(s)
            print(s, file=f)

# begin by printing this file (the Python code)
print0(code)
print0("="*100)
# log information about the hardware/software environment this is running on
print0(f"Running Python {sys.version}")
print0(f"Running PyTorch {torch.version.__version__} compiled for CUDA {torch.version.cuda}")
def nvidia_smi():
    import subprocess  # avoid top level import
    return subprocess.run(["nvidia-smi"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True).stdout
print0(nvidia_smi())
print0("="*100)

# load data
train_batch_size = world_size * args.seq_len
train_loader = distributed_data_generator(args.train_files, train_batch_size, rank, world_size)

model: nn.Module = GPT(vocab_size=50257, num_layers=12, num_heads=6, model_dim=768, max_seq_len=max(args.seq_len, args.val_seq_len)).cuda()
for m in model.modules():
    if isinstance(m, nn.Embedding):
        m.bfloat16()
for param in model.parameters():
    dist.broadcast(param.detach(), 0)

# collect the parameters to optimize
hidden_matrix_params = [p for n, p in model.blocks.named_parameters() if p.ndim >= 2 and "embed" not in n]
embed_params = [p for n, p in model.named_parameters() if "embed" in n]
scalar_params = [p for p in model.parameters() if p.ndim < 2]
head_params = [model.lm_head.weight]

# init the optimizer(s)
adam_params = [dict(params=head_params, lr=0.008), dict(params=embed_params, lr=0.6), dict(params=scalar_params, lr=0.04)]
# small adam epsilon by @YouJiacheng. this is an alternate method of fixing the world_size dependence
# discovered by @fernbear.bsky.social https://x.com/hi_tysam/status/1879692937589875094
optimizer1 = torch.optim.Adam(adam_params, betas=(0.8, 0.95), eps=1e-10, fused=True)
optimizer2 = Muon(hidden_matrix_params, lr=0.05, momentum=0.95, rank=rank, world_size=world_size)
optimizers = [optimizer1, optimizer2]

# learning rate schedule: stable then decay
def get_lr(step: int):
    t = 1 - step / args.num_iterations # time remaining in training
    assert 1 >= t >= 0
    w = min(t / args.cooldown_frac, 1.0) # 1 -> 0
    return w * 1.0 + (1 - w) * 0.1
schedulers = [torch.optim.lr_scheduler.LambdaLR(opt, get_lr) for opt in optimizers]
@lru_cache(1)
def sw_num_blks(window_size: int):
    return torch.tensor(window_size // 128, dtype=torch.int32, pin_memory=True).cuda(non_blocking=True)

model: nn.Module = torch.compile(model, dynamic=False)

training_time_ms = 0
# start the clock
torch.cuda.synchronize()
t0 = time.perf_counter()
# begin training
train_steps = args.num_iterations
for step in range(train_steps + 1):
    last_step = (step == train_steps)
    # This effectively ignores timing first 10 steps, which are slower for weird reasons.
    # Alternately, and slightly more correctly in terms of benchmarking, we could do 10
    # steps with dummy data first, and then re-initialize the model and reset the loader.
    if step == 10:
        training_time_ms = 0
        t0 = time.perf_counter()
    timed_steps = float("nan") if step <= 11 else (step - 10) + 1 # <= 11 to avoid bug in val

    # Linearly increase the block-wise sliding window size over training 128 -> 1792:
    # increase by @fernbear.bsky.social; block-wise by @YouJiacheng
    window_size = next_multiple_of_n(1728 * step / train_steps, n=128)

    # --------------- VALIDATION SECTION -----------------
    if last_step or (args.val_loss_every > 0 and step % args.val_loss_every == 0):
        # stop the clock
        torch.cuda.synchronize()
        training_time_ms += 1000 * (time.perf_counter() - t0)
        model.eval()
        val_batch_size = world_size * args.val_seq_len
        assert args.val_tokens % val_batch_size == 0
        val_steps = args.val_tokens // val_batch_size
        val_loader = distributed_data_generator(args.val_files, val_batch_size , rank, world_size)
        val_loss = 0
        with torch.no_grad():
            for _ in range(val_steps):
                x, y = next(val_loader)
                val_loss += model(x, y, sw_num_blks(window_size))
        val_loss /= val_steps
        del val_loader
        dist.all_reduce(val_loss, op=dist.ReduceOp.AVG)
        print0(f"step:{step}/{train_steps} val_loss:{val_loss:.4f} train_time:{training_time_ms:.0f}ms step_avg:{training_time_ms/(timed_steps-1):.2f}ms", console=True)
        model.train()
        # start the clock again
        torch.cuda.synchronize()
        t0 = time.perf_counter()

    if last_step:
        if master_process and args.save_checkpoint:
            log = dict(step=step, code=code, model=model.state_dict(), optimizers=[opt.state_dict() for opt in optimizers])
            os.makedirs(f"logs/{run_id}", exist_ok=True)
            torch.save(log, f"logs/{run_id}/state_step{step:06d}.pt")
        # the last step only has the validation loop, so break to avoid training
        break

    # --------------- TRAINING SECTION -----------------
    inputs, targets = next(train_loader)
    for input_seq, target_seq in zip(inputs.split(args.seq_len), targets.split(args.seq_len)):
        model(input_seq, target_seq, sw_num_blks(window_size)).backward()
    for param in model.parameters():
        dist.all_reduce(param.grad, op=dist.ReduceOp.AVG)
    # momentum warmup for Muon
    frac = min(step / 300, 1)
    for group in optimizer2.param_groups:
        group["momentum"] = (1 - frac) * 0.85 + frac * 0.95
    # step the optimizers and schedulers
    for opt, sched in zip(optimizers, schedulers):
        opt.step()
        sched.step()
    # null the gradients
    model.zero_grad(set_to_none=True)
    # logging
    approx_time = training_time_ms + 1000 * (time.perf_counter() - t0)
    print0(f"step:{step+1}/{train_steps} train_time:{approx_time:.0f}ms step_avg:{approx_time/timed_steps:.2f}ms", console=True)

print0(
    f"peak memory allocated: {torch.cuda.max_memory_allocated() // 1024 // 1024} MiB "
    f"reserved: {torch.cuda.max_memory_reserved() // 1024 // 1024} MiB",
    console=True,
)
dist.destroy_process_group()

====================================================================================================
Running Python 3.10.12 (main, Sep 11 2024, 15:47:36) [GCC 11.4.0]
Running PyTorch 2.7.0.dev20250125+cu126 compiled for CUDA 12.6
Mon Jan 27 22:39:42 2025       
+---------------------------------------------------------------------------------------+
| NVIDIA-SMI 535.183.06             Driver Version: 535.183.06   CUDA Version: 12.4     |
|-----------------------------------------+----------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |
|                                         |                      |               MIG M. |
|=========================================+======================+======================|
|   0  NVIDIA H100 80GB HBM3          On  | 00000000:19:00.0 Off |                    0 |
| N/A   38C    P0             121W / 700W |   7713MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   1  NVIDIA H100 80GB HBM3          On  | 00000000:3B:00.0 Off |                    0 |
| N/A   30C    P0             113W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   2  NVIDIA H100 80GB HBM3          On  | 00000000:4C:00.0 Off |                    0 |
| N/A   28C    P0             114W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   3  NVIDIA H100 80GB HBM3          On  | 00000000:5D:00.0 Off |                    0 |
| N/A   37C    P0             118W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   4  NVIDIA H100 80GB HBM3          On  | 00000000:9B:00.0 Off |                    0 |
| N/A   38C    P0             120W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   5  NVIDIA H100 80GB HBM3          On  | 00000000:BB:00.0 Off |                    0 |
| N/A   30C    P0             113W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   6  NVIDIA H100 80GB HBM3          On  | 00000000:CB:00.0 Off |                    0 |
| N/A   37C    P0             116W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   7  NVIDIA H100 80GB HBM3          On  | 00000000:DB:00.0 Off |                    0 |
| N/A   29C    P0             113W / 700W |   3211MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
                                                                                         
+---------------------------------------------------------------------------------------+
| Processes:                                                                            |
|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |
|        ID   ID                                                             Usage      |
|=======================================================================================|
+---------------------------------------------------------------------------------------+

====================================================================================================
step:0/1770 val_loss:10.8258 train_time:0ms step_avg:nanms
step:1/1770 train_time:23445ms step_avg:nanms
step:2/1770 train_time:23883ms step_avg:nanms
step:3/1770 train_time:23979ms step_avg:nanms
step:4/1770 train_time:24072ms step_avg:nanms
step:5/1770 train_time:24166ms step_avg:nanms
step:6/1770 train_time:24261ms step_avg:nanms
step:7/1770 train_time:24355ms step_avg:nanms
step:8/1770 train_time:24449ms step_avg:nanms
step:9/1770 train_time:24543ms step_avg:nanms
step:10/1770 train_time:24638ms step_avg:nanms
step:11/1770 train_time:94ms step_avg:nanms
step:12/1770 train_time:189ms step_avg:nanms
step:13/1770 train_time:283ms step_avg:94.44ms
step:14/1770 train_time:379ms step_avg:94.74ms
step:15/1770 train_time:473ms step_avg:94.62ms
step:16/1770 train_time:567ms step_avg:94.56ms
step:17/1770 train_time:662ms step_avg:94.59ms
step:18/1770 train_time:757ms step_avg:94.66ms
step:19/1770 train_time:852ms step_avg:94.68ms
step:20/1770 train_time:946ms step_avg:94.64ms
step:21/1770 train_time:1041ms step_avg:94.66ms
step:22/1770 train_time:1136ms step_avg:94.69ms
step:23/1770 train_time:1230ms step_avg:94.64ms
step:24/1770 train_time:1325ms step_avg:94.62ms
step:25/1770 train_time:1420ms step_avg:94.64ms
step:26/1770 train_time:1514ms step_avg:94.64ms
step:27/1770 train_time:1609ms step_avg:94.64ms
step:28/1770 train_time:1703ms step_avg:94.63ms
step:29/1770 train_time:1799ms step_avg:94.66ms
step:30/1770 train_time:1894ms step_avg:94.70ms
step:31/1770 train_time:1988ms step_avg:94.69ms
step:32/1770 train_time:2083ms step_avg:94.69ms
step:33/1770 train_time:2178ms step_avg:94.71ms
step:34/1770 train_time:2273ms step_avg:94.70ms
step:35/1770 train_time:2367ms step_avg:94.68ms
step:36/1770 train_time:2462ms step_avg:94.69ms
step:37/1770 train_time:2557ms step_avg:94.71ms
step:38/1770 train_time:2652ms step_avg:94.70ms
step:39/1770 train_time:2746ms step_avg:94.70ms
step:40/1770 train_time:2841ms step_avg:94.72ms
step:41/1770 train_time:2936ms step_avg:94.72ms
step:42/1770 train_time:3031ms step_avg:94.71ms
step:43/1770 train_time:3125ms step_avg:94.70ms
step:44/1770 train_time:3220ms step_avg:94.71ms
step:45/1770 train_time:3316ms step_avg:94.73ms
step:46/1770 train_time:3410ms step_avg:94.71ms
step:47/1770 train_time:3504ms step_avg:94.70ms
step:48/1770 train_time:3600ms step_avg:94.73ms
step:49/1770 train_time:3694ms step_avg:94.73ms
step:50/1770 train_time:3789ms step_avg:94.72ms
step:51/1770 train_time:3883ms step_avg:94.72ms
step:52/1770 train_time:3979ms step_avg:94.73ms
step:53/1770 train_time:4073ms step_avg:94.72ms
step:54/1770 train_time:4167ms step_avg:94.71ms
step:55/1770 train_time:4262ms step_avg:94.71ms
step:56/1770 train_time:4357ms step_avg:94.72ms
step:57/1770 train_time:4452ms step_avg:94.72ms
step:58/1770 train_time:4546ms step_avg:94.71ms
step:59/1770 train_time:4641ms step_avg:94.72ms
step:60/1770 train_time:4736ms step_avg:94.72ms
step:61/1770 train_time:4831ms step_avg:94.72ms
step:62/1770 train_time:4925ms step_avg:94.71ms
step:63/1770 train_time:5020ms step_avg:94.71ms
step:64/1770 train_time:5115ms step_avg:94.72ms
step:65/1770 train_time:5209ms step_avg:94.71ms
step:66/1770 train_time:5303ms step_avg:94.70ms
step:67/1770 train_time:5398ms step_avg:94.71ms
step:68/1770 train_time:5493ms step_avg:94.71ms
step:69/1770 train_time:5587ms step_avg:94.70ms
step:70/1770 train_time:5682ms step_avg:94.70ms
step:71/1770 train_time:5777ms step_avg:94.71ms
step:72/1770 train_time:5872ms step_avg:94.72ms
step:73/1770 train_time:5967ms step_avg:94.71ms
step:74/1770 train_time:6062ms step_avg:94.72ms
step:75/1770 train_time:6157ms step_avg:94.72ms
step:76/1770 train_time:6250ms step_avg:94.70ms
step:77/1770 train_time:6345ms step_avg:94.70ms
step:78/1770 train_time:6440ms step_avg:94.70ms
step:79/1770 train_time:6534ms step_avg:94.70ms
step:80/1770 train_time:6629ms step_avg:94.70ms
step:81/1770 train_time:6724ms step_avg:94.70ms
step:82/1770 train_time:6819ms step_avg:94.71ms
step:83/1770 train_time:6914ms step_avg:94.71ms
step:84/1770 train_time:7009ms step_avg:94.71ms
step:85/1770 train_time:7103ms step_avg:94.71ms
step:86/1770 train_time:7198ms step_avg:94.71ms
step:87/1770 train_time:7293ms step_avg:94.72ms
step:88/1770 train_time:7387ms step_avg:94.71ms
step:89/1770 train_time:7482ms step_avg:94.71ms
step:90/1770 train_time:7577ms step_avg:94.71ms
step:91/1770 train_time:7671ms step_avg:94.71ms
step:92/1770 train_time:7766ms step_avg:94.71ms
step:93/1770 train_time:7861ms step_avg:94.71ms
step:94/1770 train_time:7955ms step_avg:94.70ms
step:95/1770 train_time:8049ms step_avg:94.70ms
step:96/1770 train_time:8144ms step_avg:94.69ms
step:97/1770 train_time:8239ms step_avg:94.70ms
step:98/1770 train_time:8333ms step_avg:94.70ms
step:99/1770 train_time:8428ms step_avg:94.69ms
step:100/1770 train_time:8522ms step_avg:94.69ms
step:101/1770 train_time:8617ms step_avg:94.69ms
step:102/1770 train_time:8712ms step_avg:94.70ms
step:103/1770 train_time:8807ms step_avg:94.70ms
step:104/1770 train_time:8902ms step_avg:94.70ms
step:105/1770 train_time:8997ms step_avg:94.71ms
step:106/1770 train_time:9092ms step_avg:94.70ms
step:107/1770 train_time:9186ms step_avg:94.70ms
step:108/1770 train_time:9282ms step_avg:94.71ms
step:109/1770 train_time:9376ms step_avg:94.71ms
step:110/1770 train_time:9471ms step_avg:94.71ms
step:111/1770 train_time:9565ms step_avg:94.70ms
step:112/1770 train_time:9661ms step_avg:94.71ms
step:113/1770 train_time:9756ms step_avg:94.72ms
step:114/1770 train_time:9850ms step_avg:94.71ms
step:115/1770 train_time:9945ms step_avg:94.71ms
step:116/1770 train_time:10040ms step_avg:94.72ms
step:117/1770 train_time:10135ms step_avg:94.72ms
step:118/1770 train_time:10229ms step_avg:94.71ms
step:119/1770 train_time:10324ms step_avg:94.71ms
step:120/1770 train_time:10419ms step_avg:94.72ms
step:121/1770 train_time:10513ms step_avg:94.71ms
step:122/1770 train_time:10607ms step_avg:94.71ms
step:123/1770 train_time:10702ms step_avg:94.71ms
step:124/1770 train_time:10797ms step_avg:94.71ms
step:125/1770 train_time:10891ms step_avg:94.70ms
step:125/1770 val_loss:4.6585 train_time:10983ms step_avg:95.51ms
step:126/1770 train_time:11009ms step_avg:94.90ms
step:127/1770 train_time:11082ms step_avg:94.72ms
step:128/1770 train_time:11183ms step_avg:94.77ms
step:129/1770 train_time:11282ms step_avg:94.80ms
step:130/1770 train_time:11377ms step_avg:94.81ms
step:131/1770 train_time:11472ms step_avg:94.81ms
step:132/1770 train_time:11567ms step_avg:94.81ms
step:133/1770 train_time:11661ms step_avg:94.81ms
step:134/1770 train_time:11757ms step_avg:94.81ms
step:135/1770 train_time:11851ms step_avg:94.81ms
step:136/1770 train_time:11946ms step_avg:94.81ms
step:137/1770 train_time:12042ms step_avg:94.82ms
step:138/1770 train_time:12137ms step_avg:94.82ms
step:139/1770 train_time:12232ms step_avg:94.82ms
step:140/1770 train_time:12327ms step_avg:94.82ms
step:141/1770 train_time:12422ms step_avg:94.83ms
step:142/1770 train_time:12518ms step_avg:94.83ms
step:143/1770 train_time:12613ms step_avg:94.83ms
step:144/1770 train_time:12708ms step_avg:94.84ms
step:145/1770 train_time:12803ms step_avg:94.84ms
step:146/1770 train_time:12898ms step_avg:94.84ms
step:147/1770 train_time:12994ms step_avg:94.85ms
step:148/1770 train_time:13089ms step_avg:94.85ms
step:149/1770 train_time:13184ms step_avg:94.85ms
step:150/1770 train_time:13280ms step_avg:94.85ms
step:151/1770 train_time:13375ms step_avg:94.86ms
step:152/1770 train_time:13470ms step_avg:94.86ms
step:153/1770 train_time:13565ms step_avg:94.86ms
step:154/1770 train_time:13660ms step_avg:94.86ms
step:155/1770 train_time:13756ms step_avg:94.87ms
step:156/1770 train_time:13851ms step_avg:94.87ms
step:157/1770 train_time:13946ms step_avg:94.87ms
step:158/1770 train_time:14041ms step_avg:94.87ms
step:159/1770 train_time:14137ms step_avg:94.88ms
step:160/1770 train_time:14232ms step_avg:94.88ms
step:161/1770 train_time:14327ms step_avg:94.88ms
step:162/1770 train_time:14423ms step_avg:94.89ms
step:163/1770 train_time:14518ms step_avg:94.89ms
step:164/1770 train_time:14613ms step_avg:94.89ms
step:165/1770 train_time:14708ms step_avg:94.89ms
step:166/1770 train_time:14803ms step_avg:94.89ms
step:167/1770 train_time:14898ms step_avg:94.89ms
step:168/1770 train_time:14994ms step_avg:94.90ms
step:169/1770 train_time:15088ms step_avg:94.89ms
step:170/1770 train_time:15183ms step_avg:94.90ms
step:171/1770 train_time:15279ms step_avg:94.90ms
step:172/1770 train_time:15375ms step_avg:94.91ms
step:173/1770 train_time:15470ms step_avg:94.91ms
step:174/1770 train_time:15565ms step_avg:94.91ms
step:175/1770 train_time:15661ms step_avg:94.92ms
step:176/1770 train_time:15757ms step_avg:94.92ms
step:177/1770 train_time:15852ms step_avg:94.92ms
step:178/1770 train_time:15947ms step_avg:94.92ms
step:179/1770 train_time:16042ms step_avg:94.92ms
step:180/1770 train_time:16137ms step_avg:94.92ms
step:181/1770 train_time:16232ms step_avg:94.93ms
step:182/1770 train_time:16327ms step_avg:94.93ms
step:183/1770 train_time:16423ms step_avg:94.93ms
step:184/1770 train_time:16518ms step_avg:94.93ms
step:185/1770 train_time:16613ms step_avg:94.93ms
step:186/1770 train_time:16708ms step_avg:94.93ms
step:187/1770 train_time:16803ms step_avg:94.93ms
step:188/1770 train_time:16899ms step_avg:94.94ms
step:189/1770 train_time:16994ms step_avg:94.94ms
step:190/1770 train_time:17089ms step_avg:94.94ms
step:191/1770 train_time:17183ms step_avg:94.94ms
step:192/1770 train_time:17280ms step_avg:94.94ms
step:193/1770 train_time:17376ms step_avg:94.95ms
step:194/1770 train_time:17471ms step_avg:94.95ms
step:195/1770 train_time:17566ms step_avg:94.95ms
step:196/1770 train_time:17661ms step_avg:94.95ms
step:197/1770 train_time:17758ms step_avg:94.96ms
step:198/1770 train_time:17853ms step_avg:94.96ms
step:199/1770 train_time:17948ms step_avg:94.96ms
step:200/1770 train_time:18042ms step_avg:94.96ms
step:201/1770 train_time:18138ms step_avg:94.96ms
step:202/1770 train_time:18233ms step_avg:94.96ms
step:203/1770 train_time:18327ms step_avg:94.96ms
step:204/1770 train_time:18423ms step_avg:94.96ms
step:205/1770 train_time:18519ms step_avg:94.97ms
step:206/1770 train_time:18614ms step_avg:94.97ms
step:207/1770 train_time:18709ms step_avg:94.97ms
step:208/1770 train_time:18804ms step_avg:94.97ms
step:209/1770 train_time:18899ms step_avg:94.97ms
step:210/1770 train_time:18994ms step_avg:94.97ms
step:211/1770 train_time:19089ms step_avg:94.97ms
step:212/1770 train_time:19184ms step_avg:94.97ms
step:213/1770 train_time:19280ms step_avg:94.97ms
step:214/1770 train_time:19375ms step_avg:94.98ms
step:215/1770 train_time:19470ms step_avg:94.98ms
step:216/1770 train_time:19565ms step_avg:94.97ms
step:217/1770 train_time:19660ms step_avg:94.98ms
step:218/1770 train_time:19756ms step_avg:94.98ms
step:219/1770 train_time:19852ms step_avg:94.98ms
step:220/1770 train_time:19947ms step_avg:94.99ms
step:221/1770 train_time:20042ms step_avg:94.98ms
step:222/1770 train_time:20137ms step_avg:94.99ms
step:223/1770 train_time:20232ms step_avg:94.99ms
step:224/1770 train_time:20327ms step_avg:94.98ms
step:225/1770 train_time:20422ms step_avg:94.98ms
step:226/1770 train_time:20517ms step_avg:94.99ms
step:227/1770 train_time:20612ms step_avg:94.99ms
step:228/1770 train_time:20707ms step_avg:94.99ms
step:229/1770 train_time:20802ms step_avg:94.99ms
step:230/1770 train_time:20898ms step_avg:94.99ms
step:231/1770 train_time:20994ms step_avg:94.99ms
step:232/1770 train_time:21088ms step_avg:94.99ms
step:233/1770 train_time:21183ms step_avg:94.99ms
step:234/1770 train_time:21279ms step_avg:95.00ms
step:235/1770 train_time:21375ms step_avg:95.00ms
step:236/1770 train_time:21469ms step_avg:95.00ms
step:237/1770 train_time:21565ms step_avg:95.00ms
step:238/1770 train_time:21660ms step_avg:95.00ms
step:239/1770 train_time:21756ms step_avg:95.00ms
step:240/1770 train_time:21851ms step_avg:95.00ms
step:241/1770 train_time:21946ms step_avg:95.00ms
step:242/1770 train_time:22041ms step_avg:95.00ms
step:243/1770 train_time:22137ms step_avg:95.01ms
step:244/1770 train_time:22232ms step_avg:95.01ms
step:245/1770 train_time:22326ms step_avg:95.01ms
step:246/1770 train_time:22422ms step_avg:95.01ms
step:247/1770 train_time:22519ms step_avg:95.02ms
step:248/1770 train_time:22615ms step_avg:95.02ms
step:249/1770 train_time:22710ms step_avg:95.02ms
step:250/1770 train_time:22805ms step_avg:95.02ms
step:250/1770 val_loss:4.1088 train_time:22899ms step_avg:95.41ms
step:251/1770 train_time:22921ms step_avg:95.11ms
step:252/1770 train_time:23003ms step_avg:95.06ms
step:253/1770 train_time:23104ms step_avg:95.08ms
step:254/1770 train_time:23202ms step_avg:95.09ms
step:255/1770 train_time:23298ms step_avg:95.09ms
step:256/1770 train_time:23394ms step_avg:95.10ms
step:257/1770 train_time:23487ms step_avg:95.09ms
step:258/1770 train_time:23582ms step_avg:95.09ms
step:259/1770 train_time:23678ms step_avg:95.09ms
step:260/1770 train_time:23773ms step_avg:95.09ms
step:261/1770 train_time:23867ms step_avg:95.09ms
step:262/1770 train_time:23962ms step_avg:95.09ms
step:263/1770 train_time:24058ms step_avg:95.09ms
step:264/1770 train_time:24153ms step_avg:95.09ms
step:265/1770 train_time:24249ms step_avg:95.09ms
step:266/1770 train_time:24344ms step_avg:95.09ms
step:267/1770 train_time:24440ms step_avg:95.10ms
step:268/1770 train_time:24536ms step_avg:95.10ms
step:269/1770 train_time:24631ms step_avg:95.10ms
step:270/1770 train_time:24726ms step_avg:95.10ms
step:271/1770 train_time:24822ms step_avg:95.10ms
step:272/1770 train_time:24918ms step_avg:95.11ms
step:273/1770 train_time:25013ms step_avg:95.11ms
step:274/1770 train_time:25109ms step_avg:95.11ms
step:275/1770 train_time:25205ms step_avg:95.11ms
step:276/1770 train_time:25300ms step_avg:95.11ms
step:277/1770 train_time:25396ms step_avg:95.12ms
step:278/1770 train_time:25493ms step_avg:95.12ms
step:279/1770 train_time:25589ms step_avg:95.13ms
step:280/1770 train_time:25685ms step_avg:95.13ms
step:281/1770 train_time:25780ms step_avg:95.13ms
step:282/1770 train_time:25876ms step_avg:95.13ms
step:283/1770 train_time:25972ms step_avg:95.14ms
step:284/1770 train_time:26068ms step_avg:95.14ms
step:285/1770 train_time:26163ms step_avg:95.14ms
step:286/1770 train_time:26259ms step_avg:95.14ms
step:287/1770 train_time:26355ms step_avg:95.14ms
step:288/1770 train_time:26450ms step_avg:95.14ms
step:289/1770 train_time:26545ms step_avg:95.14ms
step:290/1770 train_time:26641ms step_avg:95.15ms
step:291/1770 train_time:26737ms step_avg:95.15ms
step:292/1770 train_time:26832ms step_avg:95.15ms
step:293/1770 train_time:26927ms step_avg:95.15ms
step:294/1770 train_time:27023ms step_avg:95.15ms
step:295/1770 train_time:27119ms step_avg:95.15ms
step:296/1770 train_time:27215ms step_avg:95.16ms
step:297/1770 train_time:27311ms step_avg:95.16ms
step:298/1770 train_time:27406ms step_avg:95.16ms
step:299/1770 train_time:27502ms step_avg:95.16ms
step:300/1770 train_time:27597ms step_avg:95.16ms
step:301/1770 train_time:27693ms step_avg:95.17ms
step:302/1770 train_time:27788ms step_avg:95.16ms
step:303/1770 train_time:27883ms step_avg:95.17ms
step:304/1770 train_time:27979ms step_avg:95.17ms
step:305/1770 train_time:28075ms step_avg:95.17ms
step:306/1770 train_time:28170ms step_avg:95.17ms
step:307/1770 train_time:28265ms step_avg:95.17ms
step:308/1770 train_time:28361ms step_avg:95.17ms
step:309/1770 train_time:28457ms step_avg:95.17ms
step:310/1770 train_time:28553ms step_avg:95.18ms
step:311/1770 train_time:28648ms step_avg:95.18ms
step:312/1770 train_time:28744ms step_avg:95.18ms
step:313/1770 train_time:28840ms step_avg:95.18ms
step:314/1770 train_time:28936ms step_avg:95.18ms
step:315/1770 train_time:29031ms step_avg:95.18ms
step:316/1770 train_time:29127ms step_avg:95.19ms
step:317/1770 train_time:29223ms step_avg:95.19ms
step:318/1770 train_time:29318ms step_avg:95.19ms
step:319/1770 train_time:29414ms step_avg:95.19ms
step:320/1770 train_time:29509ms step_avg:95.19ms
step:321/1770 train_time:29604ms step_avg:95.19ms
step:322/1770 train_time:29701ms step_avg:95.19ms
step:323/1770 train_time:29796ms step_avg:95.20ms
step:324/1770 train_time:29892ms step_avg:95.20ms
step:325/1770 train_time:29987ms step_avg:95.20ms
step:326/1770 train_time:30083ms step_avg:95.20ms
step:327/1770 train_time:30178ms step_avg:95.20ms
step:328/1770 train_time:30273ms step_avg:95.20ms
step:329/1770 train_time:30369ms step_avg:95.20ms
step:330/1770 train_time:30464ms step_avg:95.20ms
step:331/1770 train_time:30561ms step_avg:95.21ms
step:332/1770 train_time:30660ms step_avg:95.22ms
step:333/1770 train_time:30756ms step_avg:95.22ms
step:334/1770 train_time:30851ms step_avg:95.22ms
step:335/1770 train_time:30947ms step_avg:95.22ms
step:336/1770 train_time:31042ms step_avg:95.22ms
step:337/1770 train_time:31138ms step_avg:95.22ms
step:338/1770 train_time:31234ms step_avg:95.23ms
step:339/1770 train_time:31329ms step_avg:95.23ms
step:340/1770 train_time:31425ms step_avg:95.23ms
step:341/1770 train_time:31521ms step_avg:95.23ms
step:342/1770 train_time:31616ms step_avg:95.23ms
step:343/1770 train_time:31712ms step_avg:95.23ms
step:344/1770 train_time:31807ms step_avg:95.23ms
step:345/1770 train_time:31903ms step_avg:95.23ms
step:346/1770 train_time:31999ms step_avg:95.23ms
step:347/1770 train_time:32094ms step_avg:95.23ms
step:348/1770 train_time:32189ms step_avg:95.23ms
step:349/1770 train_time:32285ms step_avg:95.23ms
step:350/1770 train_time:32381ms step_avg:95.24ms
step:351/1770 train_time:32476ms step_avg:95.24ms
step:352/1770 train_time:32572ms step_avg:95.24ms
step:353/1770 train_time:32667ms step_avg:95.24ms
step:354/1770 train_time:32763ms step_avg:95.24ms
step:355/1770 train_time:32859ms step_avg:95.24ms
step:356/1770 train_time:32955ms step_avg:95.25ms
step:357/1770 train_time:33050ms step_avg:95.25ms
step:358/1770 train_time:33145ms step_avg:95.25ms
step:359/1770 train_time:33241ms step_avg:95.25ms
step:360/1770 train_time:33337ms step_avg:95.25ms
step:361/1770 train_time:33433ms step_avg:95.25ms
step:362/1770 train_time:33528ms step_avg:95.25ms
step:363/1770 train_time:33624ms step_avg:95.25ms
step:364/1770 train_time:33719ms step_avg:95.25ms
step:365/1770 train_time:33815ms step_avg:95.25ms
step:366/1770 train_time:33911ms step_avg:95.25ms
step:367/1770 train_time:34006ms step_avg:95.25ms
step:368/1770 train_time:34102ms step_avg:95.26ms
step:369/1770 train_time:34198ms step_avg:95.26ms
step:370/1770 train_time:34293ms step_avg:95.26ms
step:371/1770 train_time:34389ms step_avg:95.26ms
step:372/1770 train_time:34484ms step_avg:95.26ms
step:373/1770 train_time:34581ms step_avg:95.26ms
step:374/1770 train_time:34677ms step_avg:95.27ms
step:375/1770 train_time:34772ms step_avg:95.27ms
step:375/1770 val_loss:3.9069 train_time:34866ms step_avg:95.52ms
step:376/1770 train_time:34888ms step_avg:95.32ms
step:377/1770 train_time:34969ms step_avg:95.28ms
step:378/1770 train_time:35067ms step_avg:95.29ms
step:379/1770 train_time:35164ms step_avg:95.29ms
step:380/1770 train_time:35258ms step_avg:95.29ms
step:381/1770 train_time:35354ms step_avg:95.29ms
step:382/1770 train_time:35450ms step_avg:95.29ms
step:383/1770 train_time:35544ms step_avg:95.29ms
step:384/1770 train_time:35640ms step_avg:95.29ms
step:385/1770 train_time:35736ms step_avg:95.30ms
step:386/1770 train_time:35831ms step_avg:95.30ms
step:387/1770 train_time:35927ms step_avg:95.30ms
step:388/1770 train_time:36022ms step_avg:95.30ms
step:389/1770 train_time:36118ms step_avg:95.30ms
step:390/1770 train_time:36214ms step_avg:95.30ms
step:391/1770 train_time:36310ms step_avg:95.30ms
step:392/1770 train_time:36405ms step_avg:95.30ms
step:393/1770 train_time:36501ms step_avg:95.30ms
step:394/1770 train_time:36597ms step_avg:95.30ms
step:395/1770 train_time:36693ms step_avg:95.31ms
step:396/1770 train_time:36790ms step_avg:95.31ms
step:397/1770 train_time:36887ms step_avg:95.32ms
step:398/1770 train_time:36984ms step_avg:95.32ms
step:399/1770 train_time:37082ms step_avg:95.33ms
step:400/1770 train_time:37180ms step_avg:95.33ms
step:401/1770 train_time:37278ms step_avg:95.34ms
step:402/1770 train_time:37376ms step_avg:95.35ms
step:403/1770 train_time:37473ms step_avg:95.35ms
step:404/1770 train_time:37570ms step_avg:95.36ms
step:405/1770 train_time:37668ms step_avg:95.36ms
step:406/1770 train_time:37765ms step_avg:95.37ms
step:407/1770 train_time:37863ms step_avg:95.37ms
step:408/1770 train_time:37961ms step_avg:95.38ms
step:409/1770 train_time:38058ms step_avg:95.38ms
step:410/1770 train_time:38155ms step_avg:95.39ms
step:411/1770 train_time:38253ms step_avg:95.39ms
step:412/1770 train_time:38350ms step_avg:95.40ms
step:413/1770 train_time:38448ms step_avg:95.40ms
step:414/1770 train_time:38545ms step_avg:95.41ms
step:415/1770 train_time:38643ms step_avg:95.41ms
step:416/1770 train_time:38741ms step_avg:95.42ms
step:417/1770 train_time:38840ms step_avg:95.43ms
step:418/1770 train_time:38938ms step_avg:95.44ms
step:419/1770 train_time:39035ms step_avg:95.44ms
step:420/1770 train_time:39133ms step_avg:95.45ms
step:421/1770 train_time:39229ms step_avg:95.45ms
step:422/1770 train_time:39327ms step_avg:95.45ms
step:423/1770 train_time:39425ms step_avg:95.46ms
step:424/1770 train_time:39522ms step_avg:95.46ms
step:425/1770 train_time:39621ms step_avg:95.47ms
step:426/1770 train_time:39719ms step_avg:95.48ms
step:427/1770 train_time:39818ms step_avg:95.49ms
step:428/1770 train_time:39916ms step_avg:95.49ms
step:429/1770 train_time:40014ms step_avg:95.50ms
step:430/1770 train_time:40111ms step_avg:95.50ms
step:431/1770 train_time:40209ms step_avg:95.51ms
step:432/1770 train_time:40306ms step_avg:95.51ms
step:433/1770 train_time:40403ms step_avg:95.52ms
step:434/1770 train_time:40501ms step_avg:95.52ms
step:435/1770 train_time:40599ms step_avg:95.53ms
step:436/1770 train_time:40697ms step_avg:95.53ms
step:437/1770 train_time:40794ms step_avg:95.54ms
step:438/1770 train_time:40892ms step_avg:95.54ms
step:439/1770 train_time:40989ms step_avg:95.54ms
step:440/1770 train_time:41086ms step_avg:95.55ms
step:441/1770 train_time:41184ms step_avg:95.55ms
step:442/1770 train_time:41281ms step_avg:95.56ms
step:443/1770 train_time:41379ms step_avg:95.56ms
step:444/1770 train_time:41477ms step_avg:95.57ms
step:445/1770 train_time:41576ms step_avg:95.58ms
step:446/1770 train_time:41673ms step_avg:95.58ms
step:447/1770 train_time:41770ms step_avg:95.58ms
step:448/1770 train_time:41867ms step_avg:95.59ms
step:449/1770 train_time:41965ms step_avg:95.59ms
step:450/1770 train_time:42063ms step_avg:95.60ms
step:451/1770 train_time:42161ms step_avg:95.60ms
step:452/1770 train_time:42259ms step_avg:95.61ms
step:453/1770 train_time:42357ms step_avg:95.61ms
step:454/1770 train_time:42455ms step_avg:95.62ms
step:455/1770 train_time:42552ms step_avg:95.62ms
step:456/1770 train_time:42649ms step_avg:95.63ms
step:457/1770 train_time:42746ms step_avg:95.63ms
step:458/1770 train_time:42843ms step_avg:95.63ms
step:459/1770 train_time:42941ms step_avg:95.64ms
step:460/1770 train_time:43039ms step_avg:95.64ms
step:461/1770 train_time:43137ms step_avg:95.65ms
step:462/1770 train_time:43235ms step_avg:95.65ms
step:463/1770 train_time:43332ms step_avg:95.66ms
step:464/1770 train_time:43429ms step_avg:95.66ms
step:465/1770 train_time:43526ms step_avg:95.66ms
step:466/1770 train_time:43624ms step_avg:95.67ms
step:467/1770 train_time:43722ms step_avg:95.67ms
step:468/1770 train_time:43821ms step_avg:95.68ms
step:469/1770 train_time:43918ms step_avg:95.68ms
step:470/1770 train_time:44016ms step_avg:95.69ms
step:471/1770 train_time:44114ms step_avg:95.69ms
step:472/1770 train_time:44212ms step_avg:95.70ms
step:473/1770 train_time:44309ms step_avg:95.70ms
step:474/1770 train_time:44406ms step_avg:95.70ms
step:475/1770 train_time:44504ms step_avg:95.71ms
step:476/1770 train_time:44602ms step_avg:95.71ms
step:477/1770 train_time:44700ms step_avg:95.72ms
step:478/1770 train_time:44798ms step_avg:95.72ms
step:479/1770 train_time:44895ms step_avg:95.73ms
step:480/1770 train_time:44993ms step_avg:95.73ms
step:481/1770 train_time:45090ms step_avg:95.73ms
step:482/1770 train_time:45187ms step_avg:95.73ms
step:483/1770 train_time:45285ms step_avg:95.74ms
step:484/1770 train_time:45382ms step_avg:95.74ms
step:485/1770 train_time:45481ms step_avg:95.75ms
step:486/1770 train_time:45580ms step_avg:95.76ms
step:487/1770 train_time:45678ms step_avg:95.76ms
step:488/1770 train_time:45776ms step_avg:95.77ms
step:489/1770 train_time:45874ms step_avg:95.77ms
step:490/1770 train_time:45971ms step_avg:95.77ms
step:491/1770 train_time:46069ms step_avg:95.78ms
step:492/1770 train_time:46166ms step_avg:95.78ms
step:493/1770 train_time:46263ms step_avg:95.78ms
step:494/1770 train_time:46361ms step_avg:95.79ms
step:495/1770 train_time:46459ms step_avg:95.79ms
step:496/1770 train_time:46556ms step_avg:95.79ms
step:497/1770 train_time:46654ms step_avg:95.80ms
step:498/1770 train_time:46751ms step_avg:95.80ms
step:499/1770 train_time:46848ms step_avg:95.80ms
step:500/1770 train_time:46946ms step_avg:95.81ms
step:500/1770 val_loss:3.7547 train_time:47042ms step_avg:96.00ms
step:501/1770 train_time:47064ms step_avg:95.85ms
step:502/1770 train_time:47148ms step_avg:95.83ms
step:503/1770 train_time:47249ms step_avg:95.84ms
step:504/1770 train_time:47346ms step_avg:95.84ms
step:505/1770 train_time:47444ms step_avg:95.85ms
step:506/1770 train_time:47542ms step_avg:95.85ms
step:507/1770 train_time:47639ms step_avg:95.85ms
step:508/1770 train_time:47736ms step_avg:95.86ms
step:509/1770 train_time:47834ms step_avg:95.86ms
step:510/1770 train_time:47931ms step_avg:95.86ms
step:511/1770 train_time:48028ms step_avg:95.86ms
step:512/1770 train_time:48126ms step_avg:95.87ms
step:513/1770 train_time:48224ms step_avg:95.87ms
step:514/1770 train_time:48323ms step_avg:95.88ms
step:515/1770 train_time:48420ms step_avg:95.88ms
step:516/1770 train_time:48518ms step_avg:95.88ms
step:517/1770 train_time:48615ms step_avg:95.89ms
step:518/1770 train_time:48712ms step_avg:95.89ms
step:519/1770 train_time:48809ms step_avg:95.89ms
step:520/1770 train_time:48907ms step_avg:95.90ms
step:521/1770 train_time:49004ms step_avg:95.90ms
step:522/1770 train_time:49102ms step_avg:95.90ms
step:523/1770 train_time:49201ms step_avg:95.91ms
step:524/1770 train_time:49300ms step_avg:95.91ms
step:525/1770 train_time:49398ms step_avg:95.92ms
step:526/1770 train_time:49496ms step_avg:95.92ms
step:527/1770 train_time:49594ms step_avg:95.93ms
step:528/1770 train_time:49692ms step_avg:95.93ms
step:529/1770 train_time:49789ms step_avg:95.93ms
step:530/1770 train_time:49887ms step_avg:95.94ms
step:531/1770 train_time:49985ms step_avg:95.94ms
step:532/1770 train_time:50083ms step_avg:95.94ms
step:533/1770 train_time:50181ms step_avg:95.95ms
step:534/1770 train_time:50280ms step_avg:95.95ms
step:535/1770 train_time:50378ms step_avg:95.96ms
step:536/1770 train_time:50476ms step_avg:95.96ms
step:537/1770 train_time:50575ms step_avg:95.97ms
step:538/1770 train_time:50674ms step_avg:95.97ms
step:539/1770 train_time:50772ms step_avg:95.98ms
step:540/1770 train_time:50869ms step_avg:95.98ms
step:541/1770 train_time:50967ms step_avg:95.98ms
step:542/1770 train_time:51066ms step_avg:95.99ms
step:543/1770 train_time:51164ms step_avg:95.99ms
step:544/1770 train_time:51262ms step_avg:96.00ms
step:545/1770 train_time:51361ms step_avg:96.00ms
step:546/1770 train_time:51459ms step_avg:96.01ms
step:547/1770 train_time:51557ms step_avg:96.01ms
step:548/1770 train_time:51656ms step_avg:96.01ms
step:549/1770 train_time:51754ms step_avg:96.02ms
step:550/1770 train_time:51853ms step_avg:96.02ms
step:551/1770 train_time:51951ms step_avg:96.03ms
step:552/1770 train_time:52049ms step_avg:96.03ms
step:553/1770 train_time:52146ms step_avg:96.03ms
step:554/1770 train_time:52244ms step_avg:96.04ms
step:555/1770 train_time:52342ms step_avg:96.04ms
step:556/1770 train_time:52440ms step_avg:96.04ms
step:557/1770 train_time:52539ms step_avg:96.05ms
step:558/1770 train_time:52636ms step_avg:96.05ms
step:559/1770 train_time:52734ms step_avg:96.05ms
step:560/1770 train_time:52832ms step_avg:96.06ms
step:561/1770 train_time:52930ms step_avg:96.06ms
step:562/1770 train_time:53028ms step_avg:96.06ms
step:563/1770 train_time:53126ms step_avg:96.07ms
step:564/1770 train_time:53224ms step_avg:96.07ms
step:565/1770 train_time:53322ms step_avg:96.08ms
step:566/1770 train_time:53421ms step_avg:96.08ms
step:567/1770 train_time:53519ms step_avg:96.08ms
step:568/1770 train_time:53617ms step_avg:96.09ms
step:569/1770 train_time:53715ms step_avg:96.09ms
step:570/1770 train_time:53813ms step_avg:96.09ms
step:571/1770 train_time:53911ms step_avg:96.10ms
step:572/1770 train_time:54009ms step_avg:96.10ms
step:573/1770 train_time:54107ms step_avg:96.10ms
step:574/1770 train_time:54205ms step_avg:96.11ms
step:575/1770 train_time:54303ms step_avg:96.11ms
step:576/1770 train_time:54401ms step_avg:96.12ms
step:577/1770 train_time:54499ms step_avg:96.12ms
step:578/1770 train_time:54598ms step_avg:96.12ms
step:579/1770 train_time:54695ms step_avg:96.13ms
step:580/1770 train_time:54793ms step_avg:96.13ms
step:581/1770 train_time:54892ms step_avg:96.13ms
step:582/1770 train_time:54990ms step_avg:96.14ms
step:583/1770 train_time:55087ms step_avg:96.14ms
step:584/1770 train_time:55185ms step_avg:96.14ms
step:585/1770 train_time:55283ms step_avg:96.15ms
step:586/1770 train_time:55381ms step_avg:96.15ms
step:587/1770 train_time:55480ms step_avg:96.15ms
step:588/1770 train_time:55578ms step_avg:96.16ms
step:589/1770 train_time:55676ms step_avg:96.16ms
step:590/1770 train_time:55773ms step_avg:96.16ms
step:591/1770 train_time:55872ms step_avg:96.16ms
step:592/1770 train_time:55969ms step_avg:96.17ms
step:593/1770 train_time:56067ms step_avg:96.17ms
step:594/1770 train_time:56165ms step_avg:96.17ms
step:595/1770 train_time:56263ms step_avg:96.18ms
step:596/1770 train_time:56361ms step_avg:96.18ms
step:597/1770 train_time:56460ms step_avg:96.18ms
step:598/1770 train_time:56558ms step_avg:96.19ms
step:599/1770 train_time:56656ms step_avg:96.19ms
step:600/1770 train_time:56754ms step_avg:96.19ms
step:601/1770 train_time:56851ms step_avg:96.20ms
step:602/1770 train_time:56949ms step_avg:96.20ms
step:603/1770 train_time:57047ms step_avg:96.20ms
step:604/1770 train_time:57145ms step_avg:96.20ms
step:605/1770 train_time:57244ms step_avg:96.21ms
step:606/1770 train_time:57342ms step_avg:96.21ms
step:607/1770 train_time:57440ms step_avg:96.21ms
step:608/1770 train_time:57538ms step_avg:96.22ms
step:609/1770 train_time:57636ms step_avg:96.22ms
step:610/1770 train_time:57735ms step_avg:96.22ms
step:611/1770 train_time:57833ms step_avg:96.23ms
step:612/1770 train_time:57931ms step_avg:96.23ms
step:613/1770 train_time:58030ms step_avg:96.24ms
step:614/1770 train_time:58127ms step_avg:96.24ms
step:615/1770 train_time:58225ms step_avg:96.24ms
step:616/1770 train_time:58324ms step_avg:96.24ms
step:617/1770 train_time:58422ms step_avg:96.25ms
step:618/1770 train_time:58520ms step_avg:96.25ms
step:619/1770 train_time:58618ms step_avg:96.25ms
step:620/1770 train_time:58717ms step_avg:96.26ms
step:621/1770 train_time:58814ms step_avg:96.26ms
step:622/1770 train_time:58912ms step_avg:96.26ms
step:623/1770 train_time:59010ms step_avg:96.26ms
step:624/1770 train_time:59108ms step_avg:96.27ms
step:625/1770 train_time:59206ms step_avg:96.27ms
step:625/1770 val_loss:3.6674 train_time:59302ms step_avg:96.43ms
step:626/1770 train_time:59326ms step_avg:96.31ms
step:627/1770 train_time:59411ms step_avg:96.29ms
step:628/1770 train_time:59509ms step_avg:96.29ms
step:629/1770 train_time:59607ms step_avg:96.30ms
step:630/1770 train_time:59705ms step_avg:96.30ms
step:631/1770 train_time:59803ms step_avg:96.30ms
step:632/1770 train_time:59901ms step_avg:96.30ms
step:633/1770 train_time:59999ms step_avg:96.31ms
step:634/1770 train_time:60097ms step_avg:96.31ms
step:635/1770 train_time:60195ms step_avg:96.31ms
step:636/1770 train_time:60293ms step_avg:96.31ms
step:637/1770 train_time:60391ms step_avg:96.32ms
step:638/1770 train_time:60489ms step_avg:96.32ms
step:639/1770 train_time:60587ms step_avg:96.32ms
step:640/1770 train_time:60684ms step_avg:96.32ms
step:641/1770 train_time:60782ms step_avg:96.33ms
step:642/1770 train_time:60880ms step_avg:96.33ms
step:643/1770 train_time:60978ms step_avg:96.33ms
step:644/1770 train_time:61076ms step_avg:96.33ms
step:645/1770 train_time:61174ms step_avg:96.34ms
step:646/1770 train_time:61272ms step_avg:96.34ms
step:647/1770 train_time:61370ms step_avg:96.34ms
step:648/1770 train_time:61468ms step_avg:96.34ms
step:649/1770 train_time:61566ms step_avg:96.35ms
step:650/1770 train_time:61663ms step_avg:96.35ms
step:651/1770 train_time:61761ms step_avg:96.35ms
step:652/1770 train_time:61859ms step_avg:96.35ms
step:653/1770 train_time:61957ms step_avg:96.36ms
step:654/1770 train_time:62055ms step_avg:96.36ms
step:655/1770 train_time:62153ms step_avg:96.36ms
step:656/1770 train_time:62251ms step_avg:96.36ms
step:657/1770 train_time:62348ms step_avg:96.37ms
step:658/1770 train_time:62448ms step_avg:96.37ms
step:659/1770 train_time:62548ms step_avg:96.38ms
step:660/1770 train_time:62648ms step_avg:96.38ms
step:661/1770 train_time:62747ms step_avg:96.39ms
step:662/1770 train_time:62847ms step_avg:96.39ms
step:663/1770 train_time:62946ms step_avg:96.40ms
step:664/1770 train_time:63045ms step_avg:96.40ms
step:665/1770 train_time:63144ms step_avg:96.40ms
step:666/1770 train_time:63244ms step_avg:96.41ms
step:667/1770 train_time:63343ms step_avg:96.41ms
step:668/1770 train_time:63443ms step_avg:96.42ms
step:669/1770 train_time:63542ms step_avg:96.42ms
step:670/1770 train_time:63641ms step_avg:96.43ms
step:671/1770 train_time:63741ms step_avg:96.43ms
step:672/1770 train_time:63841ms step_avg:96.44ms
step:673/1770 train_time:63940ms step_avg:96.44ms
step:674/1770 train_time:64040ms step_avg:96.45ms
step:675/1770 train_time:64140ms step_avg:96.45ms
step:676/1770 train_time:64239ms step_avg:96.46ms
step:677/1770 train_time:64339ms step_avg:96.46ms
step:678/1770 train_time:64440ms step_avg:96.47ms
step:679/1770 train_time:64540ms step_avg:96.47ms
step:680/1770 train_time:64639ms step_avg:96.48ms
step:681/1770 train_time:64739ms step_avg:96.48ms
step:682/1770 train_time:64841ms step_avg:96.49ms
step:683/1770 train_time:64941ms step_avg:96.49ms
step:684/1770 train_time:65041ms step_avg:96.50ms
step:685/1770 train_time:65141ms step_avg:96.51ms
step:686/1770 train_time:65241ms step_avg:96.51ms
step:687/1770 train_time:65340ms step_avg:96.51ms
step:688/1770 train_time:65440ms step_avg:96.52ms
step:689/1770 train_time:65540ms step_avg:96.52ms
step:690/1770 train_time:65639ms step_avg:96.53ms
step:691/1770 train_time:65740ms step_avg:96.53ms
step:692/1770 train_time:65839ms step_avg:96.54ms
step:693/1770 train_time:65939ms step_avg:96.54ms
step:694/1770 train_time:66039ms step_avg:96.55ms
step:695/1770 train_time:66140ms step_avg:96.55ms
step:696/1770 train_time:66239ms step_avg:96.56ms
step:697/1770 train_time:66339ms step_avg:96.56ms
step:698/1770 train_time:66439ms step_avg:96.57ms
step:699/1770 train_time:66539ms step_avg:96.57ms
step:700/1770 train_time:66639ms step_avg:96.58ms
step:701/1770 train_time:66738ms step_avg:96.58ms
step:702/1770 train_time:66838ms step_avg:96.59ms
step:703/1770 train_time:66938ms step_avg:96.59ms
step:704/1770 train_time:67038ms step_avg:96.60ms
step:705/1770 train_time:67138ms step_avg:96.60ms
step:706/1770 train_time:67239ms step_avg:96.61ms
step:707/1770 train_time:67339ms step_avg:96.61ms
step:708/1770 train_time:67440ms step_avg:96.62ms
step:709/1770 train_time:67540ms step_avg:96.62ms
step:710/1770 train_time:67640ms step_avg:96.63ms
step:711/1770 train_time:67740ms step_avg:96.63ms
step:712/1770 train_time:67840ms step_avg:96.64ms
step:713/1770 train_time:67940ms step_avg:96.64ms
step:714/1770 train_time:68040ms step_avg:96.65ms
step:715/1770 train_time:68140ms step_avg:96.65ms
step:716/1770 train_time:68240ms step_avg:96.66ms
step:717/1770 train_time:68341ms step_avg:96.66ms
step:718/1770 train_time:68440ms step_avg:96.67ms
step:719/1770 train_time:68540ms step_avg:96.67ms
step:720/1770 train_time:68640ms step_avg:96.68ms
step:721/1770 train_time:68740ms step_avg:96.68ms
step:722/1770 train_time:68840ms step_avg:96.69ms
step:723/1770 train_time:68940ms step_avg:96.69ms
step:724/1770 train_time:69040ms step_avg:96.70ms
step:725/1770 train_time:69140ms step_avg:96.70ms
step:726/1770 train_time:69240ms step_avg:96.70ms
step:727/1770 train_time:69340ms step_avg:96.71ms
step:728/1770 train_time:69440ms step_avg:96.71ms
step:729/1770 train_time:69539ms step_avg:96.72ms
step:730/1770 train_time:69639ms step_avg:96.72ms
step:731/1770 train_time:69739ms step_avg:96.73ms
step:732/1770 train_time:69839ms step_avg:96.73ms
step:733/1770 train_time:69940ms step_avg:96.74ms
step:734/1770 train_time:70039ms step_avg:96.74ms
step:735/1770 train_time:70138ms step_avg:96.74ms
step:736/1770 train_time:70239ms step_avg:96.75ms
step:737/1770 train_time:70338ms step_avg:96.75ms
step:738/1770 train_time:70438ms step_avg:96.76ms
step:739/1770 train_time:70538ms step_avg:96.76ms
step:740/1770 train_time:70637ms step_avg:96.76ms
step:741/1770 train_time:70738ms step_avg:96.77ms
step:742/1770 train_time:70838ms step_avg:96.77ms
step:743/1770 train_time:70939ms step_avg:96.78ms
step:744/1770 train_time:71039ms step_avg:96.78ms
step:745/1770 train_time:71140ms step_avg:96.79ms
step:746/1770 train_time:71240ms step_avg:96.79ms
step:747/1770 train_time:71339ms step_avg:96.80ms
step:748/1770 train_time:71439ms step_avg:96.80ms
step:749/1770 train_time:71539ms step_avg:96.81ms
step:750/1770 train_time:71639ms step_avg:96.81ms
step:750/1770 val_loss:3.6032 train_time:71737ms step_avg:96.94ms
step:751/1770 train_time:71759ms step_avg:96.84ms
step:752/1770 train_time:71847ms step_avg:96.83ms
step:753/1770 train_time:71948ms step_avg:96.83ms
step:754/1770 train_time:72047ms step_avg:96.84ms
step:755/1770 train_time:72147ms step_avg:96.84ms
step:756/1770 train_time:72246ms step_avg:96.84ms
step:757/1770 train_time:72345ms step_avg:96.85ms
step:758/1770 train_time:72444ms step_avg:96.85ms
step:759/1770 train_time:72543ms step_avg:96.85ms
step:760/1770 train_time:72642ms step_avg:96.86ms
step:761/1770 train_time:72742ms step_avg:96.86ms
step:762/1770 train_time:72841ms step_avg:96.86ms
step:763/1770 train_time:72941ms step_avg:96.87ms
step:764/1770 train_time:73040ms step_avg:96.87ms
step:765/1770 train_time:73139ms step_avg:96.87ms
step:766/1770 train_time:73239ms step_avg:96.88ms
step:767/1770 train_time:73340ms step_avg:96.88ms
step:768/1770 train_time:73440ms step_avg:96.89ms
step:769/1770 train_time:73541ms step_avg:96.89ms
step:770/1770 train_time:73640ms step_avg:96.89ms
step:771/1770 train_time:73739ms step_avg:96.90ms
step:772/1770 train_time:73839ms step_avg:96.90ms
step:773/1770 train_time:73938ms step_avg:96.90ms
step:774/1770 train_time:74037ms step_avg:96.91ms
step:775/1770 train_time:74137ms step_avg:96.91ms
step:776/1770 train_time:74237ms step_avg:96.92ms
step:777/1770 train_time:74337ms step_avg:96.92ms
step:778/1770 train_time:74437ms step_avg:96.92ms
step:779/1770 train_time:74537ms step_avg:96.93ms
step:780/1770 train_time:74637ms step_avg:96.93ms
step:781/1770 train_time:74738ms step_avg:96.94ms
step:782/1770 train_time:74838ms step_avg:96.94ms
step:783/1770 train_time:74937ms step_avg:96.94ms
step:784/1770 train_time:75038ms step_avg:96.95ms
step:785/1770 train_time:75137ms step_avg:96.95ms
step:786/1770 train_time:75237ms step_avg:96.96ms
step:787/1770 train_time:75338ms step_avg:96.96ms
step:788/1770 train_time:75438ms step_avg:96.96ms
step:789/1770 train_time:75538ms step_avg:96.97ms
step:790/1770 train_time:75637ms step_avg:96.97ms
step:791/1770 train_time:75738ms step_avg:96.98ms
step:792/1770 train_time:75837ms step_avg:96.98ms
step:793/1770 train_time:75938ms step_avg:96.98ms
step:794/1770 train_time:76038ms step_avg:96.99ms
step:795/1770 train_time:76138ms step_avg:96.99ms
step:796/1770 train_time:76238ms step_avg:96.99ms
step:797/1770 train_time:76338ms step_avg:97.00ms
step:798/1770 train_time:76438ms step_avg:97.00ms
step:799/1770 train_time:76538ms step_avg:97.01ms
step:800/1770 train_time:76638ms step_avg:97.01ms
step:801/1770 train_time:76738ms step_avg:97.01ms
step:802/1770 train_time:76837ms step_avg:97.02ms
step:803/1770 train_time:76938ms step_avg:97.02ms
step:804/1770 train_time:77038ms step_avg:97.02ms
step:805/1770 train_time:77138ms step_avg:97.03ms
step:806/1770 train_time:77238ms step_avg:97.03ms
step:807/1770 train_time:77337ms step_avg:97.04ms
step:808/1770 train_time:77437ms step_avg:97.04ms
step:809/1770 train_time:77537ms step_avg:97.04ms
step:810/1770 train_time:77638ms step_avg:97.05ms
step:811/1770 train_time:77738ms step_avg:97.05ms
step:812/1770 train_time:77838ms step_avg:97.05ms
step:813/1770 train_time:77938ms step_avg:97.06ms
step:814/1770 train_time:78038ms step_avg:97.06ms
step:815/1770 train_time:78138ms step_avg:97.07ms
step:816/1770 train_time:78238ms step_avg:97.07ms
step:817/1770 train_time:78338ms step_avg:97.07ms
step:818/1770 train_time:78438ms step_avg:97.08ms
step:819/1770 train_time:78539ms step_avg:97.08ms
step:820/1770 train_time:78639ms step_avg:97.08ms
step:821/1770 train_time:78739ms step_avg:97.09ms
step:822/1770 train_time:78838ms step_avg:97.09ms
step:823/1770 train_time:78938ms step_avg:97.10ms
step:824/1770 train_time:79038ms step_avg:97.10ms
step:825/1770 train_time:79138ms step_avg:97.10ms
step:826/1770 train_time:79238ms step_avg:97.11ms
step:827/1770 train_time:79338ms step_avg:97.11ms
step:828/1770 train_time:79438ms step_avg:97.11ms
step:829/1770 train_time:79538ms step_avg:97.12ms
step:830/1770 train_time:79638ms step_avg:97.12ms
step:831/1770 train_time:79737ms step_avg:97.12ms
step:832/1770 train_time:79838ms step_avg:97.13ms
step:833/1770 train_time:79938ms step_avg:97.13ms
step:834/1770 train_time:80038ms step_avg:97.13ms
step:835/1770 train_time:80138ms step_avg:97.14ms
step:836/1770 train_time:80238ms step_avg:97.14ms
step:837/1770 train_time:80338ms step_avg:97.14ms
step:838/1770 train_time:80438ms step_avg:97.15ms
step:839/1770 train_time:80537ms step_avg:97.15ms
step:840/1770 train_time:80638ms step_avg:97.15ms
step:841/1770 train_time:80738ms step_avg:97.16ms
step:842/1770 train_time:80837ms step_avg:97.16ms
step:843/1770 train_time:80937ms step_avg:97.16ms
step:844/1770 train_time:81038ms step_avg:97.17ms
step:845/1770 train_time:81138ms step_avg:97.17ms
step:846/1770 train_time:81238ms step_avg:97.17ms
step:847/1770 train_time:81338ms step_avg:97.18ms
step:848/1770 train_time:81438ms step_avg:97.18ms
step:849/1770 train_time:81538ms step_avg:97.18ms
step:850/1770 train_time:81637ms step_avg:97.19ms
step:851/1770 train_time:81738ms step_avg:97.19ms
step:852/1770 train_time:81838ms step_avg:97.19ms
step:853/1770 train_time:81938ms step_avg:97.20ms
step:854/1770 train_time:82037ms step_avg:97.20ms
step:855/1770 train_time:82137ms step_avg:97.20ms
step:856/1770 train_time:82237ms step_avg:97.21ms
step:857/1770 train_time:82337ms step_avg:97.21ms
step:858/1770 train_time:82437ms step_avg:97.21ms
step:859/1770 train_time:82538ms step_avg:97.22ms
step:860/1770 train_time:82638ms step_avg:97.22ms
step:861/1770 train_time:82738ms step_avg:97.22ms
step:862/1770 train_time:82838ms step_avg:97.23ms
step:863/1770 train_time:82938ms step_avg:97.23ms
step:864/1770 train_time:83038ms step_avg:97.23ms
step:865/1770 train_time:83137ms step_avg:97.24ms
step:866/1770 train_time:83238ms step_avg:97.24ms
step:867/1770 train_time:83338ms step_avg:97.24ms
step:868/1770 train_time:83438ms step_avg:97.25ms
step:869/1770 train_time:83538ms step_avg:97.25ms
step:870/1770 train_time:83638ms step_avg:97.25ms
step:871/1770 train_time:83738ms step_avg:97.26ms
step:872/1770 train_time:83838ms step_avg:97.26ms
step:873/1770 train_time:83938ms step_avg:97.26ms
step:874/1770 train_time:84038ms step_avg:97.27ms
step:875/1770 train_time:84138ms step_avg:97.27ms
step:875/1770 val_loss:3.5541 train_time:84236ms step_avg:97.38ms
step:876/1770 train_time:84258ms step_avg:97.30ms
step:877/1770 train_time:84345ms step_avg:97.28ms
step:878/1770 train_time:84447ms step_avg:97.29ms
step:879/1770 train_time:84546ms step_avg:97.29ms
step:880/1770 train_time:84646ms step_avg:97.29ms
step:881/1770 train_time:84746ms step_avg:97.30ms
step:882/1770 train_time:84846ms step_avg:97.30ms
step:883/1770 train_time:84946ms step_avg:97.30ms
step:884/1770 train_time:85045ms step_avg:97.31ms
step:885/1770 train_time:85144ms step_avg:97.31ms
step:886/1770 train_time:85244ms step_avg:97.31ms
step:887/1770 train_time:85345ms step_avg:97.31ms
step:888/1770 train_time:85444ms step_avg:97.32ms
step:889/1770 train_time:85544ms step_avg:97.32ms
step:890/1770 train_time:85644ms step_avg:97.32ms
step:891/1770 train_time:85744ms step_avg:97.33ms
step:892/1770 train_time:85844ms step_avg:97.33ms
step:893/1770 train_time:85944ms step_avg:97.33ms
step:894/1770 train_time:86044ms step_avg:97.34ms
step:895/1770 train_time:86144ms step_avg:97.34ms
step:896/1770 train_time:86244ms step_avg:97.34ms
step:897/1770 train_time:86344ms step_avg:97.34ms
step:898/1770 train_time:86444ms step_avg:97.35ms
step:899/1770 train_time:86544ms step_avg:97.35ms
step:900/1770 train_time:86644ms step_avg:97.35ms
step:901/1770 train_time:86744ms step_avg:97.36ms
step:902/1770 train_time:86845ms step_avg:97.36ms
step:903/1770 train_time:86945ms step_avg:97.36ms
step:904/1770 train_time:87044ms step_avg:97.37ms
step:905/1770 train_time:87144ms step_avg:97.37ms
step:906/1770 train_time:87244ms step_avg:97.37ms
step:907/1770 train_time:87344ms step_avg:97.37ms
step:908/1770 train_time:87444ms step_avg:97.38ms
step:909/1770 train_time:87544ms step_avg:97.38ms
step:910/1770 train_time:87645ms step_avg:97.38ms
step:911/1770 train_time:87745ms step_avg:97.39ms
step:912/1770 train_time:87845ms step_avg:97.39ms
step:913/1770 train_time:87945ms step_avg:97.39ms
step:914/1770 train_time:88045ms step_avg:97.39ms
step:915/1770 train_time:88145ms step_avg:97.40ms
step:916/1770 train_time:88245ms step_avg:97.40ms
step:917/1770 train_time:88345ms step_avg:97.40ms
step:918/1770 train_time:88445ms step_avg:97.41ms
step:919/1770 train_time:88545ms step_avg:97.41ms
step:920/1770 train_time:88647ms step_avg:97.41ms
step:921/1770 train_time:88748ms step_avg:97.42ms
step:922/1770 train_time:88849ms step_avg:97.42ms
step:923/1770 train_time:88950ms step_avg:97.43ms
step:924/1770 train_time:89051ms step_avg:97.43ms
step:925/1770 train_time:89152ms step_avg:97.43ms
step:926/1770 train_time:89253ms step_avg:97.44ms
step:927/1770 train_time:89354ms step_avg:97.44ms
step:928/1770 train_time:89455ms step_avg:97.45ms
step:929/1770 train_time:89556ms step_avg:97.45ms
step:930/1770 train_time:89658ms step_avg:97.45ms
step:931/1770 train_time:89760ms step_avg:97.46ms
step:932/1770 train_time:89863ms step_avg:97.47ms
step:933/1770 train_time:89964ms step_avg:97.47ms
step:934/1770 train_time:90066ms step_avg:97.47ms
step:935/1770 train_time:90167ms step_avg:97.48ms
step:936/1770 train_time:90268ms step_avg:97.48ms
step:937/1770 train_time:90368ms step_avg:97.48ms
step:938/1770 train_time:90469ms step_avg:97.49ms
step:939/1770 train_time:90570ms step_avg:97.49ms
step:940/1770 train_time:90671ms step_avg:97.50ms
step:941/1770 train_time:90773ms step_avg:97.50ms
step:942/1770 train_time:90874ms step_avg:97.50ms
step:943/1770 train_time:90976ms step_avg:97.51ms
step:944/1770 train_time:91076ms step_avg:97.51ms
step:945/1770 train_time:91177ms step_avg:97.52ms
step:946/1770 train_time:91278ms step_avg:97.52ms
step:947/1770 train_time:91380ms step_avg:97.52ms
step:948/1770 train_time:91482ms step_avg:97.53ms
step:949/1770 train_time:91585ms step_avg:97.53ms
step:950/1770 train_time:91687ms step_avg:97.54ms
step:951/1770 train_time:91789ms step_avg:97.54ms
step:952/1770 train_time:91890ms step_avg:97.55ms
step:953/1770 train_time:91991ms step_avg:97.55ms
step:954/1770 train_time:92092ms step_avg:97.55ms
step:955/1770 train_time:92193ms step_avg:97.56ms
step:956/1770 train_time:92293ms step_avg:97.56ms
step:957/1770 train_time:92395ms step_avg:97.57ms
step:958/1770 train_time:92496ms step_avg:97.57ms
step:959/1770 train_time:92597ms step_avg:97.57ms
step:960/1770 train_time:92698ms step_avg:97.58ms
step:961/1770 train_time:92800ms step_avg:97.58ms
step:962/1770 train_time:92902ms step_avg:97.59ms
step:963/1770 train_time:93003ms step_avg:97.59ms
step:964/1770 train_time:93105ms step_avg:97.59ms
step:965/1770 train_time:93206ms step_avg:97.60ms
step:966/1770 train_time:93307ms step_avg:97.60ms
step:967/1770 train_time:93409ms step_avg:97.61ms
step:968/1770 train_time:93511ms step_avg:97.61ms
step:969/1770 train_time:93613ms step_avg:97.62ms
step:970/1770 train_time:93714ms step_avg:97.62ms
step:971/1770 train_time:93814ms step_avg:97.62ms
step:972/1770 train_time:93915ms step_avg:97.62ms
step:973/1770 train_time:94015ms step_avg:97.63ms
step:974/1770 train_time:94117ms step_avg:97.63ms
step:975/1770 train_time:94219ms step_avg:97.64ms
step:976/1770 train_time:94321ms step_avg:97.64ms
step:977/1770 train_time:94424ms step_avg:97.65ms
step:978/1770 train_time:94526ms step_avg:97.65ms
step:979/1770 train_time:94627ms step_avg:97.65ms
step:980/1770 train_time:94729ms step_avg:97.66ms
step:981/1770 train_time:94830ms step_avg:97.66ms
step:982/1770 train_time:94931ms step_avg:97.67ms
step:983/1770 train_time:95032ms step_avg:97.67ms
step:984/1770 train_time:95133ms step_avg:97.67ms
step:985/1770 train_time:95234ms step_avg:97.68ms
step:986/1770 train_time:95335ms step_avg:97.68ms
step:987/1770 train_time:95436ms step_avg:97.68ms
step:988/1770 train_time:95539ms step_avg:97.69ms
step:989/1770 train_time:95642ms step_avg:97.69ms
step:990/1770 train_time:95744ms step_avg:97.70ms
step:991/1770 train_time:95846ms step_avg:97.70ms
step:992/1770 train_time:95947ms step_avg:97.71ms
step:993/1770 train_time:96049ms step_avg:97.71ms
step:994/1770 train_time:96151ms step_avg:97.71ms
step:995/1770 train_time:96252ms step_avg:97.72ms
step:996/1770 train_time:96352ms step_avg:97.72ms
step:997/1770 train_time:96453ms step_avg:97.72ms
step:998/1770 train_time:96554ms step_avg:97.73ms
step:999/1770 train_time:96654ms step_avg:97.73ms
step:1000/1770 train_time:96755ms step_avg:97.73ms
step:1000/1770 val_loss:3.5150 train_time:96855ms step_avg:97.83ms
step:1001/1770 train_time:96877ms step_avg:97.76ms
step:1002/1770 train_time:96964ms step_avg:97.75ms
step:1003/1770 train_time:97068ms step_avg:97.75ms
step:1004/1770 train_time:97169ms step_avg:97.76ms
step:1005/1770 train_time:97270ms step_avg:97.76ms
step:1006/1770 train_time:97370ms step_avg:97.76ms
step:1007/1770 train_time:97471ms step_avg:97.76ms
step:1008/1770 train_time:97572ms step_avg:97.77ms
step:1009/1770 train_time:97673ms step_avg:97.77ms
step:1010/1770 train_time:97773ms step_avg:97.77ms
step:1011/1770 train_time:97875ms step_avg:97.78ms
step:1012/1770 train_time:97977ms step_avg:97.78ms
step:1013/1770 train_time:98077ms step_avg:97.78ms
step:1014/1770 train_time:98179ms step_avg:97.79ms
step:1015/1770 train_time:98281ms step_avg:97.79ms
step:1016/1770 train_time:98384ms step_avg:97.80ms
step:1017/1770 train_time:98486ms step_avg:97.80ms
step:1018/1770 train_time:98588ms step_avg:97.81ms
step:1019/1770 train_time:98689ms step_avg:97.81ms
step:1020/1770 train_time:98790ms step_avg:97.81ms
step:1021/1770 train_time:98891ms step_avg:97.82ms
step:1022/1770 train_time:98992ms step_avg:97.82ms
step:1023/1770 train_time:99093ms step_avg:97.82ms
step:1024/1770 train_time:99194ms step_avg:97.82ms
step:1025/1770 train_time:99295ms step_avg:97.83ms
step:1026/1770 train_time:99396ms step_avg:97.83ms
step:1027/1770 train_time:99497ms step_avg:97.83ms
step:1028/1770 train_time:99599ms step_avg:97.84ms
step:1029/1770 train_time:99702ms step_avg:97.84ms
step:1030/1770 train_time:99804ms step_avg:97.85ms
step:1031/1770 train_time:99905ms step_avg:97.85ms
step:1032/1770 train_time:100007ms step_avg:97.85ms
step:1033/1770 train_time:100108ms step_avg:97.86ms
step:1034/1770 train_time:100209ms step_avg:97.86ms
step:1035/1770 train_time:100310ms step_avg:97.86ms
step:1036/1770 train_time:100411ms step_avg:97.87ms
step:1037/1770 train_time:100512ms step_avg:97.87ms
step:1038/1770 train_time:100613ms step_avg:97.87ms
step:1039/1770 train_time:100714ms step_avg:97.88ms
step:1040/1770 train_time:100814ms step_avg:97.88ms
step:1041/1770 train_time:100915ms step_avg:97.88ms
step:1042/1770 train_time:101017ms step_avg:97.88ms
step:1043/1770 train_time:101118ms step_avg:97.89ms
step:1044/1770 train_time:101220ms step_avg:97.89ms
step:1045/1770 train_time:101322ms step_avg:97.90ms
step:1046/1770 train_time:101423ms step_avg:97.90ms
step:1047/1770 train_time:101524ms step_avg:97.90ms
step:1048/1770 train_time:101626ms step_avg:97.91ms
step:1049/1770 train_time:101727ms step_avg:97.91ms
step:1050/1770 train_time:101829ms step_avg:97.91ms
step:1051/1770 train_time:101930ms step_avg:97.92ms
step:1052/1770 train_time:102031ms step_avg:97.92ms
step:1053/1770 train_time:102132ms step_avg:97.92ms
step:1054/1770 train_time:102233ms step_avg:97.92ms
step:1055/1770 train_time:102335ms step_avg:97.93ms
step:1056/1770 train_time:102436ms step_avg:97.93ms
step:1057/1770 train_time:102536ms step_avg:97.93ms
step:1058/1770 train_time:102638ms step_avg:97.94ms
step:1059/1770 train_time:102740ms step_avg:97.94ms
step:1060/1770 train_time:102842ms step_avg:97.94ms
step:1061/1770 train_time:102944ms step_avg:97.95ms
step:1062/1770 train_time:103047ms step_avg:97.95ms
step:1063/1770 train_time:103149ms step_avg:97.96ms
step:1064/1770 train_time:103251ms step_avg:97.96ms
step:1065/1770 train_time:103352ms step_avg:97.96ms
step:1066/1770 train_time:103454ms step_avg:97.97ms
step:1067/1770 train_time:103555ms step_avg:97.97ms
step:1068/1770 train_time:103656ms step_avg:97.97ms
step:1069/1770 train_time:103758ms step_avg:97.98ms
step:1070/1770 train_time:103859ms step_avg:97.98ms
step:1071/1770 train_time:103961ms step_avg:97.98ms
step:1072/1770 train_time:104063ms step_avg:97.99ms
step:1073/1770 train_time:104164ms step_avg:97.99ms
step:1074/1770 train_time:104266ms step_avg:97.99ms
step:1075/1770 train_time:104367ms step_avg:98.00ms
step:1076/1770 train_time:104469ms step_avg:98.00ms
step:1077/1770 train_time:104570ms step_avg:98.00ms
step:1078/1770 train_time:104671ms step_avg:98.01ms
step:1079/1770 train_time:104772ms step_avg:98.01ms
step:1080/1770 train_time:104873ms step_avg:98.01ms
step:1081/1770 train_time:104974ms step_avg:98.02ms
step:1082/1770 train_time:105075ms step_avg:98.02ms
step:1083/1770 train_time:105176ms step_avg:98.02ms
step:1084/1770 train_time:105278ms step_avg:98.02ms
step:1085/1770 train_time:105379ms step_avg:98.03ms
step:1086/1770 train_time:105482ms step_avg:98.03ms
step:1087/1770 train_time:105584ms step_avg:98.04ms
step:1088/1770 train_time:105686ms step_avg:98.04ms
step:1089/1770 train_time:105787ms step_avg:98.04ms
step:1090/1770 train_time:105890ms step_avg:98.05ms
step:1091/1770 train_time:105990ms step_avg:98.05ms
step:1092/1770 train_time:106091ms step_avg:98.05ms
step:1093/1770 train_time:106193ms step_avg:98.05ms
step:1094/1770 train_time:106294ms step_avg:98.06ms
step:1095/1770 train_time:106395ms step_avg:98.06ms
step:1096/1770 train_time:106496ms step_avg:98.06ms
step:1097/1770 train_time:106597ms step_avg:98.07ms
step:1098/1770 train_time:106698ms step_avg:98.07ms
step:1099/1770 train_time:106800ms step_avg:98.07ms
step:1100/1770 train_time:106901ms step_avg:98.07ms
step:1101/1770 train_time:107004ms step_avg:98.08ms
step:1102/1770 train_time:107106ms step_avg:98.08ms
step:1103/1770 train_time:107207ms step_avg:98.09ms
step:1104/1770 train_time:107309ms step_avg:98.09ms
step:1105/1770 train_time:107410ms step_avg:98.09ms
step:1106/1770 train_time:107512ms step_avg:98.10ms
step:1107/1770 train_time:107613ms step_avg:98.10ms
step:1108/1770 train_time:107716ms step_avg:98.10ms
step:1109/1770 train_time:107817ms step_avg:98.10ms
step:1110/1770 train_time:107918ms step_avg:98.11ms
step:1111/1770 train_time:108020ms step_avg:98.11ms
step:1112/1770 train_time:108121ms step_avg:98.11ms
step:1113/1770 train_time:108224ms step_avg:98.12ms
step:1114/1770 train_time:108326ms step_avg:98.12ms
step:1115/1770 train_time:108428ms step_avg:98.12ms
step:1116/1770 train_time:108529ms step_avg:98.13ms
step:1117/1770 train_time:108630ms step_avg:98.13ms
step:1118/1770 train_time:108732ms step_avg:98.13ms
step:1119/1770 train_time:108833ms step_avg:98.14ms
step:1120/1770 train_time:108934ms step_avg:98.14ms
step:1121/1770 train_time:109035ms step_avg:98.14ms
step:1122/1770 train_time:109136ms step_avg:98.14ms
step:1123/1770 train_time:109237ms step_avg:98.15ms
step:1124/1770 train_time:109338ms step_avg:98.15ms
step:1125/1770 train_time:109440ms step_avg:98.15ms
step:1125/1770 val_loss:3.4756 train_time:109541ms step_avg:98.24ms
step:1126/1770 train_time:109564ms step_avg:98.18ms
step:1127/1770 train_time:109652ms step_avg:98.17ms
step:1128/1770 train_time:109755ms step_avg:98.17ms
step:1129/1770 train_time:109856ms step_avg:98.17ms
step:1130/1770 train_time:109958ms step_avg:98.18ms
step:1131/1770 train_time:110060ms step_avg:98.18ms
step:1132/1770 train_time:110161ms step_avg:98.18ms
step:1133/1770 train_time:110262ms step_avg:98.19ms
step:1134/1770 train_time:110364ms step_avg:98.19ms
step:1135/1770 train_time:110465ms step_avg:98.19ms
step:1136/1770 train_time:110567ms step_avg:98.19ms
step:1137/1770 train_time:110670ms step_avg:98.20ms
step:1138/1770 train_time:110772ms step_avg:98.20ms
step:1139/1770 train_time:110874ms step_avg:98.21ms
step:1140/1770 train_time:110975ms step_avg:98.21ms
step:1141/1770 train_time:111076ms step_avg:98.21ms
step:1142/1770 train_time:111177ms step_avg:98.21ms
step:1143/1770 train_time:111278ms step_avg:98.22ms
step:1144/1770 train_time:111379ms step_avg:98.22ms
step:1145/1770 train_time:111480ms step_avg:98.22ms
step:1146/1770 train_time:111582ms step_avg:98.22ms
step:1147/1770 train_time:111683ms step_avg:98.23ms
step:1148/1770 train_time:111784ms step_avg:98.23ms
step:1149/1770 train_time:111885ms step_avg:98.23ms
step:1150/1770 train_time:111986ms step_avg:98.23ms
step:1151/1770 train_time:112088ms step_avg:98.24ms
step:1152/1770 train_time:112190ms step_avg:98.24ms
step:1153/1770 train_time:112292ms step_avg:98.24ms
step:1154/1770 train_time:112394ms step_avg:98.25ms
step:1155/1770 train_time:112496ms step_avg:98.25ms
step:1156/1770 train_time:112598ms step_avg:98.25ms
step:1157/1770 train_time:112701ms step_avg:98.26ms
step:1158/1770 train_time:112803ms step_avg:98.26ms
step:1159/1770 train_time:112904ms step_avg:98.26ms
step:1160/1770 train_time:113005ms step_avg:98.27ms
step:1161/1770 train_time:113107ms step_avg:98.27ms
step:1162/1770 train_time:113209ms step_avg:98.27ms
step:1163/1770 train_time:113311ms step_avg:98.28ms
step:1164/1770 train_time:113413ms step_avg:98.28ms
step:1165/1770 train_time:113515ms step_avg:98.28ms
step:1166/1770 train_time:113618ms step_avg:98.29ms
step:1167/1770 train_time:113718ms step_avg:98.29ms
step:1168/1770 train_time:113819ms step_avg:98.29ms
step:1169/1770 train_time:113920ms step_avg:98.29ms
step:1170/1770 train_time:114021ms step_avg:98.29ms
step:1171/1770 train_time:114123ms step_avg:98.30ms
step:1172/1770 train_time:114224ms step_avg:98.30ms
step:1173/1770 train_time:114325ms step_avg:98.30ms
step:1174/1770 train_time:114428ms step_avg:98.31ms
step:1175/1770 train_time:114530ms step_avg:98.31ms
step:1176/1770 train_time:114633ms step_avg:98.31ms
step:1177/1770 train_time:114734ms step_avg:98.32ms
step:1178/1770 train_time:114836ms step_avg:98.32ms
step:1179/1770 train_time:114937ms step_avg:98.32ms
step:1180/1770 train_time:115039ms step_avg:98.32ms
step:1181/1770 train_time:115140ms step_avg:98.33ms
step:1182/1770 train_time:115242ms step_avg:98.33ms
step:1183/1770 train_time:115344ms step_avg:98.33ms
step:1184/1770 train_time:115447ms step_avg:98.34ms
step:1185/1770 train_time:115550ms step_avg:98.34ms
step:1186/1770 train_time:115653ms step_avg:98.34ms
step:1187/1770 train_time:115758ms step_avg:98.35ms
step:1188/1770 train_time:115860ms step_avg:98.35ms
step:1189/1770 train_time:115963ms step_avg:98.36ms
step:1190/1770 train_time:116065ms step_avg:98.36ms
step:1191/1770 train_time:116168ms step_avg:98.36ms
step:1192/1770 train_time:116272ms step_avg:98.37ms
step:1193/1770 train_time:116375ms step_avg:98.37ms
step:1194/1770 train_time:116477ms step_avg:98.38ms
step:1195/1770 train_time:116580ms step_avg:98.38ms
step:1196/1770 train_time:116684ms step_avg:98.38ms
step:1197/1770 train_time:116786ms step_avg:98.39ms
step:1198/1770 train_time:116889ms step_avg:98.39ms
step:1199/1770 train_time:116992ms step_avg:98.40ms
step:1200/1770 train_time:117096ms step_avg:98.40ms
step:1201/1770 train_time:117199ms step_avg:98.40ms
step:1202/1770 train_time:117301ms step_avg:98.41ms
step:1203/1770 train_time:117404ms step_avg:98.41ms
step:1204/1770 train_time:117507ms step_avg:98.41ms
step:1205/1770 train_time:117610ms step_avg:98.42ms
step:1206/1770 train_time:117713ms step_avg:98.42ms
step:1207/1770 train_time:117816ms step_avg:98.43ms
step:1208/1770 train_time:117918ms step_avg:98.43ms
step:1209/1770 train_time:118021ms step_avg:98.43ms
step:1210/1770 train_time:118122ms step_avg:98.44ms
step:1211/1770 train_time:118226ms step_avg:98.44ms
step:1212/1770 train_time:118330ms step_avg:98.44ms
step:1213/1770 train_time:118432ms step_avg:98.45ms
step:1214/1770 train_time:118535ms step_avg:98.45ms
step:1215/1770 train_time:118638ms step_avg:98.46ms
step:1216/1770 train_time:118743ms step_avg:98.46ms
step:1217/1770 train_time:118846ms step_avg:98.46ms
step:1218/1770 train_time:118949ms step_avg:98.47ms
step:1219/1770 train_time:119052ms step_avg:98.47ms
step:1220/1770 train_time:119155ms step_avg:98.47ms
step:1221/1770 train_time:119257ms step_avg:98.48ms
step:1222/1770 train_time:119360ms step_avg:98.48ms
step:1223/1770 train_time:119462ms step_avg:98.49ms
step:1224/1770 train_time:119566ms step_avg:98.49ms
step:1225/1770 train_time:119669ms step_avg:98.49ms
step:1226/1770 train_time:119772ms step_avg:98.50ms
step:1227/1770 train_time:119878ms step_avg:98.50ms
step:1228/1770 train_time:119982ms step_avg:98.51ms
step:1229/1770 train_time:120084ms step_avg:98.51ms
step:1230/1770 train_time:120187ms step_avg:98.51ms
step:1231/1770 train_time:120291ms step_avg:98.52ms
step:1232/1770 train_time:120394ms step_avg:98.52ms
step:1233/1770 train_time:120497ms step_avg:98.53ms
step:1234/1770 train_time:120599ms step_avg:98.53ms
step:1235/1770 train_time:120702ms step_avg:98.53ms
step:1236/1770 train_time:120805ms step_avg:98.54ms
step:1237/1770 train_time:120907ms step_avg:98.54ms
step:1238/1770 train_time:121011ms step_avg:98.54ms
step:1239/1770 train_time:121114ms step_avg:98.55ms
step:1240/1770 train_time:121216ms step_avg:98.55ms
step:1241/1770 train_time:121319ms step_avg:98.55ms
step:1242/1770 train_time:121421ms step_avg:98.56ms
step:1243/1770 train_time:121525ms step_avg:98.56ms
step:1244/1770 train_time:121627ms step_avg:98.56ms
step:1245/1770 train_time:121729ms step_avg:98.57ms
step:1246/1770 train_time:121832ms step_avg:98.57ms
step:1247/1770 train_time:121936ms step_avg:98.57ms
step:1248/1770 train_time:122039ms step_avg:98.58ms
step:1249/1770 train_time:122142ms step_avg:98.58ms
step:1250/1770 train_time:122244ms step_avg:98.58ms
step:1250/1770 val_loss:3.4284 train_time:122347ms step_avg:98.67ms
step:1251/1770 train_time:122369ms step_avg:98.60ms
step:1252/1770 train_time:122459ms step_avg:98.60ms
step:1253/1770 train_time:122562ms step_avg:98.60ms
step:1254/1770 train_time:122666ms step_avg:98.61ms
step:1255/1770 train_time:122771ms step_avg:98.61ms
step:1256/1770 train_time:122874ms step_avg:98.61ms
step:1257/1770 train_time:122977ms step_avg:98.62ms
step:1258/1770 train_time:123081ms step_avg:98.62ms
step:1259/1770 train_time:123183ms step_avg:98.62ms
step:1260/1770 train_time:123285ms step_avg:98.63ms
step:1261/1770 train_time:123388ms step_avg:98.63ms
step:1262/1770 train_time:123492ms step_avg:98.64ms
step:1263/1770 train_time:123595ms step_avg:98.64ms
step:1264/1770 train_time:123699ms step_avg:98.64ms
step:1265/1770 train_time:123800ms step_avg:98.65ms
step:1266/1770 train_time:123903ms step_avg:98.65ms
step:1267/1770 train_time:124006ms step_avg:98.65ms
step:1268/1770 train_time:124109ms step_avg:98.66ms
step:1269/1770 train_time:124212ms step_avg:98.66ms
step:1270/1770 train_time:124316ms step_avg:98.66ms
step:1271/1770 train_time:124418ms step_avg:98.67ms
step:1272/1770 train_time:124521ms step_avg:98.67ms
step:1273/1770 train_time:124624ms step_avg:98.67ms
step:1274/1770 train_time:124727ms step_avg:98.68ms
step:1275/1770 train_time:124829ms step_avg:98.68ms
step:1276/1770 train_time:124933ms step_avg:98.68ms
step:1277/1770 train_time:125035ms step_avg:98.69ms
step:1278/1770 train_time:125140ms step_avg:98.69ms
step:1279/1770 train_time:125242ms step_avg:98.69ms
step:1280/1770 train_time:125346ms step_avg:98.70ms
step:1281/1770 train_time:125448ms step_avg:98.70ms
step:1282/1770 train_time:125552ms step_avg:98.70ms
step:1283/1770 train_time:125655ms step_avg:98.71ms
step:1284/1770 train_time:125758ms step_avg:98.71ms
step:1285/1770 train_time:125861ms step_avg:98.71ms
step:1286/1770 train_time:125965ms step_avg:98.72ms
step:1287/1770 train_time:126070ms step_avg:98.72ms
step:1288/1770 train_time:126174ms step_avg:98.73ms
step:1289/1770 train_time:126277ms step_avg:98.73ms
step:1290/1770 train_time:126380ms step_avg:98.73ms
step:1291/1770 train_time:126482ms step_avg:98.74ms
step:1292/1770 train_time:126585ms step_avg:98.74ms
step:1293/1770 train_time:126687ms step_avg:98.74ms
step:1294/1770 train_time:126789ms step_avg:98.75ms
step:1295/1770 train_time:126892ms step_avg:98.75ms
step:1296/1770 train_time:126995ms step_avg:98.75ms
step:1297/1770 train_time:127098ms step_avg:98.76ms
step:1298/1770 train_time:127200ms step_avg:98.76ms
step:1299/1770 train_time:127302ms step_avg:98.76ms
step:1300/1770 train_time:127405ms step_avg:98.76ms
step:1301/1770 train_time:127508ms step_avg:98.77ms
step:1302/1770 train_time:127611ms step_avg:98.77ms
step:1303/1770 train_time:127714ms step_avg:98.77ms
step:1304/1770 train_time:127816ms step_avg:98.78ms
step:1305/1770 train_time:127919ms step_avg:98.78ms
step:1306/1770 train_time:128021ms step_avg:98.78ms
step:1307/1770 train_time:128123ms step_avg:98.78ms
step:1308/1770 train_time:128225ms step_avg:98.79ms
step:1309/1770 train_time:128328ms step_avg:98.79ms
step:1310/1770 train_time:128430ms step_avg:98.79ms
step:1311/1770 train_time:128532ms step_avg:98.79ms
step:1312/1770 train_time:128635ms step_avg:98.80ms
step:1313/1770 train_time:128738ms step_avg:98.80ms
step:1314/1770 train_time:128841ms step_avg:98.80ms
step:1315/1770 train_time:128944ms step_avg:98.81ms
step:1316/1770 train_time:129047ms step_avg:98.81ms
step:1317/1770 train_time:129151ms step_avg:98.81ms
step:1318/1770 train_time:129258ms step_avg:98.82ms
step:1319/1770 train_time:129360ms step_avg:98.82ms
step:1320/1770 train_time:129462ms step_avg:98.83ms
step:1321/1770 train_time:129565ms step_avg:98.83ms
step:1322/1770 train_time:129668ms step_avg:98.83ms
step:1323/1770 train_time:129772ms step_avg:98.84ms
step:1324/1770 train_time:129876ms step_avg:98.84ms
step:1325/1770 train_time:129981ms step_avg:98.84ms
step:1326/1770 train_time:130083ms step_avg:98.85ms
step:1327/1770 train_time:130188ms step_avg:98.85ms
step:1328/1770 train_time:130291ms step_avg:98.85ms
step:1329/1770 train_time:130394ms step_avg:98.86ms
step:1330/1770 train_time:130497ms step_avg:98.86ms
step:1331/1770 train_time:130599ms step_avg:98.86ms
step:1332/1770 train_time:130701ms step_avg:98.87ms
step:1333/1770 train_time:130803ms step_avg:98.87ms
step:1334/1770 train_time:130905ms step_avg:98.87ms
step:1335/1770 train_time:131008ms step_avg:98.87ms
step:1336/1770 train_time:131111ms step_avg:98.88ms
step:1337/1770 train_time:131213ms step_avg:98.88ms
step:1338/1770 train_time:131317ms step_avg:98.88ms
step:1339/1770 train_time:131420ms step_avg:98.89ms
step:1340/1770 train_time:131525ms step_avg:98.89ms
step:1341/1770 train_time:131627ms step_avg:98.89ms
step:1342/1770 train_time:131731ms step_avg:98.90ms
step:1343/1770 train_time:131834ms step_avg:98.90ms
step:1344/1770 train_time:131939ms step_avg:98.91ms
step:1345/1770 train_time:132042ms step_avg:98.91ms
step:1346/1770 train_time:132144ms step_avg:98.91ms
step:1347/1770 train_time:132247ms step_avg:98.91ms
step:1348/1770 train_time:132352ms step_avg:98.92ms
step:1349/1770 train_time:132456ms step_avg:98.92ms
step:1350/1770 train_time:132559ms step_avg:98.92ms
step:1351/1770 train_time:132662ms step_avg:98.93ms
step:1352/1770 train_time:132764ms step_avg:98.93ms
step:1353/1770 train_time:132867ms step_avg:98.93ms
step:1354/1770 train_time:132970ms step_avg:98.94ms
step:1355/1770 train_time:133073ms step_avg:98.94ms
step:1356/1770 train_time:133175ms step_avg:98.94ms
step:1357/1770 train_time:133278ms step_avg:98.94ms
step:1358/1770 train_time:133381ms step_avg:98.95ms
step:1359/1770 train_time:133484ms step_avg:98.95ms
step:1360/1770 train_time:133587ms step_avg:98.95ms
step:1361/1770 train_time:133691ms step_avg:98.96ms
step:1362/1770 train_time:133794ms step_avg:98.96ms
step:1363/1770 train_time:133898ms step_avg:98.96ms
step:1364/1770 train_time:134001ms step_avg:98.97ms
step:1365/1770 train_time:134103ms step_avg:98.97ms
step:1366/1770 train_time:134205ms step_avg:98.97ms
step:1367/1770 train_time:134308ms step_avg:98.97ms
step:1368/1770 train_time:134411ms step_avg:98.98ms
step:1369/1770 train_time:134515ms step_avg:98.98ms
step:1370/1770 train_time:134619ms step_avg:98.98ms
step:1371/1770 train_time:134721ms step_avg:98.99ms
step:1372/1770 train_time:134824ms step_avg:98.99ms
step:1373/1770 train_time:134926ms step_avg:98.99ms
step:1374/1770 train_time:135030ms step_avg:99.00ms
step:1375/1770 train_time:135133ms step_avg:99.00ms
step:1375/1770 val_loss:3.3866 train_time:135234ms step_avg:99.07ms
step:1376/1770 train_time:135256ms step_avg:99.02ms
step:1377/1770 train_time:135342ms step_avg:99.01ms
step:1378/1770 train_time:135445ms step_avg:99.01ms
step:1379/1770 train_time:135547ms step_avg:99.01ms
step:1380/1770 train_time:135649ms step_avg:99.01ms
step:1381/1770 train_time:135752ms step_avg:99.02ms
step:1382/1770 train_time:135854ms step_avg:99.02ms
step:1383/1770 train_time:135959ms step_avg:99.02ms
step:1384/1770 train_time:136062ms step_avg:99.03ms
step:1385/1770 train_time:136165ms step_avg:99.03ms
step:1386/1770 train_time:136268ms step_avg:99.03ms
step:1387/1770 train_time:136371ms step_avg:99.03ms
step:1388/1770 train_time:136473ms step_avg:99.04ms
step:1389/1770 train_time:136576ms step_avg:99.04ms
step:1390/1770 train_time:136678ms step_avg:99.04ms
step:1391/1770 train_time:136781ms step_avg:99.05ms
step:1392/1770 train_time:136884ms step_avg:99.05ms
step:1393/1770 train_time:136986ms step_avg:99.05ms
step:1394/1770 train_time:137089ms step_avg:99.05ms
step:1395/1770 train_time:137192ms step_avg:99.06ms
step:1396/1770 train_time:137296ms step_avg:99.06ms
step:1397/1770 train_time:137399ms step_avg:99.06ms
step:1398/1770 train_time:137502ms step_avg:99.06ms
step:1399/1770 train_time:137604ms step_avg:99.07ms
step:1400/1770 train_time:137707ms step_avg:99.07ms
step:1401/1770 train_time:137809ms step_avg:99.07ms
step:1402/1770 train_time:137912ms step_avg:99.08ms
step:1403/1770 train_time:138016ms step_avg:99.08ms
step:1404/1770 train_time:138119ms step_avg:99.08ms
step:1405/1770 train_time:138221ms step_avg:99.08ms
step:1406/1770 train_time:138323ms step_avg:99.09ms
step:1407/1770 train_time:138426ms step_avg:99.09ms
step:1408/1770 train_time:138529ms step_avg:99.09ms
step:1409/1770 train_time:138631ms step_avg:99.09ms
step:1410/1770 train_time:138734ms step_avg:99.10ms
step:1411/1770 train_time:138837ms step_avg:99.10ms
step:1412/1770 train_time:138940ms step_avg:99.10ms
step:1413/1770 train_time:139042ms step_avg:99.10ms
step:1414/1770 train_time:139145ms step_avg:99.11ms
step:1415/1770 train_time:139248ms step_avg:99.11ms
step:1416/1770 train_time:139352ms step_avg:99.11ms
step:1417/1770 train_time:139455ms step_avg:99.12ms
step:1418/1770 train_time:139558ms step_avg:99.12ms
step:1419/1770 train_time:139661ms step_avg:99.12ms
step:1420/1770 train_time:139763ms step_avg:99.12ms
step:1421/1770 train_time:139865ms step_avg:99.12ms
step:1422/1770 train_time:139968ms step_avg:99.13ms
step:1423/1770 train_time:140070ms step_avg:99.13ms
step:1424/1770 train_time:140174ms step_avg:99.13ms
step:1425/1770 train_time:140277ms step_avg:99.14ms
step:1426/1770 train_time:140381ms step_avg:99.14ms
step:1427/1770 train_time:140483ms step_avg:99.14ms
step:1428/1770 train_time:140587ms step_avg:99.14ms
step:1429/1770 train_time:140689ms step_avg:99.15ms
step:1430/1770 train_time:140792ms step_avg:99.15ms
step:1431/1770 train_time:140896ms step_avg:99.15ms
step:1432/1770 train_time:140998ms step_avg:99.15ms
step:1433/1770 train_time:141100ms step_avg:99.16ms
step:1434/1770 train_time:141202ms step_avg:99.16ms
step:1435/1770 train_time:141305ms step_avg:99.16ms
step:1436/1770 train_time:141410ms step_avg:99.17ms
step:1437/1770 train_time:141512ms step_avg:99.17ms
step:1438/1770 train_time:141615ms step_avg:99.17ms
step:1439/1770 train_time:141718ms step_avg:99.17ms
step:1440/1770 train_time:141820ms step_avg:99.18ms
step:1441/1770 train_time:141925ms step_avg:99.18ms
step:1442/1770 train_time:142028ms step_avg:99.18ms
step:1443/1770 train_time:142130ms step_avg:99.18ms
step:1444/1770 train_time:142234ms step_avg:99.19ms
step:1445/1770 train_time:142338ms step_avg:99.19ms
step:1446/1770 train_time:142441ms step_avg:99.19ms
step:1447/1770 train_time:142544ms step_avg:99.20ms
step:1448/1770 train_time:142648ms step_avg:99.20ms
step:1449/1770 train_time:142754ms step_avg:99.20ms
step:1450/1770 train_time:142858ms step_avg:99.21ms
step:1451/1770 train_time:142962ms step_avg:99.21ms
step:1452/1770 train_time:143065ms step_avg:99.21ms
step:1453/1770 train_time:143169ms step_avg:99.22ms
step:1454/1770 train_time:143273ms step_avg:99.22ms
step:1455/1770 train_time:143377ms step_avg:99.22ms
step:1456/1770 train_time:143482ms step_avg:99.23ms
step:1457/1770 train_time:143586ms step_avg:99.23ms
step:1458/1770 train_time:143690ms step_avg:99.23ms
step:1459/1770 train_time:143795ms step_avg:99.24ms
step:1460/1770 train_time:143899ms step_avg:99.24ms
step:1461/1770 train_time:144004ms step_avg:99.24ms
step:1462/1770 train_time:144107ms step_avg:99.25ms
step:1463/1770 train_time:144211ms step_avg:99.25ms
step:1464/1770 train_time:144317ms step_avg:99.26ms
step:1465/1770 train_time:144421ms step_avg:99.26ms
step:1466/1770 train_time:144526ms step_avg:99.26ms
step:1467/1770 train_time:144630ms step_avg:99.27ms
step:1468/1770 train_time:144735ms step_avg:99.27ms
step:1469/1770 train_time:144838ms step_avg:99.27ms
step:1470/1770 train_time:144942ms step_avg:99.28ms
step:1471/1770 train_time:145045ms step_avg:99.28ms
step:1472/1770 train_time:145149ms step_avg:99.28ms
step:1473/1770 train_time:145253ms step_avg:99.28ms
step:1474/1770 train_time:145359ms step_avg:99.29ms
step:1475/1770 train_time:145462ms step_avg:99.29ms
step:1476/1770 train_time:145565ms step_avg:99.29ms
step:1477/1770 train_time:145671ms step_avg:99.30ms
step:1478/1770 train_time:145776ms step_avg:99.30ms
step:1479/1770 train_time:145879ms step_avg:99.31ms
step:1480/1770 train_time:145982ms step_avg:99.31ms
step:1481/1770 train_time:146090ms step_avg:99.31ms
step:1482/1770 train_time:146194ms step_avg:99.32ms
step:1483/1770 train_time:146298ms step_avg:99.32ms
step:1484/1770 train_time:146401ms step_avg:99.32ms
step:1485/1770 train_time:146505ms step_avg:99.33ms
step:1486/1770 train_time:146608ms step_avg:99.33ms
step:1487/1770 train_time:146712ms step_avg:99.33ms
step:1488/1770 train_time:146817ms step_avg:99.33ms
step:1489/1770 train_time:146922ms step_avg:99.34ms
step:1490/1770 train_time:147026ms step_avg:99.34ms
step:1491/1770 train_time:147129ms step_avg:99.34ms
step:1492/1770 train_time:147233ms step_avg:99.35ms
step:1493/1770 train_time:147340ms step_avg:99.35ms
step:1494/1770 train_time:147448ms step_avg:99.36ms
step:1495/1770 train_time:147551ms step_avg:99.36ms
step:1496/1770 train_time:147654ms step_avg:99.36ms
step:1497/1770 train_time:147760ms step_avg:99.37ms
step:1498/1770 train_time:147863ms step_avg:99.37ms
step:1499/1770 train_time:147966ms step_avg:99.37ms
step:1500/1770 train_time:148069ms step_avg:99.38ms
step:1500/1770 val_loss:3.3505 train_time:148171ms step_avg:99.44ms
step:1501/1770 train_time:148193ms step_avg:99.39ms
step:1502/1770 train_time:148284ms step_avg:99.39ms
step:1503/1770 train_time:148388ms step_avg:99.39ms
step:1504/1770 train_time:148493ms step_avg:99.39ms
step:1505/1770 train_time:148599ms step_avg:99.40ms
step:1506/1770 train_time:148703ms step_avg:99.40ms
step:1507/1770 train_time:148807ms step_avg:99.40ms
step:1508/1770 train_time:148913ms step_avg:99.41ms
step:1509/1770 train_time:149018ms step_avg:99.41ms
step:1510/1770 train_time:149121ms step_avg:99.41ms
step:1511/1770 train_time:149227ms step_avg:99.42ms
step:1512/1770 train_time:149331ms step_avg:99.42ms
step:1513/1770 train_time:149436ms step_avg:99.43ms
step:1514/1770 train_time:149540ms step_avg:99.43ms
step:1515/1770 train_time:149644ms step_avg:99.43ms
step:1516/1770 train_time:149748ms step_avg:99.43ms
step:1517/1770 train_time:149851ms step_avg:99.44ms
step:1518/1770 train_time:149959ms step_avg:99.44ms
step:1519/1770 train_time:150061ms step_avg:99.44ms
step:1520/1770 train_time:150166ms step_avg:99.45ms
step:1521/1770 train_time:150269ms step_avg:99.45ms
step:1522/1770 train_time:150374ms step_avg:99.45ms
step:1523/1770 train_time:150479ms step_avg:99.46ms
step:1524/1770 train_time:150583ms step_avg:99.46ms
step:1525/1770 train_time:150686ms step_avg:99.46ms
step:1526/1770 train_time:150790ms step_avg:99.47ms
step:1527/1770 train_time:150895ms step_avg:99.47ms
step:1528/1770 train_time:151001ms step_avg:99.47ms
step:1529/1770 train_time:151104ms step_avg:99.48ms
step:1530/1770 train_time:151209ms step_avg:99.48ms
step:1531/1770 train_time:151312ms step_avg:99.48ms
step:1532/1770 train_time:151418ms step_avg:99.49ms
step:1533/1770 train_time:151522ms step_avg:99.49ms
step:1534/1770 train_time:151627ms step_avg:99.49ms
step:1535/1770 train_time:151731ms step_avg:99.50ms
step:1536/1770 train_time:151835ms step_avg:99.50ms
step:1537/1770 train_time:151939ms step_avg:99.50ms
step:1538/1770 train_time:152044ms step_avg:99.51ms
step:1539/1770 train_time:152148ms step_avg:99.51ms
step:1540/1770 train_time:152255ms step_avg:99.51ms
step:1541/1770 train_time:152360ms step_avg:99.52ms
step:1542/1770 train_time:152465ms step_avg:99.52ms
step:1543/1770 train_time:152568ms step_avg:99.52ms
step:1544/1770 train_time:152675ms step_avg:99.53ms
step:1545/1770 train_time:152778ms step_avg:99.53ms
step:1546/1770 train_time:152882ms step_avg:99.53ms
step:1547/1770 train_time:152985ms step_avg:99.54ms
step:1548/1770 train_time:153089ms step_avg:99.54ms
step:1549/1770 train_time:153195ms step_avg:99.54ms
step:1550/1770 train_time:153299ms step_avg:99.54ms
step:1551/1770 train_time:153402ms step_avg:99.55ms
step:1552/1770 train_time:153507ms step_avg:99.55ms
step:1553/1770 train_time:153612ms step_avg:99.55ms
step:1554/1770 train_time:153717ms step_avg:99.56ms
step:1555/1770 train_time:153822ms step_avg:99.56ms
step:1556/1770 train_time:153925ms step_avg:99.56ms
step:1557/1770 train_time:154029ms step_avg:99.57ms
step:1558/1770 train_time:154133ms step_avg:99.57ms
step:1559/1770 train_time:154238ms step_avg:99.57ms
step:1560/1770 train_time:154341ms step_avg:99.58ms
step:1561/1770 train_time:154447ms step_avg:99.58ms
step:1562/1770 train_time:154551ms step_avg:99.58ms
step:1563/1770 train_time:154656ms step_avg:99.59ms
step:1564/1770 train_time:154759ms step_avg:99.59ms
step:1565/1770 train_time:154863ms step_avg:99.59ms
step:1566/1770 train_time:154966ms step_avg:99.59ms
step:1567/1770 train_time:155071ms step_avg:99.60ms
step:1568/1770 train_time:155175ms step_avg:99.60ms
step:1569/1770 train_time:155283ms step_avg:99.60ms
step:1570/1770 train_time:155386ms step_avg:99.61ms
step:1571/1770 train_time:155489ms step_avg:99.61ms
step:1572/1770 train_time:155595ms step_avg:99.61ms
step:1573/1770 train_time:155701ms step_avg:99.62ms
step:1574/1770 train_time:155805ms step_avg:99.62ms
step:1575/1770 train_time:155908ms step_avg:99.62ms
step:1576/1770 train_time:156012ms step_avg:99.62ms
step:1577/1770 train_time:156117ms step_avg:99.63ms
step:1578/1770 train_time:156223ms step_avg:99.63ms
step:1579/1770 train_time:156326ms step_avg:99.63ms
step:1580/1770 train_time:156430ms step_avg:99.64ms
step:1581/1770 train_time:156538ms step_avg:99.64ms
step:1582/1770 train_time:156643ms step_avg:99.65ms
step:1583/1770 train_time:156747ms step_avg:99.65ms
step:1584/1770 train_time:156852ms step_avg:99.65ms
step:1585/1770 train_time:156957ms step_avg:99.66ms
step:1586/1770 train_time:157065ms step_avg:99.66ms
step:1587/1770 train_time:157169ms step_avg:99.66ms
step:1588/1770 train_time:157274ms step_avg:99.67ms
step:1589/1770 train_time:157379ms step_avg:99.67ms
step:1590/1770 train_time:157482ms step_avg:99.67ms
step:1591/1770 train_time:157586ms step_avg:99.67ms
step:1592/1770 train_time:157690ms step_avg:99.68ms
step:1593/1770 train_time:157794ms step_avg:99.68ms
step:1594/1770 train_time:157898ms step_avg:99.68ms
step:1595/1770 train_time:158002ms step_avg:99.69ms
step:1596/1770 train_time:158108ms step_avg:99.69ms
step:1597/1770 train_time:158211ms step_avg:99.69ms
step:1598/1770 train_time:158315ms step_avg:99.69ms
step:1599/1770 train_time:158421ms step_avg:99.70ms
step:1600/1770 train_time:158527ms step_avg:99.70ms
step:1601/1770 train_time:158632ms step_avg:99.71ms
step:1602/1770 train_time:158737ms step_avg:99.71ms
step:1603/1770 train_time:158841ms step_avg:99.71ms
step:1604/1770 train_time:158944ms step_avg:99.71ms
step:1605/1770 train_time:159047ms step_avg:99.72ms
step:1606/1770 train_time:159150ms step_avg:99.72ms
step:1607/1770 train_time:159259ms step_avg:99.72ms
step:1608/1770 train_time:159362ms step_avg:99.73ms
step:1609/1770 train_time:159466ms step_avg:99.73ms
step:1610/1770 train_time:159572ms step_avg:99.73ms
step:1611/1770 train_time:159679ms step_avg:99.74ms
step:1612/1770 train_time:159784ms step_avg:99.74ms
step:1613/1770 train_time:159888ms step_avg:99.74ms
step:1614/1770 train_time:159991ms step_avg:99.75ms
step:1615/1770 train_time:160096ms step_avg:99.75ms
step:1616/1770 train_time:160200ms step_avg:99.75ms
step:1617/1770 train_time:160306ms step_avg:99.75ms
step:1618/1770 train_time:160411ms step_avg:99.76ms
step:1619/1770 train_time:160516ms step_avg:99.76ms
step:1620/1770 train_time:160621ms step_avg:99.76ms
step:1621/1770 train_time:160725ms step_avg:99.77ms
step:1622/1770 train_time:160830ms step_avg:99.77ms
step:1623/1770 train_time:160937ms step_avg:99.78ms
step:1624/1770 train_time:161041ms step_avg:99.78ms
step:1625/1770 train_time:161144ms step_avg:99.78ms
step:1625/1770 val_loss:3.3196 train_time:161246ms step_avg:99.84ms
step:1626/1770 train_time:161270ms step_avg:99.80ms
step:1627/1770 train_time:161357ms step_avg:99.79ms
step:1628/1770 train_time:161461ms step_avg:99.79ms
step:1629/1770 train_time:161565ms step_avg:99.79ms
step:1630/1770 train_time:161669ms step_avg:99.80ms
step:1631/1770 train_time:161772ms step_avg:99.80ms
step:1632/1770 train_time:161876ms step_avg:99.80ms
step:1633/1770 train_time:161980ms step_avg:99.80ms
step:1634/1770 train_time:162083ms step_avg:99.80ms
step:1635/1770 train_time:162188ms step_avg:99.81ms
step:1636/1770 train_time:162293ms step_avg:99.81ms
step:1637/1770 train_time:162397ms step_avg:99.81ms
step:1638/1770 train_time:162501ms step_avg:99.82ms
step:1639/1770 train_time:162606ms step_avg:99.82ms
step:1640/1770 train_time:162711ms step_avg:99.82ms
step:1641/1770 train_time:162815ms step_avg:99.83ms
step:1642/1770 train_time:162918ms step_avg:99.83ms
step:1643/1770 train_time:163022ms step_avg:99.83ms
step:1644/1770 train_time:163128ms step_avg:99.83ms
step:1645/1770 train_time:163231ms step_avg:99.84ms
step:1646/1770 train_time:163338ms step_avg:99.84ms
step:1647/1770 train_time:163443ms step_avg:99.84ms
step:1648/1770 train_time:163546ms step_avg:99.85ms
step:1649/1770 train_time:163650ms step_avg:99.85ms
step:1650/1770 train_time:163754ms step_avg:99.85ms
step:1651/1770 train_time:163857ms step_avg:99.85ms
step:1652/1770 train_time:163961ms step_avg:99.85ms
step:1653/1770 train_time:164066ms step_avg:99.86ms
step:1654/1770 train_time:164174ms step_avg:99.86ms
step:1655/1770 train_time:164281ms step_avg:99.87ms
step:1656/1770 train_time:164386ms step_avg:99.87ms
step:1657/1770 train_time:164492ms step_avg:99.87ms
step:1658/1770 train_time:164595ms step_avg:99.88ms
step:1659/1770 train_time:164701ms step_avg:99.88ms
step:1660/1770 train_time:164805ms step_avg:99.88ms
step:1661/1770 train_time:164909ms step_avg:99.88ms
step:1662/1770 train_time:165014ms step_avg:99.89ms
step:1663/1770 train_time:165118ms step_avg:99.89ms
step:1664/1770 train_time:165221ms step_avg:99.89ms
step:1665/1770 train_time:165325ms step_avg:99.89ms
step:1666/1770 train_time:165430ms step_avg:99.90ms
step:1667/1770 train_time:165534ms step_avg:99.90ms
step:1668/1770 train_time:165637ms step_avg:99.90ms
step:1669/1770 train_time:165740ms step_avg:99.90ms
step:1670/1770 train_time:165845ms step_avg:99.91ms
step:1671/1770 train_time:165950ms step_avg:99.91ms
step:1672/1770 train_time:166054ms step_avg:99.91ms
step:1673/1770 train_time:166159ms step_avg:99.92ms
step:1674/1770 train_time:166263ms step_avg:99.92ms
step:1675/1770 train_time:166367ms step_avg:99.92ms
step:1676/1770 train_time:166472ms step_avg:99.92ms
step:1677/1770 train_time:166580ms step_avg:99.93ms
step:1678/1770 train_time:166683ms step_avg:99.93ms
step:1679/1770 train_time:166788ms step_avg:99.93ms
step:1680/1770 train_time:166892ms step_avg:99.94ms
step:1681/1770 train_time:166996ms step_avg:99.94ms
step:1682/1770 train_time:167102ms step_avg:99.94ms
step:1683/1770 train_time:167206ms step_avg:99.94ms
step:1684/1770 train_time:167310ms step_avg:99.95ms
step:1685/1770 train_time:167413ms step_avg:99.95ms
step:1686/1770 train_time:167518ms step_avg:99.95ms
step:1687/1770 train_time:167623ms step_avg:99.95ms
step:1688/1770 train_time:167727ms step_avg:99.96ms
step:1689/1770 train_time:167831ms step_avg:99.96ms
step:1690/1770 train_time:167936ms step_avg:99.96ms
step:1691/1770 train_time:168040ms step_avg:99.96ms
step:1692/1770 train_time:168144ms step_avg:99.97ms
step:1693/1770 train_time:168250ms step_avg:99.97ms
step:1694/1770 train_time:168353ms step_avg:99.97ms
step:1695/1770 train_time:168458ms step_avg:99.98ms
step:1696/1770 train_time:168564ms step_avg:99.98ms
step:1697/1770 train_time:168670ms step_avg:99.98ms
step:1698/1770 train_time:168774ms step_avg:99.98ms
step:1699/1770 train_time:168878ms step_avg:99.99ms
step:1700/1770 train_time:168982ms step_avg:99.99ms
step:1701/1770 train_time:169085ms step_avg:99.99ms
step:1702/1770 train_time:169190ms step_avg:99.99ms
step:1703/1770 train_time:169294ms step_avg:100.00ms
step:1704/1770 train_time:169398ms step_avg:100.00ms
step:1705/1770 train_time:169501ms step_avg:100.00ms
step:1706/1770 train_time:169605ms step_avg:100.00ms
step:1707/1770 train_time:169709ms step_avg:100.01ms
step:1708/1770 train_time:169813ms step_avg:100.01ms
step:1709/1770 train_time:169918ms step_avg:100.01ms
step:1710/1770 train_time:170026ms step_avg:100.02ms
step:1711/1770 train_time:170132ms step_avg:100.02ms
step:1712/1770 train_time:170237ms step_avg:100.02ms
step:1713/1770 train_time:170341ms step_avg:100.02ms
step:1714/1770 train_time:170446ms step_avg:100.03ms
step:1715/1770 train_time:170550ms step_avg:100.03ms
step:1716/1770 train_time:170655ms step_avg:100.03ms
step:1717/1770 train_time:170760ms step_avg:100.04ms
step:1718/1770 train_time:170866ms step_avg:100.04ms
step:1719/1770 train_time:170972ms step_avg:100.04ms
step:1720/1770 train_time:171078ms step_avg:100.05ms
step:1721/1770 train_time:171182ms step_avg:100.05ms
step:1722/1770 train_time:171289ms step_avg:100.05ms
step:1723/1770 train_time:171395ms step_avg:100.06ms
step:1724/1770 train_time:171502ms step_avg:100.06ms
step:1725/1770 train_time:171609ms step_avg:100.06ms
step:1726/1770 train_time:171716ms step_avg:100.07ms
step:1727/1770 train_time:171820ms step_avg:100.07ms
step:1728/1770 train_time:171927ms step_avg:100.07ms
step:1729/1770 train_time:172032ms step_avg:100.08ms
step:1730/1770 train_time:172138ms step_avg:100.08ms
step:1731/1770 train_time:172244ms step_avg:100.08ms
step:1732/1770 train_time:172349ms step_avg:100.09ms
step:1733/1770 train_time:172456ms step_avg:100.09ms
step:1734/1770 train_time:172560ms step_avg:100.09ms
step:1735/1770 train_time:172666ms step_avg:100.10ms
step:1736/1770 train_time:172771ms step_avg:100.10ms
step:1737/1770 train_time:172876ms step_avg:100.10ms
step:1738/1770 train_time:172981ms step_avg:100.10ms
step:1739/1770 train_time:173086ms step_avg:100.11ms
step:1740/1770 train_time:173190ms step_avg:100.11ms
step:1741/1770 train_time:173298ms step_avg:100.11ms
step:1742/1770 train_time:173406ms step_avg:100.12ms
step:1743/1770 train_time:173512ms step_avg:100.12ms
step:1744/1770 train_time:173617ms step_avg:100.13ms
step:1745/1770 train_time:173722ms step_avg:100.13ms
step:1746/1770 train_time:173830ms step_avg:100.13ms
step:1747/1770 train_time:173934ms step_avg:100.13ms
step:1748/1770 train_time:174040ms step_avg:100.14ms
step:1749/1770 train_time:174146ms step_avg:100.14ms
step:1750/1770 train_time:174250ms step_avg:100.14ms
step:1750/1770 val_loss:3.2950 train_time:174353ms step_avg:100.20ms
step:1751/1770 train_time:174375ms step_avg:100.16ms
step:1752/1770 train_time:174466ms step_avg:100.15ms
step:1753/1770 train_time:174570ms step_avg:100.15ms
step:1754/1770 train_time:174676ms step_avg:100.16ms
step:1755/1770 train_time:174781ms step_avg:100.16ms
step:1756/1770 train_time:174886ms step_avg:100.16ms
step:1757/1770 train_time:174992ms step_avg:100.17ms
step:1758/1770 train_time:175096ms step_avg:100.17ms
step:1759/1770 train_time:175202ms step_avg:100.17ms
step:1760/1770 train_time:175307ms step_avg:100.18ms
step:1761/1770 train_time:175415ms step_avg:100.18ms
step:1762/1770 train_time:175523ms step_avg:100.18ms
step:1763/1770 train_time:175626ms step_avg:100.19ms
step:1764/1770 train_time:175732ms step_avg:100.19ms
step:1765/1770 train_time:175837ms step_avg:100.19ms
step:1766/1770 train_time:175947ms step_avg:100.20ms
step:1767/1770 train_time:176051ms step_avg:100.20ms
step:1768/1770 train_time:176156ms step_avg:100.20ms
step:1769/1770 train_time:176260ms step_avg:100.20ms
step:1770/1770 train_time:176364ms step_avg:100.21ms
step:1770/1770 val_loss:3.2912 train_time:176469ms step_avg:100.27ms
peak memory allocated: 29898 MiB reserved: 44552 MiB
