import os
import sys
with open(sys.argv[0]) as f:
    code = f.read() # read the code of this file ASAP, for logging
import uuid
import time
from dataclasses import dataclass
from functools import lru_cache
from pathlib import Path
import numpy as np

os.environ["PYTORCH_CUDA_ALLOC_CONF"] = "expandable_segments:True"
import torch
torch.empty(1, device="cuda", requires_grad=True).backward() # prevents a bug on some systems
from torch import Tensor, nn
import torch.nn.functional as F
import torch.distributed as dist
# use of FlexAttention contributed by @KoszarskyB
from torch.nn.attention.flex_attention import BlockMask, flex_attention
torch._inductor.config.coordinate_descent_tuning = True # turn this off for a faster compile time (but slightly slower run)

# -----------------------------------------------------------------------------
# Custom operators : FP8 matmul for lm_head by @YouJiacheng

@torch.library.custom_op("nanogpt::mm", mutates_args=())
def mm_op(x: Tensor, w: Tensor, x_s: float, w_s: float, grad_s: float) -> tuple[Tensor, Tensor, Tensor]:
    @torch.compile
    def impl(x: Tensor, w: Tensor):
        assert x.is_contiguous() and w.is_contiguous()
        x_f8 = x.mul(x_s).to(torch.float8_e4m3fn)
        w_f8 = w.mul(w_s).to(torch.float8_e4m3fn)
        out = torch._scaled_mm(
            x_f8,
            w_f8.t(),
            out_dtype=torch.bfloat16,
            scale_a=x.new_tensor(1 / x_s, dtype=torch.float32),
            scale_b=x.new_tensor(1 / w_s, dtype=torch.float32),
            use_fast_accum=True,
        )
        return out, x_f8, w_f8

    return impl(x, w)

@mm_op.register_fake
def _(x: Tensor, w: Tensor, *_):
    assert x.ndim == w.ndim == 2
    assert x.shape[1] == w.shape[1]
    assert x.device == w.device
    assert x.is_contiguous() and w.is_contiguous()
    return x @ w.t(), x.to(torch.float8_e4m3fn), w.to(torch.float8_e4m3fn)

@torch.library.custom_op("nanogpt::mm_backward", mutates_args=())
def mm_backward_op(g: Tensor, x_f8: Tensor, w_f8: Tensor, x_s: float, w_s: float, grad_s: float) -> tuple[Tensor, Tensor]:
    @torch.compile
    def impl(grad: Tensor, x_f8: Tensor, w_f8: Tensor):
        assert grad.is_contiguous()
        x_inv_s = grad.new_tensor(1 / x_s, dtype=torch.float32)
        w_inv_s = grad.new_tensor(1 / w_s, dtype=torch.float32)
        grad_inv_s = grad.new_tensor(1 / grad_s, dtype=torch.float32)
        grad_f8 = grad.mul(grad_s).to(torch.float8_e5m2)
        grad_x = torch._scaled_mm(
            grad_f8,
            w_f8.t().contiguous().t(),
            out_dtype=torch.bfloat16,
            scale_a=grad_inv_s,
            scale_b=w_inv_s,
            use_fast_accum=False,
        )
        # faster than grad_f8_t @ x_f8, for (d_out, d_in) == (50304, 768)
        grad_w = torch._scaled_mm(
            x_f8.t().contiguous(),
            grad_f8.t().contiguous().t(),
            out_dtype=torch.float32,
            scale_a=x_inv_s,
            scale_b=grad_inv_s,
            use_fast_accum=False,
        ).t()
        return grad_x, grad_w

    return impl(g, x_f8, w_f8)

@mm_backward_op.register_fake
def _(g: Tensor, x_f8: Tensor, w_f8: Tensor, *_):
    return x_f8.to(torch.bfloat16), w_f8.to(torch.float32)

def backward(ctx, grad_out: Tensor, *_):
    x_f8, w_f8 = ctx.saved_tensors
    x_s, w_s, grad_s = ctx.scales
    grad_x, grad_w = torch.ops.nanogpt.mm_backward(
        grad_out, x_f8, w_f8, x_s, w_s, grad_s
    )
    return grad_x, grad_w, None, None, None

def setup_context(ctx: torch.autograd.function.FunctionCtx, inputs, output):
    *_, x_s, w_s, grad_s = inputs
    _, x_f8, w_f8 = output
    ctx.save_for_backward(x_f8, w_f8)
    ctx.scales = x_s, w_s, grad_s
    ctx.set_materialize_grads(False)

mm_op.register_autograd(backward, setup_context=setup_context)

# -----------------------------------------------------------------------------
# Muon optimizer

@torch.compile
def zeropower_via_newtonschulz5(G: Tensor, steps: int) -> Tensor:
    """
    Newton-Schulz iteration to compute the zeroth power / orthogonalization of G. We opt to use a
    quintic iteration whose coefficients are selected to maximize the slope at zero. For the purpose
    of minimizing steps, it turns out to be empirically effective to keep increasing the slope at
    zero even beyond the point where the iteration no longer converges all the way to one everywhere
    on the interval. This iteration therefore does not produce UV^T but rather something like US'V^T
    where S' is diagonal with S_{ii}' ~ Uniform(0.5, 1.5), which turns out not to hurt model
    performance at all relative to UV^T, where USV^T = G is the SVD.
    """
    assert G.ndim >= 2 # batched Muon implementation by @scottjmaddox, and put into practice in the record by @YouJiacheng
    a, b, c = (3.4445, -4.7750,  2.0315)
    X = G.bfloat16()
    if G.size(-2) > G.size(-1):
        X = X.mT

    # Ensure spectral norm is at most 1
    X = X / (X.norm(dim=(-2, -1), keepdim=True) + 1e-7)
    # Perform the NS iterations
    for _ in range(steps):
        A = X @ X.mT
        B = b * A + c * A @ A # quintic computation strategy adapted from suggestion by @jxbz, @leloykun, and @YouJiacheng
        X = a * X + B @ X
    
    if G.size(-2) > G.size(-1):
        X = X.mT
    return X

class Muon(torch.optim.Optimizer):
    """
    Muon - MomentUm Orthogonalized by Newton-schulz

    Muon internally runs standard SGD-momentum, and then performs an orthogonalization post-
    processing step, in which each 2D parameter's update is replaced with the nearest orthogonal
    matrix. To efficiently orthogonalize each update, we use a Newton-Schulz iteration, which has
    the advantage that it can be stably run in bfloat16 on the GPU.

    Some warnings:
    - This optimizer assumes that all parameters passed in are 2D.
    - It should not be used for the embedding layer, the final fully connected layer, or any {0,1}-D
    parameters; those should all be optimized by a standard method (e.g., AdamW).
    - To use it with 4D convolutional filters, it works well to just flatten their last 3 dimensions.
    - We believe it is unlikely to work well for training with small batch size.
    - We believe it may not work well for finetuning pretrained models, but we haven"t tested this.
    - We have not yet tried this optimizer for training scenarios larger than NanoGPT (124M).

    Arguments:
        lr: The learning rate used by the internal SGD.
        momentum: The momentum used by the internal SGD.
        nesterov: Whether to use Nesterov-style momentum in the internal SGD. (recommended)
        ns_steps: The number of Newton-Schulz iteration steps to use.
    """
    def __init__(self, params, lr=0.02, momentum=0.95, nesterov=True, ns_steps=5, rank=0, world_size=1):
        self.rank = rank
        self.world_size = world_size
        defaults = dict(lr=lr, momentum=momentum, nesterov=nesterov, ns_steps=ns_steps)
        params: list[Tensor] = [*params]
        assert all(isinstance(p, Tensor) for p in params)
        sizes = {p.numel() for p in params}
        def create_update_buffer(size: int):
            b = torch.empty(self.world_size, size, dtype=torch.bfloat16, device="cuda")
            return dict(update_buffer=b, update_buffer_views=[b[i] for i in range(self.world_size)])
        param_groups = [
            dict(params=[p for p in params if p.numel() == size], **create_update_buffer(size)) for size in sizes]
        super().__init__(param_groups, defaults)

    @torch.no_grad()
    def step(self):
        for group in self.param_groups:
            lr = group["lr"]
            momentum = group["momentum"]
            nesterov = group["nesterov"]
            ns_steps = group["ns_steps"]
            update_buffer = group["update_buffer"]
            update_buffer_views: list[Tensor] = group["update_buffer_views"]
            # generate weight updates in distributed fashion
            params: list[Tensor] = group["params"]
            handle = None
            params_world = None
            def update_prev(): # optimized Muon implementation contributed by @YouJiacheng
                if params_world is None:
                    return
                assert handle is not None
                handle.wait()
                for p_world, g_world in zip(params_world, update_buffer_views):
                    p_world.add_(
                        g_world.view_as(p_world),
                        alpha=-lr * max(1, p_world.size(-2) / p_world.size(-1)) ** 0.5,
                    )
            for base_i in range(len(params))[::self.world_size]:
                if base_i + self.rank < len(params):
                    p = params[base_i + self.rank]
                    g = p.grad
                    assert g is not None
                    state = self.state[p]
                    if "momentum_buffer" not in state:
                        state["momentum_buffer"] = torch.zeros_like(g)
                    buf: Tensor = state["momentum_buffer"]
                    buf.lerp_(g, 1 - momentum)
                    g = g.lerp_(buf, momentum) if nesterov else buf
                    g = zeropower_via_newtonschulz5(g, steps=ns_steps).flatten()
                else:
                    g = update_buffer_views[self.rank]
                update_prev() # async all_gather instead of sync all_reduce by @YouJiacheng
                handle = dist.all_gather_into_tensor(update_buffer, g, async_op=True)
                params_world = params[base_i : base_i + self.world_size]
            update_prev()

# -----------------------------------------------------------------------------
# PyTorch nn.Module definitions for the model

def norm(x: Tensor):
    return F.rms_norm(x, (x.size(-1),))

class CastedLinear(nn.Linear):
    def __init__(self, in_features: int, out_features: int, use_fp8: bool = False, x_scale: float = 1.0, w_scale: float = 1.0, grad_scale: float = 1.0):
        super().__init__(in_features, out_features, bias=False)
        self.use_fp8 = use_fp8
        self.x_scale = x_scale
        self.w_scale = w_scale
        self.grad_scale = grad_scale

    def reset_parameters(self) -> None:
        std = 0.5 * (self.in_features ** -0.5) # 0.5 is a bit better than the default 1/sqrt(3)
        bound = (3 ** 0.5) * std
        with torch.no_grad():
            self.weight.uniform_(-bound, bound)

    def forward(self, x: Tensor):
        if self.use_fp8 and self.training:
            _x = x.flatten(0, -2)
            out: Tensor = torch.ops.nanogpt.mm(_x, self.weight, x_s=self.x_scale, w_s=self.w_scale, grad_s=self.grad_scale)[0]
            return out.reshape(*x.shape[:-1], -1)
        else:
            with torch.autocast("cuda", dtype=torch.bfloat16):
                return F.linear(x, self.weight.type_as(x))

class Rotary(nn.Module):
    def __init__(self, dim: int, max_seq_len: int):
        super().__init__()
        # half-truncate RoPE by @YouJiacheng (w/ base freq tuning)
        angular_freq = (1 / 1024) ** torch.linspace(0, 1, steps=dim//4, dtype=torch.float32)
        angular_freq = torch.cat([angular_freq, angular_freq.new_zeros(dim//4)])
        t = torch.arange(max_seq_len, dtype=torch.float32)
        theta = torch.einsum("i,j -> ij", t, angular_freq)
        self.cos = nn.Buffer(theta.cos(), persistent=False)
        self.sin = nn.Buffer(theta.sin(), persistent=False)

    def forward(self, x_BTHD: Tensor):
        assert self.cos.size(0) >= x_BTHD.size(-3)
        cos, sin = self.cos[None, :x_BTHD.size(-3), None, :], self.sin[None, :x_BTHD.size(-3), None, :]
        x1, x2 = x_BTHD.to(dtype=torch.float32).chunk(2, dim=-1)
        y1 = x1 * cos + x2 * sin
        y2 = x1 * (-sin) + x2 * cos
        return torch.cat((y1, y2), 3).type_as(x_BTHD)

class CausalSelfAttention(nn.Module):
    def __init__(self, dim: int, num_heads: int, max_seq_len: int):
        super().__init__()
        assert dim % num_heads == 0
        self.num_heads = num_heads
        std = 0.5 * (dim ** -0.5)
        bound = (3 ** 0.5) * std # improved init scale by @YouJiacheng
        # merged QKV weights: suggested by many, implemented by @fernbear.bsky.social, and further improved by @YouJiacheng
        # https://x.com/hi_tysam/status/1879699187107033311
        self.qkv_w = nn.Parameter(torch.empty(3, dim, dim).uniform_(-bound, bound))
        self.lambdas = nn.Parameter(torch.tensor([0.5, 0.5]))
        self.rotary = Rotary(dim // num_heads, max_seq_len)
        self.c_proj = CastedLinear(dim, dim)
        self.c_proj.weight.detach().zero_() # zero init suggested by @Grad62304977
        # scale the attention logits by given constant, instead of the default head_dim**-0.5, by @leloykun
        # inspired by learnable scalars used by @brendanh0gan https://x.com/hi_tysam/status/1879693583898591283
        self.attn_scale = 0.12

    def forward(self, x: Tensor, ve: Tensor | None, block_mask: BlockMask):
        B, T = x.size(0), x.size(1) # batch size, sequence length
        assert B == 1, "Must use batch size = 1 for FlexAttention"
        q, k, v = F.linear(x, self.qkv_w.flatten(end_dim=1).type_as(x)).view(B, T, 3*self.num_heads, -1).chunk(3, dim=-2)
        if ve is not None:
            v = self.lambdas[0] * v + self.lambdas[1] * ve.view_as(v) # @KoszarskyB & @Grad62304977
        else: # skip mid-layers token value embeddings by @YouJiacheng
            v = self.lambdas[0] * v
        q, k = norm(q), norm(k) # QK norm @Grad62304977
        q, k = self.rotary(q), self.rotary(k)
        y = flex_attention(q.transpose(1, 2), k.transpose(1, 2), v.transpose(1, 2), block_mask=block_mask, scale=self.attn_scale)
        y = y.transpose(1, 2).contiguous().view_as(x) # re-assemble all head outputs side by side
        y = self.c_proj(y)
        return y

class MLP(nn.Module):
    def __init__(self, dim: int):
        super().__init__()
        self.c_fc = CastedLinear(dim, 4 * dim)
        self.c_proj = CastedLinear(4 * dim, dim)
        self.c_proj.weight.detach().zero_() # zero init suggested by @Grad62304977

    def forward(self, x: Tensor):
        x = self.c_fc(x)
        x = F.relu(x).square() # https://arxiv.org/abs/2109.08668v2; ~1-2% better than GELU; suggested by @SKYLINEZ007 and @Grad62304977
        x = self.c_proj(x)
        return x

class Block(nn.Module):
    def __init__(self, model_dim: int, num_heads: int, layer_idx: int, max_seq_len: int):
        super().__init__()
        # skip attention of blocks.7 (the 8th layer) by @YouJiacheng
        self.attn = CausalSelfAttention(model_dim, num_heads, max_seq_len) if layer_idx != 7 else None
        self.mlp = MLP(model_dim)
        self.lambdas = nn.Parameter(torch.tensor([1., 0.]))

    def forward(self, x: Tensor, ve: Tensor | None, x0: Tensor, block_mask: BlockMask):
        x = self.lambdas[0] * x + self.lambdas[1] * x0
        if self.attn is not None:
            x = x + self.attn(norm(x), ve, block_mask)
        x = x + self.mlp(norm(x))
        return x

class ValueEmbedding(nn.Module):
    def __init__(self, vocab_size: int, embedding_dim: int, num_layers: int, num_embeddings: int = 3):
        super().__init__()
        self.num_layers = num_layers
        self.num_embeddings = num_embeddings
        self.embed = nn.ModuleList([nn.Embedding(vocab_size, embedding_dim) for _ in range(num_embeddings)])

    def forward(self, x: Tensor) -> list[Tensor | None]:
        ve = [emb(x) for emb in self.embed]
        # 012 ... 012 structure on token value embeddings by @YouJiacheng, improved on @leloykun's U-net structure
        ve = [ve[0], ve[1], ve[2]] + [None] * (self.num_layers - 2 * self.num_embeddings) + [ve[0], ve[1], ve[2]]
        return ve

# -----------------------------------------------------------------------------
# The main model

def next_multiple_of_n(v: float | int, *, n: int):
    return next(x for x in range(n, int(v) + 1 + n, n) if x >= v)

class GPT(nn.Module):
    def __init__(self, vocab_size: int, num_layers: int, num_heads: int, model_dim: int, max_seq_len: int):
        super().__init__()
        self.embed = nn.Embedding(vocab_size, model_dim)
        # token value embeddings by @KoszarskyB - inspired by @Grad62304977's value residual implementation following https://arxiv.org/abs/2410.17897
        self.value_embeds = ValueEmbedding(vocab_size, model_dim, num_layers)
        self.blocks = nn.ModuleList([Block(model_dim, num_heads, layer_idx, max_seq_len) for layer_idx in range(num_layers)])
        # U-net design by @brendanh0gan
        self.num_encoder_layers = num_layers // 2 # Half of the layers for encoder
        self.num_decoder_layers = num_layers - self.num_encoder_layers # Remaining for decoder
        # Add learnable skip connection weights for decoder layers
        self.skip_weights = nn.Parameter(torch.ones(self.num_decoder_layers))
        # there are only 50257 unique GPT-2 tokens; we extend to nearest multiple of 128 for efficiency.
        # suggested to me by @Grad62304977. this originates from Karpathy's experiments.
        self.lm_head = CastedLinear(model_dim, next_multiple_of_n(vocab_size, n=128), use_fp8=True, x_scale=2.0, w_scale=2.0**9, grad_scale=2.0**19)
        self.lm_head.weight.detach().zero_() # @Grad62304977

    def forward(self, input_seq: Tensor, target_seq: Tensor, sliding_window_num_blocks: Tensor):
        BLOCK_SIZE = 128
        assert input_seq.ndim == 1
        assert len(input_seq) % BLOCK_SIZE == 0
        NUM_BLOCKS = len(input_seq) // BLOCK_SIZE
        docs = (input_seq == 50256).cumsum(0)
        docs_low = docs.view(-1, BLOCK_SIZE)[:, 0].contiguous()
        docs_high = docs.view(-1, BLOCK_SIZE)[:, -1].contiguous()

        def document_causal(b, h, q_idx, kv_idx):
            causal_mask = q_idx >= kv_idx
            document_mask = docs[q_idx] == docs[kv_idx]
            return causal_mask & document_mask

        def dense_to_ordered(dense_mask: Tensor):
            num_blocks = dense_mask.sum(dim=-1, dtype=torch.int32)
            indices = dense_mask.argsort(dim=-1, descending=False, stable=True).flip(-1).to(torch.int32)
            return num_blocks[None, None].contiguous(), indices[None, None].contiguous()

        # manual block mask creation by @YouJiacheng
        def create_doc_swc_block_masks(sliding_window_num_blocks: Tensor):
            kv_idx = block_idx = torch.arange(NUM_BLOCKS, dtype=torch.int32, device="cuda")
            q_idx = block_idx[:, None]
            causal_bm = q_idx >= kv_idx
            causal_full_bm = q_idx > kv_idx
            document_bm = (docs_low[:, None] <= docs_high) & (docs_low <= docs_high[:, None])
            document_full_bm = (docs_low[:, None] == docs_high) & (docs_low == docs_high[:, None])
            nonzero_bm = causal_bm & document_bm
            full_bm  = causal_full_bm & document_full_bm
            kv_num_blocks, kv_indices = dense_to_ordered(nonzero_bm & ~full_bm)
            full_kv_num_blocks, full_kv_indices = dense_to_ordered(full_bm)
            def build_bm(sw_num_blocks: Tensor) -> BlockMask:
                return BlockMask.from_kv_blocks(
                    torch.clamp_max(kv_num_blocks, torch.clamp_min(sw_num_blocks - full_kv_num_blocks, 1)),
                    kv_indices,
                    torch.clamp_max(full_kv_num_blocks, sw_num_blocks - 1),
                    full_kv_indices,
                    BLOCK_SIZE=BLOCK_SIZE,
                    mask_mod=document_causal,
                )
            return build_bm(sliding_window_num_blocks), build_bm(sliding_window_num_blocks // 2)

        # Long-short SWA block masks by @leloykun & @YouJiacheng, adapated from suggestion by @Grad62304977, following Gemma 2 paper
        long_bm, short_bm = create_doc_swc_block_masks(sliding_window_num_blocks)

        x = x0 = norm(self.embed(input_seq)[None]) # use of norm here by @Grad62304977
        ve = self.value_embeds(input_seq)
        assert len(ve) == len(self.blocks)
        ve_enc, ve_dec = ve[:self.num_encoder_layers], ve[self.num_encoder_layers:]
        assert len(ve_enc) == self.num_encoder_layers and len(ve_dec) == self.num_decoder_layers

        # Store outputs for U-Net skip connections
        skip_connections = []
        # Encoder pass - process only the first half of the blocks
        block_masks = [long_bm, short_bm, short_bm, short_bm, long_bm, short_bm]
        assert len(block_masks) == self.num_encoder_layers
        for i in range(self.num_encoder_layers):
            x = self.blocks[i](x, ve_enc[i], x0, block_masks[i])
            skip_connections.append(x)
        # Decoder pass - process the remaining blocks with weighted skip connections
        block_masks.reverse()
        assert len(block_masks) == self.num_decoder_layers
        for i in range(self.num_decoder_layers):
            x = x + self.skip_weights[i] * skip_connections.pop()
            x = self.blocks[self.num_encoder_layers + i](x, ve_dec[i], x0, block_masks[i])
        x = norm(x)
        logits = self.lm_head(x)
        # @Grad62304977 added tanh softcapping following Gemma 2 paper, @KoszarskyB reduced it from 30 to 15, @YouJiacheng shifted it by +15 (2*sigmoid(2*x)=tanh(x)+1)
        logits = 30 * torch.sigmoid(logits.float() / 7.5)
        loss = F.cross_entropy(logits.view(-1, logits.size(-1)), target_seq)
        return loss

# -----------------------------------------------------------------------------
# Our own simple Distributed Data Loader

def _load_data_shard(file: Path):
    header = torch.from_file(f"{file}", False, 256, dtype=torch.int32) # header is 256 int32
    assert header[0] == 20240520, "magic number mismatch in the data .bin file"
    assert header[1] == 1, "unsupported version"
    num_tokens = int(header[2]) # number of tokens (claimed)
    with file.open("rb", buffering=0) as f:
        tokens = torch.empty(num_tokens, dtype=torch.uint16, pin_memory=True) # avoid pin_memory copy by @YouJiacheng
        f.seek(256 * 4)
        nbytes = f.readinto(tokens.numpy()) # avoid bytes->array copy by @YouJiacheng
        assert nbytes == 2 * num_tokens, "number of tokens read does not match header"
    return tokens

def distributed_data_generator(filename_pattern: str, batch_size: int, rank : int, world_size : int):
    files = sorted(Path.cwd().glob(filename_pattern))
    assert batch_size % world_size == 0
    local_batch_size = batch_size // world_size
    file_iter = iter(files) # use itertools.cycle(files) instead if you want to do multi-epoch training
    tokens, pos = _load_data_shard(next(file_iter)), 0
    while True:
        if pos + batch_size + 1 >= len(tokens):
            tokens, pos = _load_data_shard(next(file_iter)), 0
        buf = tokens[pos + rank * local_batch_size:][:local_batch_size + 1]
        inputs = buf[:-1].to(device="cuda", dtype=torch.int32, non_blocking=True) # no sync on host side;
        targets = buf[1:].to(device="cuda", dtype=torch.int64, non_blocking=True) # H2D in another stream isn"t helpful.
        pos += batch_size
        yield inputs, targets

# -----------------------------------------------------------------------------
# int main

@dataclass
class Hyperparameters:
    # data
    train_files = "data/fineweb10B/fineweb_train_*.bin" # input .bin to train on
    val_files = "data/fineweb10B/fineweb_val_*.bin" # input .bin to eval validation loss on
    val_tokens = 10485760 # how many tokens of validation data? it's important to keep this fixed for consistent comparisons
    # optimization
    num_iterations = 1770 # number of iterations to run
    cooldown_frac = 0.4 # fraction of training spent cooling down the learning rate
    # evaluation and logging
    val_loss_every = 125 # every how many steps to evaluate val loss? 0 for only at the end
    # implementation
    seq_len = 48*1024 # FlexAttention sequence length
    val_seq_len = 4*64*1024 # FlexAttention sequence length for validation
    save_checkpoint = False

def train(args: Hyperparameters):
    # torchrun sets these env variables
    rank = int(os.environ["RANK"])
    world_size = int(os.environ["WORLD_SIZE"])
    assert torch.cuda.is_available()
    device = torch.device("cuda", int(os.environ["LOCAL_RANK"]))
    torch.cuda.set_device(device)
    dist.init_process_group(backend="nccl", device_id=device)
    dist.barrier()
    master_process = (rank == 0) # this process will do logging, checkpointing etc.

    # begin logging
    logfile = None
    if master_process:
        run_id = uuid.uuid4()
        os.makedirs("logs", exist_ok=True)
        logfile = f"logs/{run_id}.txt"
        print(logfile)
    def print0(s, console=False):
        if master_process:
            with open(logfile, "a") as f:
                if console:
                    print(s)
                print(s, file=f)

    # begin by printing this file (the Python code)
    print0(code)
    print0("="*100)
    # log information about the hardware/software environment this is running on
    print0(f"Running Python {sys.version}")
    print0(f"Running PyTorch {torch.version.__version__} compiled for CUDA {torch.version.cuda}")
    def nvidia_smi():
        import subprocess  # avoid top level import
        return subprocess.run(["nvidia-smi"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True).stdout
    print0(nvidia_smi())
    print0("="*100)

    # load data
    batch_size = world_size * args.seq_len
    train_loader = distributed_data_generator(args.train_files, batch_size, rank, world_size)

    model = GPT(vocab_size=50257, num_layers=12, num_heads=6, model_dim=768, max_seq_len=max(args.seq_len, args.val_seq_len)).cuda()
    for m in model.modules():
        if isinstance(m, nn.Embedding):
            m.bfloat16()
    for param in model.parameters():
        dist.broadcast(param.detach(), 0)

    # collect the parameters to optimize
    hidden_matrix_params = [p for p in model.blocks.parameters() if p.ndim >= 2]
    embed_params = [model.embed.weight, *model.value_embeds.parameters()]
    scalar_params = [p for p in model.parameters() if p.ndim < 2]
    head_params = [model.lm_head.weight]

    # init the optimizer(s)
    adam_params = [dict(params=head_params, lr=0.008), dict(params=embed_params, lr=0.6), dict(params=scalar_params, lr=0.04)]
    # small adam epsilon by @YouJiacheng. this is an alternate method of fixing the world_size dependence
    # discovered by @fernbear.bsky.social https://x.com/hi_tysam/status/1879692937589875094
    optimizer1 = torch.optim.Adam(adam_params, betas=(0.8, 0.95), fused=True, eps=1e-10)
    optimizer2 = Muon(hidden_matrix_params, lr=0.05, momentum=0.95, rank=rank, world_size=world_size)
    optimizers = [optimizer1, optimizer2]

    # learning rate schedule: stable then decay
    def get_lr(it: int):
        t = 1 - it / args.num_iterations # time remaining in training
        assert 1 >= t >= 0
        w = min(t / args.cooldown_frac, 1.0) # 1 -> 0
        return w * 1.0 + (1 - w) * 0.1
    schedulers = [torch.optim.lr_scheduler.LambdaLR(opt, get_lr) for opt in optimizers]
    @lru_cache(1)
    def sw_num_blks(window_size: int):
        return torch.tensor(window_size // 128, dtype=torch.int32, pin_memory=True).cuda(non_blocking=True)

    model: nn.Module = torch.compile(model, dynamic=False)

    training_time_ms = 0
    # start the clock
    torch.cuda.synchronize()
    t0 = time.perf_counter()
    # begin training
    train_steps = args.num_iterations
    if master_process:
        from collections import defaultdict
        param_name_to_grad_scale_map = defaultdict(lambda: 1e9)
        param_name_to_weight_scale_map = defaultdict(lambda: 1e9)
    for step in range(train_steps + 1):
        last_step = (step == train_steps)
        # This effectively ignores timing first 10 steps, which are slower for weird reasons.
        # Alternately, and slightly more correctly in terms of benchmarking, we could do 10
        # steps with dummy data first, and then re-initialize the model and reset the loader.
        if step == 10:
            training_time_ms = 0
            t0 = time.perf_counter()
        timed_steps = float("nan") if step <= 11 else (step - 10) + 1 # <= 11 to avoid bug in val

        # Linearly increase the block-wise sliding window size over training 128 -> 1792:
        # increase by @fernbear.bsky.social; block-wise by @YouJiacheng
        window_size = next_multiple_of_n(1728 * step / train_steps, n=128)
        # --------------- VALIDATION SECTION -----------------
        if last_step or (args.val_loss_every > 0 and step % args.val_loss_every == 0):
            # stop the clock
            torch.cuda.synchronize()
            training_time_ms += 1000 * (time.perf_counter() - t0)
            model.eval()
            val_bs = world_size * args.val_seq_len
            assert args.val_tokens % val_bs == 0
            val_steps = args.val_tokens // val_bs
            val_loader = distributed_data_generator(args.val_files, val_bs, rank, world_size)
            val_loss = 0
            with torch.no_grad():
                for _ in range(val_steps):
                    x, y = next(val_loader)
                    val_loss += model(x, y, sw_num_blks(window_size))
            val_loss /= val_steps
            del val_loader
            dist.all_reduce(val_loss, op=dist.ReduceOp.AVG)
            print0(f"step:{step}/{train_steps} val_loss:{val_loss:.4f} train_time:{training_time_ms:.0f}ms step_avg:{training_time_ms/(timed_steps-1):.2f}ms", console=True)
            model.train()
            # start the clock again
            torch.cuda.synchronize()
            t0 = time.perf_counter()

        if last_step:
            if master_process and args.save_checkpoint:
                log = dict(step=step, code=code, model=model.state_dict(), optimizers=[opt.state_dict() for opt in optimizers])
                os.makedirs(f"logs/{run_id}", exist_ok=True)
                torch.save(log, f"logs/{run_id}/state_step{step:06d}.pt")
            # the last step only has the validation loop, so break to avoid training
            break

        # --------------- TRAINING SECTION BEGIN -----------------
        inputs, targets = next(train_loader)
        for input_seq, target_seq in zip(inputs.split(args.seq_len), targets.split(args.seq_len)):
            model(input_seq, target_seq, sw_num_blks(window_size)).backward()
        for param in model.parameters():
            dist.all_reduce(param.grad, op=dist.ReduceOp.AVG)
        if False and master_process and (step+5) % 25 == 0:
            for name, param in model.named_parameters():
                if not ("c_proj" in name or "c_fc" in name or "lm_head" in name):
                    continue
                if param.grad is not None:
                    grad_max_abs = param.grad.abs().max().item()
                    weight_max_abs = param.abs().max().item()
                    grad_scale = np.ceil(np.log2(0.8 * 40896.0 / grad_max_abs)) if grad_max_abs > 1e-9 else 1
                    weight_scale = np.ceil(np.log2(0.8 * 448.0 / weight_max_abs)) if weight_max_abs > 1e-9 else 1
                    if step > 0:
                        param_name_to_grad_scale_map[name] = min(param_name_to_grad_scale_map[name], grad_scale)
                        param_name_to_weight_scale_map[name] = min(param_name_to_weight_scale_map[name], weight_scale)
                    print0(f"{name:<40} | weight_scale={weight_scale:<3} | grad_scale={grad_scale:<3}", console=True)
        # momentum warmup for Muon
        frac = min(step / 300, 1)
        for group in optimizer2.param_groups:
            group["momentum"] = (1 - frac) * 0.85 + frac * 0.95
        # step the optimizers and schedulers
        for opt, sched in zip(optimizers, schedulers):
            opt.step()
            sched.step()
        # null the gradients
        model.zero_grad(set_to_none=True)
        # logging
        approx_time = training_time_ms + 1000 * (time.perf_counter() - t0)
        print0(f"step:{step+1}/{train_steps} train_time:{approx_time:.0f}ms step_avg:{approx_time/timed_steps:.2f}ms", console=True)
    if master_process:
        param_names = list(param_name_to_grad_scale_map.keys())
        for name in param_names:
            grad_scale = param_name_to_grad_scale_map[name]
            weight_scale = param_name_to_weight_scale_map[name]
            print0(f"{name:<40} | weight_scale={weight_scale:<3} | grad_scale={grad_scale:<3}", console=True)

    print0(
        f"peak memory allocated: {torch.cuda.max_memory_allocated() // 1024 // 1024} MiB "
        f"reserved: {torch.cuda.max_memory_reserved() // 1024 // 1024} MiB",
        console=True,
    )
    dist.destroy_process_group()

if __name__ == "__main__":
    args = Hyperparameters()
    train(args)

====================================================================================================
Running Python 3.10.12 (main, Sep 11 2024, 15:47:36) [GCC 11.4.0]
Running PyTorch 2.7.0.dev20250125+cu126 compiled for CUDA 12.6
Sat Jan 25 23:08:48 2025       
+---------------------------------------------------------------------------------------+
| NVIDIA-SMI 535.183.06             Driver Version: 535.183.06   CUDA Version: 12.4     |
|-----------------------------------------+----------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |
|                                         |                      |               MIG M. |
|=========================================+======================+======================|
|   0  NVIDIA H100 80GB HBM3          On  | 00000000:19:00.0 Off |                    0 |
| N/A   38C    P0             121W / 700W |   7713MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   1  NVIDIA H100 80GB HBM3          On  | 00000000:3B:00.0 Off |                    0 |
| N/A   29C    P0             113W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   2  NVIDIA H100 80GB HBM3          On  | 00000000:4C:00.0 Off |                    0 |
| N/A   28C    P0             114W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   3  NVIDIA H100 80GB HBM3          On  | 00000000:5D:00.0 Off |                    0 |
| N/A   37C    P0             117W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   4  NVIDIA H100 80GB HBM3          On  | 00000000:9B:00.0 Off |                    0 |
| N/A   38C    P0             119W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   5  NVIDIA H100 80GB HBM3          On  | 00000000:BB:00.0 Off |                    0 |
| N/A   29C    P0             113W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   6  NVIDIA H100 80GB HBM3          On  | 00000000:CB:00.0 Off |                    0 |
| N/A   36C    P0             116W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   7  NVIDIA H100 80GB HBM3          On  | 00000000:DB:00.0 Off |                    0 |
| N/A   28C    P0             113W / 700W |   3211MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
                                                                                         
+---------------------------------------------------------------------------------------+
| Processes:                                                                            |
|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |
|        ID   ID                                                             Usage      |
|=======================================================================================|
+---------------------------------------------------------------------------------------+

====================================================================================================
step:0/1770 val_loss:10.8258 train_time:0ms step_avg:nanms
step:1/1770 train_time:23150ms step_avg:nanms
step:2/1770 train_time:23670ms step_avg:nanms
step:3/1770 train_time:23767ms step_avg:nanms
step:4/1770 train_time:23860ms step_avg:nanms
step:5/1770 train_time:23954ms step_avg:nanms
step:6/1770 train_time:24047ms step_avg:nanms
step:7/1770 train_time:24141ms step_avg:nanms
step:8/1770 train_time:24235ms step_avg:nanms
step:9/1770 train_time:24328ms step_avg:nanms
step:10/1770 train_time:24421ms step_avg:nanms
step:11/1770 train_time:94ms step_avg:nanms
step:12/1770 train_time:188ms step_avg:nanms
step:13/1770 train_time:282ms step_avg:94.03ms
step:14/1770 train_time:377ms step_avg:94.25ms
step:15/1770 train_time:472ms step_avg:94.42ms
step:16/1770 train_time:566ms step_avg:94.37ms
step:17/1770 train_time:660ms step_avg:94.26ms
step:18/1770 train_time:754ms step_avg:94.28ms
step:19/1770 train_time:848ms step_avg:94.24ms
step:20/1770 train_time:942ms step_avg:94.22ms
step:21/1770 train_time:1037ms step_avg:94.25ms
step:22/1770 train_time:1131ms step_avg:94.25ms
step:23/1770 train_time:1225ms step_avg:94.20ms
step:24/1770 train_time:1318ms step_avg:94.17ms
step:25/1770 train_time:1412ms step_avg:94.12ms
step:26/1770 train_time:1506ms step_avg:94.13ms
step:27/1770 train_time:1600ms step_avg:94.14ms
step:28/1770 train_time:1694ms step_avg:94.12ms
step:29/1770 train_time:1788ms step_avg:94.11ms
step:30/1770 train_time:1882ms step_avg:94.12ms
step:31/1770 train_time:1977ms step_avg:94.12ms
step:32/1770 train_time:2070ms step_avg:94.09ms
step:33/1770 train_time:2164ms step_avg:94.09ms
step:34/1770 train_time:2258ms step_avg:94.07ms
step:35/1770 train_time:2351ms step_avg:94.05ms
step:36/1770 train_time:2445ms step_avg:94.05ms
step:37/1770 train_time:2539ms step_avg:94.06ms
step:38/1770 train_time:2633ms step_avg:94.05ms
step:39/1770 train_time:2727ms step_avg:94.04ms
step:40/1770 train_time:2821ms step_avg:94.05ms
step:41/1770 train_time:2916ms step_avg:94.06ms
step:42/1770 train_time:3010ms step_avg:94.06ms
step:43/1770 train_time:3103ms step_avg:94.04ms
step:44/1770 train_time:3198ms step_avg:94.05ms
step:45/1770 train_time:3291ms step_avg:94.04ms
step:46/1770 train_time:3386ms step_avg:94.05ms
step:47/1770 train_time:3480ms step_avg:94.05ms
step:48/1770 train_time:3574ms step_avg:94.04ms
step:49/1770 train_time:3667ms step_avg:94.03ms
step:50/1770 train_time:3762ms step_avg:94.04ms
step:51/1770 train_time:3856ms step_avg:94.05ms
step:52/1770 train_time:3950ms step_avg:94.05ms
step:53/1770 train_time:4045ms step_avg:94.06ms
step:54/1770 train_time:4139ms step_avg:94.06ms
step:55/1770 train_time:4233ms step_avg:94.07ms
step:56/1770 train_time:4327ms step_avg:94.06ms
step:57/1770 train_time:4421ms step_avg:94.06ms
step:58/1770 train_time:4515ms step_avg:94.05ms
step:59/1770 train_time:4609ms step_avg:94.05ms
step:60/1770 train_time:4703ms step_avg:94.06ms
step:61/1770 train_time:4797ms step_avg:94.06ms
step:62/1770 train_time:4892ms step_avg:94.07ms
step:63/1770 train_time:4985ms step_avg:94.06ms
step:64/1770 train_time:5079ms step_avg:94.05ms
step:65/1770 train_time:5172ms step_avg:94.04ms
step:66/1770 train_time:5266ms step_avg:94.04ms
step:67/1770 train_time:5360ms step_avg:94.03ms
step:68/1770 train_time:5454ms step_avg:94.03ms
step:69/1770 train_time:5548ms step_avg:94.03ms
step:70/1770 train_time:5642ms step_avg:94.03ms
step:71/1770 train_time:5736ms step_avg:94.03ms
step:72/1770 train_time:5830ms step_avg:94.03ms
step:73/1770 train_time:5924ms step_avg:94.03ms
step:74/1770 train_time:6018ms step_avg:94.03ms
step:75/1770 train_time:6112ms step_avg:94.03ms
step:76/1770 train_time:6206ms step_avg:94.02ms
step:77/1770 train_time:6300ms step_avg:94.03ms
step:78/1770 train_time:6394ms step_avg:94.03ms
step:79/1770 train_time:6488ms step_avg:94.03ms
step:80/1770 train_time:6582ms step_avg:94.03ms
step:81/1770 train_time:6676ms step_avg:94.03ms
step:82/1770 train_time:6770ms step_avg:94.03ms
step:83/1770 train_time:6865ms step_avg:94.04ms
step:84/1770 train_time:6959ms step_avg:94.04ms
step:85/1770 train_time:7053ms step_avg:94.04ms
step:86/1770 train_time:7147ms step_avg:94.04ms
step:87/1770 train_time:7241ms step_avg:94.04ms
step:88/1770 train_time:7335ms step_avg:94.04ms
step:89/1770 train_time:7429ms step_avg:94.03ms
step:90/1770 train_time:7523ms step_avg:94.03ms
step:91/1770 train_time:7616ms step_avg:94.03ms
step:92/1770 train_time:7710ms step_avg:94.02ms
step:93/1770 train_time:7805ms step_avg:94.03ms
step:94/1770 train_time:7898ms step_avg:94.02ms
step:95/1770 train_time:7992ms step_avg:94.03ms
step:96/1770 train_time:8086ms step_avg:94.03ms
step:97/1770 train_time:8180ms step_avg:94.02ms
step:98/1770 train_time:8274ms step_avg:94.03ms
step:99/1770 train_time:8368ms step_avg:94.02ms
step:100/1770 train_time:8462ms step_avg:94.03ms
step:101/1770 train_time:8556ms step_avg:94.02ms
step:102/1770 train_time:8650ms step_avg:94.02ms
step:103/1770 train_time:8744ms step_avg:94.02ms
step:104/1770 train_time:8837ms step_avg:94.01ms
step:105/1770 train_time:8931ms step_avg:94.01ms
step:106/1770 train_time:9025ms step_avg:94.01ms
step:107/1770 train_time:9119ms step_avg:94.01ms
step:108/1770 train_time:9214ms step_avg:94.02ms
step:109/1770 train_time:9307ms step_avg:94.01ms
step:110/1770 train_time:9401ms step_avg:94.01ms
step:111/1770 train_time:9495ms step_avg:94.01ms
step:112/1770 train_time:9590ms step_avg:94.01ms
step:113/1770 train_time:9683ms step_avg:94.01ms
step:114/1770 train_time:9777ms step_avg:94.01ms
step:115/1770 train_time:9871ms step_avg:94.01ms
step:116/1770 train_time:9965ms step_avg:94.01ms
step:117/1770 train_time:10059ms step_avg:94.01ms
step:118/1770 train_time:10153ms step_avg:94.01ms
step:119/1770 train_time:10247ms step_avg:94.01ms
step:120/1770 train_time:10341ms step_avg:94.01ms
step:121/1770 train_time:10435ms step_avg:94.01ms
step:122/1770 train_time:10529ms step_avg:94.01ms
step:123/1770 train_time:10623ms step_avg:94.01ms
step:124/1770 train_time:10717ms step_avg:94.01ms
step:125/1770 train_time:10811ms step_avg:94.01ms
step:125/1770 val_loss:4.6542 train_time:10903ms step_avg:94.81ms
step:126/1770 train_time:10928ms step_avg:94.20ms
step:127/1770 train_time:11001ms step_avg:94.03ms
step:128/1770 train_time:11101ms step_avg:94.08ms
step:129/1770 train_time:11203ms step_avg:94.14ms
step:130/1770 train_time:11299ms step_avg:94.16ms
step:131/1770 train_time:11393ms step_avg:94.15ms
step:132/1770 train_time:11486ms step_avg:94.15ms
step:133/1770 train_time:11579ms step_avg:94.14ms
step:134/1770 train_time:11674ms step_avg:94.14ms
step:135/1770 train_time:11768ms step_avg:94.14ms
step:136/1770 train_time:11862ms step_avg:94.14ms
step:137/1770 train_time:11957ms step_avg:94.15ms
step:138/1770 train_time:12051ms step_avg:94.15ms
step:139/1770 train_time:12147ms step_avg:94.16ms
step:140/1770 train_time:12243ms step_avg:94.18ms
step:141/1770 train_time:12337ms step_avg:94.18ms
step:142/1770 train_time:12432ms step_avg:94.18ms
step:143/1770 train_time:12526ms step_avg:94.18ms
step:144/1770 train_time:12620ms step_avg:94.18ms
step:145/1770 train_time:12715ms step_avg:94.18ms
step:146/1770 train_time:12809ms step_avg:94.18ms
step:147/1770 train_time:12903ms step_avg:94.18ms
step:148/1770 train_time:12997ms step_avg:94.18ms
step:149/1770 train_time:13091ms step_avg:94.18ms
step:150/1770 train_time:13186ms step_avg:94.18ms
step:151/1770 train_time:13281ms step_avg:94.19ms
step:152/1770 train_time:13376ms step_avg:94.19ms
step:153/1770 train_time:13471ms step_avg:94.20ms
step:154/1770 train_time:13565ms step_avg:94.20ms
step:155/1770 train_time:13660ms step_avg:94.20ms
step:156/1770 train_time:13754ms step_avg:94.21ms
step:157/1770 train_time:13849ms step_avg:94.21ms
step:158/1770 train_time:13943ms step_avg:94.21ms
step:159/1770 train_time:14038ms step_avg:94.22ms
step:160/1770 train_time:14133ms step_avg:94.22ms
step:161/1770 train_time:14228ms step_avg:94.22ms
step:162/1770 train_time:14323ms step_avg:94.23ms
step:163/1770 train_time:14417ms step_avg:94.23ms
step:164/1770 train_time:14513ms step_avg:94.24ms
step:165/1770 train_time:14608ms step_avg:94.25ms
step:166/1770 train_time:14703ms step_avg:94.25ms
step:167/1770 train_time:14797ms step_avg:94.25ms
step:168/1770 train_time:14892ms step_avg:94.25ms
step:169/1770 train_time:14986ms step_avg:94.25ms
step:170/1770 train_time:15080ms step_avg:94.25ms
step:171/1770 train_time:15174ms step_avg:94.25ms
step:172/1770 train_time:15269ms step_avg:94.25ms
step:173/1770 train_time:15363ms step_avg:94.25ms
step:174/1770 train_time:15458ms step_avg:94.26ms
step:175/1770 train_time:15553ms step_avg:94.26ms
step:176/1770 train_time:15648ms step_avg:94.26ms
step:177/1770 train_time:15742ms step_avg:94.26ms
step:178/1770 train_time:15836ms step_avg:94.26ms
step:179/1770 train_time:15931ms step_avg:94.27ms
step:180/1770 train_time:16026ms step_avg:94.27ms
step:181/1770 train_time:16121ms step_avg:94.27ms
step:182/1770 train_time:16215ms step_avg:94.28ms
step:183/1770 train_time:16310ms step_avg:94.28ms
step:184/1770 train_time:16405ms step_avg:94.28ms
step:185/1770 train_time:16500ms step_avg:94.28ms
step:186/1770 train_time:16594ms step_avg:94.29ms
step:187/1770 train_time:16689ms step_avg:94.29ms
step:188/1770 train_time:16784ms step_avg:94.29ms
step:189/1770 train_time:16878ms step_avg:94.29ms
step:190/1770 train_time:16973ms step_avg:94.29ms
step:191/1770 train_time:17068ms step_avg:94.30ms
step:192/1770 train_time:17163ms step_avg:94.30ms
step:193/1770 train_time:17257ms step_avg:94.30ms
step:194/1770 train_time:17352ms step_avg:94.30ms
step:195/1770 train_time:17446ms step_avg:94.30ms
step:196/1770 train_time:17541ms step_avg:94.31ms
step:197/1770 train_time:17636ms step_avg:94.31ms
step:198/1770 train_time:17731ms step_avg:94.31ms
step:199/1770 train_time:17825ms step_avg:94.31ms
step:200/1770 train_time:17919ms step_avg:94.31ms
step:201/1770 train_time:18014ms step_avg:94.31ms
step:202/1770 train_time:18108ms step_avg:94.31ms
step:203/1770 train_time:18203ms step_avg:94.31ms
step:204/1770 train_time:18297ms step_avg:94.31ms
step:205/1770 train_time:18392ms step_avg:94.32ms
step:206/1770 train_time:18486ms step_avg:94.32ms
step:207/1770 train_time:18581ms step_avg:94.32ms
step:208/1770 train_time:18675ms step_avg:94.32ms
step:209/1770 train_time:18770ms step_avg:94.32ms
step:210/1770 train_time:18865ms step_avg:94.32ms
step:211/1770 train_time:18959ms step_avg:94.32ms
step:212/1770 train_time:19053ms step_avg:94.32ms
step:213/1770 train_time:19148ms step_avg:94.32ms
step:214/1770 train_time:19242ms step_avg:94.33ms
step:215/1770 train_time:19337ms step_avg:94.32ms
step:216/1770 train_time:19431ms step_avg:94.32ms
step:217/1770 train_time:19526ms step_avg:94.33ms
step:218/1770 train_time:19620ms step_avg:94.33ms
step:219/1770 train_time:19715ms step_avg:94.33ms
step:220/1770 train_time:19810ms step_avg:94.33ms
step:221/1770 train_time:19904ms step_avg:94.33ms
step:222/1770 train_time:19999ms step_avg:94.33ms
step:223/1770 train_time:20093ms step_avg:94.33ms
step:224/1770 train_time:20188ms step_avg:94.33ms
step:225/1770 train_time:20283ms step_avg:94.34ms
step:226/1770 train_time:20378ms step_avg:94.34ms
step:227/1770 train_time:20472ms step_avg:94.34ms
step:228/1770 train_time:20567ms step_avg:94.35ms
step:229/1770 train_time:20663ms step_avg:94.35ms
step:230/1770 train_time:20757ms step_avg:94.35ms
step:231/1770 train_time:20851ms step_avg:94.35ms
step:232/1770 train_time:20946ms step_avg:94.35ms
step:233/1770 train_time:21041ms step_avg:94.35ms
step:234/1770 train_time:21135ms step_avg:94.35ms
step:235/1770 train_time:21230ms step_avg:94.35ms
step:236/1770 train_time:21324ms step_avg:94.35ms
step:237/1770 train_time:21419ms step_avg:94.36ms
step:238/1770 train_time:21513ms step_avg:94.36ms
step:239/1770 train_time:21608ms step_avg:94.36ms
step:240/1770 train_time:21702ms step_avg:94.36ms
step:241/1770 train_time:21797ms step_avg:94.36ms
step:242/1770 train_time:21892ms step_avg:94.36ms
step:243/1770 train_time:21987ms step_avg:94.36ms
step:244/1770 train_time:22082ms step_avg:94.37ms
step:245/1770 train_time:22176ms step_avg:94.36ms
step:246/1770 train_time:22270ms step_avg:94.37ms
step:247/1770 train_time:22365ms step_avg:94.37ms
step:248/1770 train_time:22459ms step_avg:94.37ms
step:249/1770 train_time:22554ms step_avg:94.37ms
step:250/1770 train_time:22649ms step_avg:94.37ms
step:250/1770 val_loss:4.1090 train_time:22742ms step_avg:94.76ms
step:251/1770 train_time:22767ms step_avg:94.47ms
step:252/1770 train_time:22849ms step_avg:94.42ms
step:253/1770 train_time:22949ms step_avg:94.44ms
step:254/1770 train_time:23045ms step_avg:94.45ms
step:255/1770 train_time:23140ms step_avg:94.45ms
step:256/1770 train_time:23234ms step_avg:94.45ms
step:257/1770 train_time:23328ms step_avg:94.45ms
step:258/1770 train_time:23423ms step_avg:94.45ms
step:259/1770 train_time:23516ms step_avg:94.44ms
step:260/1770 train_time:23611ms step_avg:94.44ms
step:261/1770 train_time:23705ms step_avg:94.44ms
step:262/1770 train_time:23800ms step_avg:94.44ms
step:263/1770 train_time:23896ms step_avg:94.45ms
step:264/1770 train_time:23991ms step_avg:94.45ms
step:265/1770 train_time:24087ms step_avg:94.46ms
step:266/1770 train_time:24182ms step_avg:94.46ms
step:267/1770 train_time:24278ms step_avg:94.47ms
step:268/1770 train_time:24373ms step_avg:94.47ms
step:269/1770 train_time:24467ms step_avg:94.47ms
step:270/1770 train_time:24562ms step_avg:94.47ms
step:271/1770 train_time:24657ms step_avg:94.47ms
step:272/1770 train_time:24752ms step_avg:94.47ms
step:273/1770 train_time:24847ms step_avg:94.48ms
step:274/1770 train_time:24943ms step_avg:94.48ms
step:275/1770 train_time:25038ms step_avg:94.48ms
step:276/1770 train_time:25133ms step_avg:94.49ms
step:277/1770 train_time:25229ms step_avg:94.49ms
step:278/1770 train_time:25323ms step_avg:94.49ms
step:279/1770 train_time:25418ms step_avg:94.49ms
step:280/1770 train_time:25513ms step_avg:94.49ms
step:281/1770 train_time:25608ms step_avg:94.49ms
step:282/1770 train_time:25703ms step_avg:94.49ms
step:283/1770 train_time:25798ms step_avg:94.50ms
step:284/1770 train_time:25893ms step_avg:94.50ms
step:285/1770 train_time:25988ms step_avg:94.50ms
step:286/1770 train_time:26083ms step_avg:94.50ms
step:287/1770 train_time:26178ms step_avg:94.51ms
step:288/1770 train_time:26273ms step_avg:94.51ms
step:289/1770 train_time:26368ms step_avg:94.51ms
step:290/1770 train_time:26463ms step_avg:94.51ms
step:291/1770 train_time:26558ms step_avg:94.51ms
step:292/1770 train_time:26653ms step_avg:94.51ms
step:293/1770 train_time:26748ms step_avg:94.51ms
step:294/1770 train_time:26843ms step_avg:94.52ms
step:295/1770 train_time:26939ms step_avg:94.52ms
step:296/1770 train_time:27033ms step_avg:94.52ms
step:297/1770 train_time:27129ms step_avg:94.52ms
step:298/1770 train_time:27224ms step_avg:94.53ms
step:299/1770 train_time:27319ms step_avg:94.53ms
step:300/1770 train_time:27415ms step_avg:94.53ms
step:301/1770 train_time:27509ms step_avg:94.53ms
step:302/1770 train_time:27604ms step_avg:94.53ms
step:303/1770 train_time:27699ms step_avg:94.54ms
step:304/1770 train_time:27794ms step_avg:94.54ms
step:305/1770 train_time:27889ms step_avg:94.54ms
step:306/1770 train_time:27984ms step_avg:94.54ms
step:307/1770 train_time:28079ms step_avg:94.54ms
step:308/1770 train_time:28175ms step_avg:94.55ms
step:309/1770 train_time:28269ms step_avg:94.55ms
step:310/1770 train_time:28365ms step_avg:94.55ms
step:311/1770 train_time:28460ms step_avg:94.55ms
step:312/1770 train_time:28555ms step_avg:94.55ms
step:313/1770 train_time:28651ms step_avg:94.56ms
step:314/1770 train_time:28746ms step_avg:94.56ms
step:315/1770 train_time:28841ms step_avg:94.56ms
step:316/1770 train_time:28935ms step_avg:94.56ms
step:317/1770 train_time:29030ms step_avg:94.56ms
step:318/1770 train_time:29125ms step_avg:94.56ms
step:319/1770 train_time:29221ms step_avg:94.57ms
step:320/1770 train_time:29316ms step_avg:94.57ms
step:321/1770 train_time:29410ms step_avg:94.57ms
step:322/1770 train_time:29505ms step_avg:94.57ms
step:323/1770 train_time:29601ms step_avg:94.57ms
step:324/1770 train_time:29696ms step_avg:94.57ms
step:325/1770 train_time:29791ms step_avg:94.57ms
step:326/1770 train_time:29886ms step_avg:94.58ms
step:327/1770 train_time:29982ms step_avg:94.58ms
step:328/1770 train_time:30077ms step_avg:94.58ms
step:329/1770 train_time:30172ms step_avg:94.58ms
step:330/1770 train_time:30267ms step_avg:94.58ms
step:331/1770 train_time:30362ms step_avg:94.59ms
step:332/1770 train_time:30458ms step_avg:94.59ms
step:333/1770 train_time:30553ms step_avg:94.59ms
step:334/1770 train_time:30647ms step_avg:94.59ms
step:335/1770 train_time:30743ms step_avg:94.59ms
step:336/1770 train_time:30838ms step_avg:94.59ms
step:337/1770 train_time:30933ms step_avg:94.60ms
step:338/1770 train_time:31027ms step_avg:94.60ms
step:339/1770 train_time:31123ms step_avg:94.60ms
step:340/1770 train_time:31218ms step_avg:94.60ms
step:341/1770 train_time:31313ms step_avg:94.60ms
step:342/1770 train_time:31408ms step_avg:94.60ms
step:343/1770 train_time:31504ms step_avg:94.61ms
step:344/1770 train_time:31599ms step_avg:94.61ms
step:345/1770 train_time:31695ms step_avg:94.61ms
step:346/1770 train_time:31789ms step_avg:94.61ms
step:347/1770 train_time:31884ms step_avg:94.61ms
step:348/1770 train_time:31980ms step_avg:94.62ms
step:349/1770 train_time:32075ms step_avg:94.62ms
step:350/1770 train_time:32170ms step_avg:94.62ms
step:351/1770 train_time:32265ms step_avg:94.62ms
step:352/1770 train_time:32361ms step_avg:94.62ms
step:353/1770 train_time:32456ms step_avg:94.62ms
step:354/1770 train_time:32551ms step_avg:94.63ms
step:355/1770 train_time:32647ms step_avg:94.63ms
step:356/1770 train_time:32742ms step_avg:94.63ms
step:357/1770 train_time:32837ms step_avg:94.63ms
step:358/1770 train_time:32932ms step_avg:94.63ms
step:359/1770 train_time:33028ms step_avg:94.63ms
step:360/1770 train_time:33122ms step_avg:94.64ms
step:361/1770 train_time:33218ms step_avg:94.64ms
step:362/1770 train_time:33313ms step_avg:94.64ms
step:363/1770 train_time:33408ms step_avg:94.64ms
step:364/1770 train_time:33504ms step_avg:94.64ms
step:365/1770 train_time:33599ms step_avg:94.65ms
step:366/1770 train_time:33695ms step_avg:94.65ms
step:367/1770 train_time:33789ms step_avg:94.65ms
step:368/1770 train_time:33885ms step_avg:94.65ms
step:369/1770 train_time:33980ms step_avg:94.65ms
step:370/1770 train_time:34075ms step_avg:94.65ms
step:371/1770 train_time:34170ms step_avg:94.65ms
step:372/1770 train_time:34265ms step_avg:94.65ms
step:373/1770 train_time:34360ms step_avg:94.66ms
step:374/1770 train_time:34455ms step_avg:94.66ms
step:375/1770 train_time:34550ms step_avg:94.66ms
step:375/1770 val_loss:3.9037 train_time:34643ms step_avg:94.91ms
step:376/1770 train_time:34666ms step_avg:94.72ms
step:377/1770 train_time:34751ms step_avg:94.69ms
step:378/1770 train_time:34849ms step_avg:94.70ms
step:379/1770 train_time:34945ms step_avg:94.70ms
step:380/1770 train_time:35040ms step_avg:94.70ms
step:381/1770 train_time:35135ms step_avg:94.70ms
step:382/1770 train_time:35230ms step_avg:94.70ms
step:383/1770 train_time:35324ms step_avg:94.70ms
step:384/1770 train_time:35419ms step_avg:94.70ms
step:385/1770 train_time:35514ms step_avg:94.70ms
step:386/1770 train_time:35609ms step_avg:94.70ms
step:387/1770 train_time:35705ms step_avg:94.71ms
step:388/1770 train_time:35801ms step_avg:94.71ms
step:389/1770 train_time:35898ms step_avg:94.72ms
step:390/1770 train_time:35993ms step_avg:94.72ms
step:391/1770 train_time:36087ms step_avg:94.72ms
step:392/1770 train_time:36183ms step_avg:94.72ms
step:393/1770 train_time:36278ms step_avg:94.72ms
step:394/1770 train_time:36372ms step_avg:94.72ms
step:395/1770 train_time:36467ms step_avg:94.72ms
step:396/1770 train_time:36564ms step_avg:94.72ms
step:397/1770 train_time:36661ms step_avg:94.73ms
step:398/1770 train_time:36758ms step_avg:94.74ms
step:399/1770 train_time:36855ms step_avg:94.74ms
step:400/1770 train_time:36953ms step_avg:94.75ms
step:401/1770 train_time:37050ms step_avg:94.76ms
step:402/1770 train_time:37146ms step_avg:94.76ms
step:403/1770 train_time:37244ms step_avg:94.77ms
step:404/1770 train_time:37341ms step_avg:94.77ms
step:405/1770 train_time:37438ms step_avg:94.78ms
step:406/1770 train_time:37536ms step_avg:94.79ms
step:407/1770 train_time:37633ms step_avg:94.79ms
step:408/1770 train_time:37729ms step_avg:94.80ms
step:409/1770 train_time:37827ms step_avg:94.80ms
step:410/1770 train_time:37925ms step_avg:94.81ms
step:411/1770 train_time:38023ms step_avg:94.82ms
step:412/1770 train_time:38119ms step_avg:94.82ms
step:413/1770 train_time:38216ms step_avg:94.83ms
step:414/1770 train_time:38313ms step_avg:94.83ms
step:415/1770 train_time:38410ms step_avg:94.84ms
step:416/1770 train_time:38507ms step_avg:94.84ms
step:417/1770 train_time:38604ms step_avg:94.85ms
step:418/1770 train_time:38701ms step_avg:94.86ms
step:419/1770 train_time:38798ms step_avg:94.86ms
step:420/1770 train_time:38896ms step_avg:94.87ms
step:421/1770 train_time:38993ms step_avg:94.87ms
step:422/1770 train_time:39090ms step_avg:94.88ms
step:423/1770 train_time:39187ms step_avg:94.88ms
step:424/1770 train_time:39284ms step_avg:94.89ms
step:425/1770 train_time:39381ms step_avg:94.89ms
step:426/1770 train_time:39478ms step_avg:94.90ms
step:427/1770 train_time:39575ms step_avg:94.90ms
step:428/1770 train_time:39671ms step_avg:94.91ms
step:429/1770 train_time:39768ms step_avg:94.91ms
step:430/1770 train_time:39866ms step_avg:94.92ms
step:431/1770 train_time:39964ms step_avg:94.93ms
step:432/1770 train_time:40061ms step_avg:94.93ms
step:433/1770 train_time:40159ms step_avg:94.94ms
step:434/1770 train_time:40257ms step_avg:94.95ms
step:435/1770 train_time:40354ms step_avg:94.95ms
step:436/1770 train_time:40451ms step_avg:94.96ms
step:437/1770 train_time:40548ms step_avg:94.96ms
step:438/1770 train_time:40645ms step_avg:94.96ms
step:439/1770 train_time:40742ms step_avg:94.97ms
step:440/1770 train_time:40840ms step_avg:94.98ms
step:441/1770 train_time:40937ms step_avg:94.98ms
step:442/1770 train_time:41034ms step_avg:94.99ms
step:443/1770 train_time:41132ms step_avg:94.99ms
step:444/1770 train_time:41229ms step_avg:95.00ms
step:445/1770 train_time:41326ms step_avg:95.00ms
step:446/1770 train_time:41423ms step_avg:95.01ms
step:447/1770 train_time:41520ms step_avg:95.01ms
step:448/1770 train_time:41617ms step_avg:95.02ms
step:449/1770 train_time:41714ms step_avg:95.02ms
step:450/1770 train_time:41812ms step_avg:95.03ms
step:451/1770 train_time:41909ms step_avg:95.03ms
step:452/1770 train_time:42006ms step_avg:95.04ms
step:453/1770 train_time:42104ms step_avg:95.04ms
step:454/1770 train_time:42201ms step_avg:95.05ms
step:455/1770 train_time:42298ms step_avg:95.05ms
step:456/1770 train_time:42395ms step_avg:95.06ms
step:457/1770 train_time:42491ms step_avg:95.06ms
step:458/1770 train_time:42588ms step_avg:95.06ms
step:459/1770 train_time:42685ms step_avg:95.07ms
step:460/1770 train_time:42782ms step_avg:95.07ms
step:461/1770 train_time:42880ms step_avg:95.08ms
step:462/1770 train_time:42977ms step_avg:95.08ms
step:463/1770 train_time:43074ms step_avg:95.09ms
step:464/1770 train_time:43171ms step_avg:95.09ms
step:465/1770 train_time:43268ms step_avg:95.09ms
step:466/1770 train_time:43365ms step_avg:95.10ms
step:467/1770 train_time:43463ms step_avg:95.10ms
step:468/1770 train_time:43560ms step_avg:95.11ms
step:469/1770 train_time:43657ms step_avg:95.11ms
step:470/1770 train_time:43754ms step_avg:95.12ms
step:471/1770 train_time:43851ms step_avg:95.12ms
step:472/1770 train_time:43949ms step_avg:95.13ms
step:473/1770 train_time:44046ms step_avg:95.13ms
step:474/1770 train_time:44144ms step_avg:95.14ms
step:475/1770 train_time:44240ms step_avg:95.14ms
step:476/1770 train_time:44338ms step_avg:95.15ms
step:477/1770 train_time:44434ms step_avg:95.15ms
step:478/1770 train_time:44531ms step_avg:95.15ms
step:479/1770 train_time:44628ms step_avg:95.16ms
step:480/1770 train_time:44725ms step_avg:95.16ms
step:481/1770 train_time:44823ms step_avg:95.17ms
step:482/1770 train_time:44921ms step_avg:95.17ms
step:483/1770 train_time:45018ms step_avg:95.18ms
step:484/1770 train_time:45115ms step_avg:95.18ms
step:485/1770 train_time:45212ms step_avg:95.18ms
step:486/1770 train_time:45309ms step_avg:95.19ms
step:487/1770 train_time:45406ms step_avg:95.19ms
step:488/1770 train_time:45504ms step_avg:95.20ms
step:489/1770 train_time:45601ms step_avg:95.20ms
step:490/1770 train_time:45698ms step_avg:95.21ms
step:491/1770 train_time:45796ms step_avg:95.21ms
step:492/1770 train_time:45893ms step_avg:95.21ms
step:493/1770 train_time:45989ms step_avg:95.22ms
step:494/1770 train_time:46086ms step_avg:95.22ms
step:495/1770 train_time:46183ms step_avg:95.22ms
step:496/1770 train_time:46281ms step_avg:95.23ms
step:497/1770 train_time:46378ms step_avg:95.23ms
step:498/1770 train_time:46475ms step_avg:95.23ms
step:499/1770 train_time:46571ms step_avg:95.24ms
step:500/1770 train_time:46668ms step_avg:95.24ms
step:500/1770 val_loss:3.7528 train_time:46764ms step_avg:95.44ms
step:501/1770 train_time:46786ms step_avg:95.29ms
step:502/1770 train_time:46875ms step_avg:95.27ms
step:503/1770 train_time:46977ms step_avg:95.29ms
step:504/1770 train_time:47075ms step_avg:95.29ms
step:505/1770 train_time:47171ms step_avg:95.30ms
step:506/1770 train_time:47268ms step_avg:95.30ms
step:507/1770 train_time:47364ms step_avg:95.30ms
step:508/1770 train_time:47461ms step_avg:95.30ms
step:509/1770 train_time:47558ms step_avg:95.31ms
step:510/1770 train_time:47654ms step_avg:95.31ms
step:511/1770 train_time:47750ms step_avg:95.31ms
step:512/1770 train_time:47848ms step_avg:95.31ms
step:513/1770 train_time:47947ms step_avg:95.32ms
step:514/1770 train_time:48044ms step_avg:95.33ms
step:515/1770 train_time:48141ms step_avg:95.33ms
step:516/1770 train_time:48238ms step_avg:95.33ms
step:517/1770 train_time:48334ms step_avg:95.33ms
step:518/1770 train_time:48431ms step_avg:95.34ms
step:519/1770 train_time:48528ms step_avg:95.34ms
step:520/1770 train_time:48625ms step_avg:95.34ms
step:521/1770 train_time:48721ms step_avg:95.35ms
step:522/1770 train_time:48818ms step_avg:95.35ms
step:523/1770 train_time:48915ms step_avg:95.35ms
step:524/1770 train_time:49013ms step_avg:95.36ms
step:525/1770 train_time:49112ms step_avg:95.36ms
step:526/1770 train_time:49210ms step_avg:95.37ms
step:527/1770 train_time:49307ms step_avg:95.37ms
step:528/1770 train_time:49404ms step_avg:95.37ms
step:529/1770 train_time:49502ms step_avg:95.38ms
step:530/1770 train_time:49599ms step_avg:95.38ms
step:531/1770 train_time:49696ms step_avg:95.38ms
step:532/1770 train_time:49793ms step_avg:95.39ms
step:533/1770 train_time:49890ms step_avg:95.39ms
step:534/1770 train_time:49987ms step_avg:95.40ms
step:535/1770 train_time:50085ms step_avg:95.40ms
step:536/1770 train_time:50182ms step_avg:95.40ms
step:537/1770 train_time:50280ms step_avg:95.41ms
step:538/1770 train_time:50378ms step_avg:95.41ms
step:539/1770 train_time:50475ms step_avg:95.42ms
step:540/1770 train_time:50573ms step_avg:95.42ms
step:541/1770 train_time:50670ms step_avg:95.42ms
step:542/1770 train_time:50767ms step_avg:95.43ms
step:543/1770 train_time:50864ms step_avg:95.43ms
step:544/1770 train_time:50962ms step_avg:95.43ms
step:545/1770 train_time:51060ms step_avg:95.44ms
step:546/1770 train_time:51157ms step_avg:95.44ms
step:547/1770 train_time:51255ms step_avg:95.45ms
step:548/1770 train_time:51352ms step_avg:95.45ms
step:549/1770 train_time:51450ms step_avg:95.45ms
step:550/1770 train_time:51547ms step_avg:95.46ms
step:551/1770 train_time:51645ms step_avg:95.46ms
step:552/1770 train_time:51742ms step_avg:95.47ms
step:553/1770 train_time:51840ms step_avg:95.47ms
step:554/1770 train_time:51937ms step_avg:95.47ms
step:555/1770 train_time:52034ms step_avg:95.48ms
step:556/1770 train_time:52132ms step_avg:95.48ms
step:557/1770 train_time:52230ms step_avg:95.48ms
step:558/1770 train_time:52327ms step_avg:95.49ms
step:559/1770 train_time:52425ms step_avg:95.49ms
step:560/1770 train_time:52522ms step_avg:95.49ms
step:561/1770 train_time:52619ms step_avg:95.50ms
step:562/1770 train_time:52716ms step_avg:95.50ms
step:563/1770 train_time:52813ms step_avg:95.50ms
step:564/1770 train_time:52911ms step_avg:95.51ms
step:565/1770 train_time:53009ms step_avg:95.51ms
step:566/1770 train_time:53106ms step_avg:95.51ms
step:567/1770 train_time:53203ms step_avg:95.52ms
step:568/1770 train_time:53300ms step_avg:95.52ms
step:569/1770 train_time:53398ms step_avg:95.52ms
step:570/1770 train_time:53496ms step_avg:95.53ms
step:571/1770 train_time:53593ms step_avg:95.53ms
step:572/1770 train_time:53690ms step_avg:95.53ms
step:573/1770 train_time:53787ms step_avg:95.54ms
step:574/1770 train_time:53884ms step_avg:95.54ms
step:575/1770 train_time:53981ms step_avg:95.54ms
step:576/1770 train_time:54078ms step_avg:95.54ms
step:577/1770 train_time:54175ms step_avg:95.55ms
step:578/1770 train_time:54273ms step_avg:95.55ms
step:579/1770 train_time:54371ms step_avg:95.56ms
step:580/1770 train_time:54468ms step_avg:95.56ms
step:581/1770 train_time:54566ms step_avg:95.56ms
step:582/1770 train_time:54664ms step_avg:95.57ms
step:583/1770 train_time:54761ms step_avg:95.57ms
step:584/1770 train_time:54858ms step_avg:95.57ms
step:585/1770 train_time:54955ms step_avg:95.57ms
step:586/1770 train_time:55052ms step_avg:95.58ms
step:587/1770 train_time:55149ms step_avg:95.58ms
step:588/1770 train_time:55247ms step_avg:95.58ms
step:589/1770 train_time:55344ms step_avg:95.59ms
step:590/1770 train_time:55441ms step_avg:95.59ms
step:591/1770 train_time:55539ms step_avg:95.59ms
step:592/1770 train_time:55636ms step_avg:95.59ms
step:593/1770 train_time:55734ms step_avg:95.60ms
step:594/1770 train_time:55832ms step_avg:95.60ms
step:595/1770 train_time:55930ms step_avg:95.61ms
step:596/1770 train_time:56027ms step_avg:95.61ms
step:597/1770 train_time:56125ms step_avg:95.61ms
step:598/1770 train_time:56222ms step_avg:95.62ms
step:599/1770 train_time:56319ms step_avg:95.62ms
step:600/1770 train_time:56416ms step_avg:95.62ms
step:601/1770 train_time:56513ms step_avg:95.62ms
step:602/1770 train_time:56611ms step_avg:95.63ms
step:603/1770 train_time:56708ms step_avg:95.63ms
step:604/1770 train_time:56806ms step_avg:95.63ms
step:605/1770 train_time:56903ms step_avg:95.64ms
step:606/1770 train_time:57001ms step_avg:95.64ms
step:607/1770 train_time:57098ms step_avg:95.64ms
step:608/1770 train_time:57196ms step_avg:95.65ms
step:609/1770 train_time:57293ms step_avg:95.65ms
step:610/1770 train_time:57391ms step_avg:95.65ms
step:611/1770 train_time:57488ms step_avg:95.65ms
step:612/1770 train_time:57585ms step_avg:95.66ms
step:613/1770 train_time:57683ms step_avg:95.66ms
step:614/1770 train_time:57780ms step_avg:95.66ms
step:615/1770 train_time:57877ms step_avg:95.66ms
step:616/1770 train_time:57974ms step_avg:95.67ms
step:617/1770 train_time:58072ms step_avg:95.67ms
step:618/1770 train_time:58170ms step_avg:95.67ms
step:619/1770 train_time:58267ms step_avg:95.68ms
step:620/1770 train_time:58365ms step_avg:95.68ms
step:621/1770 train_time:58462ms step_avg:95.68ms
step:622/1770 train_time:58559ms step_avg:95.69ms
step:623/1770 train_time:58657ms step_avg:95.69ms
step:624/1770 train_time:58754ms step_avg:95.69ms
step:625/1770 train_time:58852ms step_avg:95.69ms
step:625/1770 val_loss:3.6661 train_time:58947ms step_avg:95.85ms
step:626/1770 train_time:58969ms step_avg:95.73ms
step:627/1770 train_time:59059ms step_avg:95.72ms
step:628/1770 train_time:59159ms step_avg:95.73ms
step:629/1770 train_time:59257ms step_avg:95.73ms
step:630/1770 train_time:59355ms step_avg:95.73ms
step:631/1770 train_time:59452ms step_avg:95.74ms
step:632/1770 train_time:59548ms step_avg:95.74ms
step:633/1770 train_time:59645ms step_avg:95.74ms
step:634/1770 train_time:59742ms step_avg:95.74ms
step:635/1770 train_time:59839ms step_avg:95.74ms
step:636/1770 train_time:59936ms step_avg:95.74ms
step:637/1770 train_time:60033ms step_avg:95.75ms
step:638/1770 train_time:60131ms step_avg:95.75ms
step:639/1770 train_time:60229ms step_avg:95.75ms
step:640/1770 train_time:60327ms step_avg:95.76ms
step:641/1770 train_time:60424ms step_avg:95.76ms
step:642/1770 train_time:60521ms step_avg:95.76ms
step:643/1770 train_time:60618ms step_avg:95.76ms
step:644/1770 train_time:60716ms step_avg:95.77ms
step:645/1770 train_time:60813ms step_avg:95.77ms
step:646/1770 train_time:60910ms step_avg:95.77ms
step:647/1770 train_time:61008ms step_avg:95.77ms
step:648/1770 train_time:61105ms step_avg:95.78ms
step:649/1770 train_time:61203ms step_avg:95.78ms
step:650/1770 train_time:61301ms step_avg:95.78ms
step:651/1770 train_time:61398ms step_avg:95.79ms
step:652/1770 train_time:61496ms step_avg:95.79ms
step:653/1770 train_time:61593ms step_avg:95.79ms
step:654/1770 train_time:61691ms step_avg:95.79ms
step:655/1770 train_time:61788ms step_avg:95.80ms
step:656/1770 train_time:61885ms step_avg:95.80ms
step:657/1770 train_time:61982ms step_avg:95.80ms
step:658/1770 train_time:62081ms step_avg:95.80ms
step:659/1770 train_time:62180ms step_avg:95.81ms
step:660/1770 train_time:62280ms step_avg:95.81ms
step:661/1770 train_time:62379ms step_avg:95.82ms
step:662/1770 train_time:62478ms step_avg:95.83ms
step:663/1770 train_time:62577ms step_avg:95.83ms
step:664/1770 train_time:62676ms step_avg:95.83ms
step:665/1770 train_time:62776ms step_avg:95.84ms
step:666/1770 train_time:62876ms step_avg:95.85ms
step:667/1770 train_time:62976ms step_avg:95.85ms
step:668/1770 train_time:63076ms step_avg:95.86ms
step:669/1770 train_time:63175ms step_avg:95.87ms
step:670/1770 train_time:63275ms step_avg:95.87ms
step:671/1770 train_time:63374ms step_avg:95.88ms
step:672/1770 train_time:63473ms step_avg:95.88ms
step:673/1770 train_time:63573ms step_avg:95.89ms
step:674/1770 train_time:63672ms step_avg:95.89ms
step:675/1770 train_time:63771ms step_avg:95.90ms
step:676/1770 train_time:63870ms step_avg:95.90ms
step:677/1770 train_time:63970ms step_avg:95.91ms
step:678/1770 train_time:64070ms step_avg:95.91ms
step:679/1770 train_time:64170ms step_avg:95.92ms
step:680/1770 train_time:64269ms step_avg:95.92ms
step:681/1770 train_time:64367ms step_avg:95.93ms
step:682/1770 train_time:64467ms step_avg:95.93ms
step:683/1770 train_time:64567ms step_avg:95.94ms
step:684/1770 train_time:64666ms step_avg:95.94ms
step:685/1770 train_time:64765ms step_avg:95.95ms
step:686/1770 train_time:64865ms step_avg:95.95ms
step:687/1770 train_time:64965ms step_avg:95.96ms
step:688/1770 train_time:65065ms step_avg:95.97ms
step:689/1770 train_time:65164ms step_avg:95.97ms
step:690/1770 train_time:65262ms step_avg:95.97ms
step:691/1770 train_time:65361ms step_avg:95.98ms
step:692/1770 train_time:65461ms step_avg:95.98ms
step:693/1770 train_time:65560ms step_avg:95.99ms
step:694/1770 train_time:65659ms step_avg:95.99ms
step:695/1770 train_time:65758ms step_avg:96.00ms
step:696/1770 train_time:65857ms step_avg:96.00ms
step:697/1770 train_time:65956ms step_avg:96.01ms
step:698/1770 train_time:66056ms step_avg:96.01ms
step:699/1770 train_time:66156ms step_avg:96.02ms
step:700/1770 train_time:66255ms step_avg:96.02ms
step:701/1770 train_time:66354ms step_avg:96.03ms
step:702/1770 train_time:66453ms step_avg:96.03ms
step:703/1770 train_time:66552ms step_avg:96.03ms
step:704/1770 train_time:66651ms step_avg:96.04ms
step:705/1770 train_time:66750ms step_avg:96.04ms
step:706/1770 train_time:66849ms step_avg:96.05ms
step:707/1770 train_time:66948ms step_avg:96.05ms
step:708/1770 train_time:67047ms step_avg:96.06ms
step:709/1770 train_time:67147ms step_avg:96.06ms
step:710/1770 train_time:67247ms step_avg:96.07ms
step:711/1770 train_time:67347ms step_avg:96.07ms
step:712/1770 train_time:67446ms step_avg:96.08ms
step:713/1770 train_time:67545ms step_avg:96.08ms
step:714/1770 train_time:67645ms step_avg:96.09ms
step:715/1770 train_time:67743ms step_avg:96.09ms
step:716/1770 train_time:67843ms step_avg:96.09ms
step:717/1770 train_time:67941ms step_avg:96.10ms
step:718/1770 train_time:68041ms step_avg:96.10ms
step:719/1770 train_time:68141ms step_avg:96.11ms
step:720/1770 train_time:68242ms step_avg:96.12ms
step:721/1770 train_time:68340ms step_avg:96.12ms
step:722/1770 train_time:68440ms step_avg:96.12ms
step:723/1770 train_time:68540ms step_avg:96.13ms
step:724/1770 train_time:68639ms step_avg:96.13ms
step:725/1770 train_time:68739ms step_avg:96.14ms
step:726/1770 train_time:68838ms step_avg:96.14ms
step:727/1770 train_time:68937ms step_avg:96.15ms
step:728/1770 train_time:69036ms step_avg:96.15ms
step:729/1770 train_time:69136ms step_avg:96.16ms
step:730/1770 train_time:69235ms step_avg:96.16ms
step:731/1770 train_time:69334ms step_avg:96.16ms
step:732/1770 train_time:69433ms step_avg:96.17ms
step:733/1770 train_time:69532ms step_avg:96.17ms
step:734/1770 train_time:69632ms step_avg:96.18ms
step:735/1770 train_time:69731ms step_avg:96.18ms
step:736/1770 train_time:69830ms step_avg:96.18ms
step:737/1770 train_time:69930ms step_avg:96.19ms
step:738/1770 train_time:70029ms step_avg:96.19ms
step:739/1770 train_time:70129ms step_avg:96.20ms
step:740/1770 train_time:70229ms step_avg:96.20ms
step:741/1770 train_time:70328ms step_avg:96.21ms
step:742/1770 train_time:70427ms step_avg:96.21ms
step:743/1770 train_time:70527ms step_avg:96.22ms
step:744/1770 train_time:70626ms step_avg:96.22ms
step:745/1770 train_time:70725ms step_avg:96.22ms
step:746/1770 train_time:70823ms step_avg:96.23ms
step:747/1770 train_time:70922ms step_avg:96.23ms
step:748/1770 train_time:71020ms step_avg:96.23ms
step:749/1770 train_time:71120ms step_avg:96.24ms
step:750/1770 train_time:71219ms step_avg:96.24ms
step:750/1770 val_loss:3.6016 train_time:71317ms step_avg:96.37ms
step:751/1770 train_time:71338ms step_avg:96.27ms
step:752/1770 train_time:71427ms step_avg:96.26ms
step:753/1770 train_time:71527ms step_avg:96.27ms
step:754/1770 train_time:71627ms step_avg:96.27ms
step:755/1770 train_time:71725ms step_avg:96.28ms
step:756/1770 train_time:71824ms step_avg:96.28ms
step:757/1770 train_time:71922ms step_avg:96.28ms
step:758/1770 train_time:72021ms step_avg:96.29ms
step:759/1770 train_time:72119ms step_avg:96.29ms
step:760/1770 train_time:72218ms step_avg:96.29ms
step:761/1770 train_time:72316ms step_avg:96.29ms
step:762/1770 train_time:72415ms step_avg:96.30ms
step:763/1770 train_time:72515ms step_avg:96.30ms
step:764/1770 train_time:72615ms step_avg:96.31ms
step:765/1770 train_time:72714ms step_avg:96.31ms
step:766/1770 train_time:72814ms step_avg:96.32ms
step:767/1770 train_time:72914ms step_avg:96.32ms
step:768/1770 train_time:73013ms step_avg:96.32ms
step:769/1770 train_time:73111ms step_avg:96.33ms
step:770/1770 train_time:73210ms step_avg:96.33ms
step:771/1770 train_time:73309ms step_avg:96.33ms
step:772/1770 train_time:73408ms step_avg:96.34ms
step:773/1770 train_time:73508ms step_avg:96.34ms
step:774/1770 train_time:73608ms step_avg:96.35ms
step:775/1770 train_time:73708ms step_avg:96.35ms
step:776/1770 train_time:73808ms step_avg:96.35ms
step:777/1770 train_time:73908ms step_avg:96.36ms
step:778/1770 train_time:74008ms step_avg:96.36ms
step:779/1770 train_time:74108ms step_avg:96.37ms
step:780/1770 train_time:74206ms step_avg:96.37ms
step:781/1770 train_time:74305ms step_avg:96.38ms
step:782/1770 train_time:74405ms step_avg:96.38ms
step:783/1770 train_time:74504ms step_avg:96.38ms
step:784/1770 train_time:74603ms step_avg:96.39ms
step:785/1770 train_time:74703ms step_avg:96.39ms
step:786/1770 train_time:74803ms step_avg:96.40ms
step:787/1770 train_time:74903ms step_avg:96.40ms
step:788/1770 train_time:75003ms step_avg:96.40ms
step:789/1770 train_time:75103ms step_avg:96.41ms
step:790/1770 train_time:75202ms step_avg:96.41ms
step:791/1770 train_time:75301ms step_avg:96.42ms
step:792/1770 train_time:75400ms step_avg:96.42ms
step:793/1770 train_time:75499ms step_avg:96.42ms
step:794/1770 train_time:75599ms step_avg:96.43ms
step:795/1770 train_time:75699ms step_avg:96.43ms
step:796/1770 train_time:75798ms step_avg:96.43ms
step:797/1770 train_time:75897ms step_avg:96.44ms
step:798/1770 train_time:75997ms step_avg:96.44ms
step:799/1770 train_time:76096ms step_avg:96.45ms
step:800/1770 train_time:76196ms step_avg:96.45ms
step:801/1770 train_time:76295ms step_avg:96.45ms
step:802/1770 train_time:76394ms step_avg:96.46ms
step:803/1770 train_time:76493ms step_avg:96.46ms
step:804/1770 train_time:76591ms step_avg:96.46ms
step:805/1770 train_time:76690ms step_avg:96.47ms
step:806/1770 train_time:76790ms step_avg:96.47ms
step:807/1770 train_time:76889ms step_avg:96.47ms
step:808/1770 train_time:76988ms step_avg:96.48ms
step:809/1770 train_time:77089ms step_avg:96.48ms
step:810/1770 train_time:77189ms step_avg:96.49ms
step:811/1770 train_time:77289ms step_avg:96.49ms
step:812/1770 train_time:77388ms step_avg:96.49ms
step:813/1770 train_time:77488ms step_avg:96.50ms
step:814/1770 train_time:77588ms step_avg:96.50ms
step:815/1770 train_time:77688ms step_avg:96.51ms
step:816/1770 train_time:77787ms step_avg:96.51ms
step:817/1770 train_time:77887ms step_avg:96.51ms
step:818/1770 train_time:77986ms step_avg:96.52ms
step:819/1770 train_time:78086ms step_avg:96.52ms
step:820/1770 train_time:78186ms step_avg:96.53ms
step:821/1770 train_time:78286ms step_avg:96.53ms
step:822/1770 train_time:78386ms step_avg:96.53ms
step:823/1770 train_time:78486ms step_avg:96.54ms
step:824/1770 train_time:78586ms step_avg:96.54ms
step:825/1770 train_time:78685ms step_avg:96.55ms
step:826/1770 train_time:78784ms step_avg:96.55ms
step:827/1770 train_time:78883ms step_avg:96.55ms
step:828/1770 train_time:78983ms step_avg:96.56ms
step:829/1770 train_time:79082ms step_avg:96.56ms
step:830/1770 train_time:79181ms step_avg:96.56ms
step:831/1770 train_time:79281ms step_avg:96.57ms
step:832/1770 train_time:79381ms step_avg:96.57ms
step:833/1770 train_time:79481ms step_avg:96.57ms
step:834/1770 train_time:79580ms step_avg:96.58ms
step:835/1770 train_time:79679ms step_avg:96.58ms
step:836/1770 train_time:79779ms step_avg:96.58ms
step:837/1770 train_time:79878ms step_avg:96.59ms
step:838/1770 train_time:79977ms step_avg:96.59ms
step:839/1770 train_time:80076ms step_avg:96.59ms
step:840/1770 train_time:80176ms step_avg:96.60ms
step:841/1770 train_time:80276ms step_avg:96.60ms
step:842/1770 train_time:80376ms step_avg:96.61ms
step:843/1770 train_time:80475ms step_avg:96.61ms
step:844/1770 train_time:80575ms step_avg:96.61ms
step:845/1770 train_time:80675ms step_avg:96.62ms
step:846/1770 train_time:80775ms step_avg:96.62ms
step:847/1770 train_time:80875ms step_avg:96.62ms
step:848/1770 train_time:80975ms step_avg:96.63ms
step:849/1770 train_time:81074ms step_avg:96.63ms
step:850/1770 train_time:81175ms step_avg:96.64ms
step:851/1770 train_time:81273ms step_avg:96.64ms
step:852/1770 train_time:81372ms step_avg:96.64ms
step:853/1770 train_time:81472ms step_avg:96.64ms
step:854/1770 train_time:81571ms step_avg:96.65ms
step:855/1770 train_time:81670ms step_avg:96.65ms
step:856/1770 train_time:81769ms step_avg:96.65ms
step:857/1770 train_time:81869ms step_avg:96.66ms
step:858/1770 train_time:81968ms step_avg:96.66ms
step:859/1770 train_time:82069ms step_avg:96.67ms
step:860/1770 train_time:82169ms step_avg:96.67ms
step:861/1770 train_time:82269ms step_avg:96.67ms
step:862/1770 train_time:82369ms step_avg:96.68ms
step:863/1770 train_time:82469ms step_avg:96.68ms
step:864/1770 train_time:82568ms step_avg:96.68ms
step:865/1770 train_time:82668ms step_avg:96.69ms
step:866/1770 train_time:82768ms step_avg:96.69ms
step:867/1770 train_time:82867ms step_avg:96.69ms
step:868/1770 train_time:82966ms step_avg:96.70ms
step:869/1770 train_time:83066ms step_avg:96.70ms
step:870/1770 train_time:83167ms step_avg:96.71ms
step:871/1770 train_time:83266ms step_avg:96.71ms
step:872/1770 train_time:83366ms step_avg:96.71ms
step:873/1770 train_time:83466ms step_avg:96.72ms
step:874/1770 train_time:83566ms step_avg:96.72ms
step:875/1770 train_time:83666ms step_avg:96.72ms
step:875/1770 val_loss:3.5519 train_time:83763ms step_avg:96.84ms
step:876/1770 train_time:83784ms step_avg:96.75ms
step:877/1770 train_time:83876ms step_avg:96.74ms
step:878/1770 train_time:83977ms step_avg:96.75ms
step:879/1770 train_time:84076ms step_avg:96.75ms
step:880/1770 train_time:84175ms step_avg:96.75ms
step:881/1770 train_time:84274ms step_avg:96.76ms
step:882/1770 train_time:84373ms step_avg:96.76ms
step:883/1770 train_time:84472ms step_avg:96.76ms
step:884/1770 train_time:84571ms step_avg:96.76ms
step:885/1770 train_time:84670ms step_avg:96.77ms
step:886/1770 train_time:84769ms step_avg:96.77ms
step:887/1770 train_time:84869ms step_avg:96.77ms
step:888/1770 train_time:84969ms step_avg:96.78ms
step:889/1770 train_time:85069ms step_avg:96.78ms
step:890/1770 train_time:85169ms step_avg:96.78ms
step:891/1770 train_time:85270ms step_avg:96.79ms
step:892/1770 train_time:85369ms step_avg:96.79ms
step:893/1770 train_time:85468ms step_avg:96.79ms
step:894/1770 train_time:85567ms step_avg:96.80ms
step:895/1770 train_time:85666ms step_avg:96.80ms
step:896/1770 train_time:85765ms step_avg:96.80ms
step:897/1770 train_time:85864ms step_avg:96.80ms
step:898/1770 train_time:85963ms step_avg:96.81ms
step:899/1770 train_time:86062ms step_avg:96.81ms
step:900/1770 train_time:86162ms step_avg:96.81ms
step:901/1770 train_time:86261ms step_avg:96.81ms
step:902/1770 train_time:86361ms step_avg:96.82ms
step:903/1770 train_time:86460ms step_avg:96.82ms
step:904/1770 train_time:86560ms step_avg:96.82ms
step:905/1770 train_time:86660ms step_avg:96.83ms
step:906/1770 train_time:86759ms step_avg:96.83ms
step:907/1770 train_time:86858ms step_avg:96.83ms
step:908/1770 train_time:86959ms step_avg:96.84ms
step:909/1770 train_time:87058ms step_avg:96.84ms
step:910/1770 train_time:87158ms step_avg:96.84ms
step:911/1770 train_time:87258ms step_avg:96.85ms
step:912/1770 train_time:87358ms step_avg:96.85ms
step:913/1770 train_time:87458ms step_avg:96.85ms
step:914/1770 train_time:87557ms step_avg:96.86ms
step:915/1770 train_time:87657ms step_avg:96.86ms
step:916/1770 train_time:87757ms step_avg:96.86ms
step:917/1770 train_time:87857ms step_avg:96.87ms
step:918/1770 train_time:87957ms step_avg:96.87ms
step:919/1770 train_time:88057ms step_avg:96.87ms
step:920/1770 train_time:88158ms step_avg:96.88ms
step:921/1770 train_time:88260ms step_avg:96.88ms
step:922/1770 train_time:88362ms step_avg:96.89ms
step:923/1770 train_time:88462ms step_avg:96.89ms
step:924/1770 train_time:88563ms step_avg:96.90ms
step:925/1770 train_time:88664ms step_avg:96.90ms
step:926/1770 train_time:88764ms step_avg:96.90ms
step:927/1770 train_time:88865ms step_avg:96.91ms
step:928/1770 train_time:88966ms step_avg:96.91ms
step:929/1770 train_time:89066ms step_avg:96.92ms
step:930/1770 train_time:89168ms step_avg:96.92ms
step:931/1770 train_time:89268ms step_avg:96.93ms
step:932/1770 train_time:89369ms step_avg:96.93ms
step:933/1770 train_time:89471ms step_avg:96.93ms
step:934/1770 train_time:89571ms step_avg:96.94ms
step:935/1770 train_time:89672ms step_avg:96.94ms
step:936/1770 train_time:89772ms step_avg:96.95ms
step:937/1770 train_time:89872ms step_avg:96.95ms
step:938/1770 train_time:89973ms step_avg:96.95ms
step:939/1770 train_time:90073ms step_avg:96.96ms
step:940/1770 train_time:90174ms step_avg:96.96ms
step:941/1770 train_time:90275ms step_avg:96.97ms
step:942/1770 train_time:90375ms step_avg:96.97ms
step:943/1770 train_time:90477ms step_avg:96.97ms
step:944/1770 train_time:90577ms step_avg:96.98ms
step:945/1770 train_time:90678ms step_avg:96.98ms
step:946/1770 train_time:90780ms step_avg:96.99ms
step:947/1770 train_time:90883ms step_avg:96.99ms
step:948/1770 train_time:90983ms step_avg:97.00ms
step:949/1770 train_time:91085ms step_avg:97.00ms
step:950/1770 train_time:91185ms step_avg:97.01ms
step:951/1770 train_time:91287ms step_avg:97.01ms
step:952/1770 train_time:91387ms step_avg:97.01ms
step:953/1770 train_time:91487ms step_avg:97.02ms
step:954/1770 train_time:91588ms step_avg:97.02ms
step:955/1770 train_time:91690ms step_avg:97.03ms
step:956/1770 train_time:91792ms step_avg:97.03ms
step:957/1770 train_time:91893ms step_avg:97.04ms
step:958/1770 train_time:91994ms step_avg:97.04ms
step:959/1770 train_time:92095ms step_avg:97.04ms
step:960/1770 train_time:92197ms step_avg:97.05ms
step:961/1770 train_time:92298ms step_avg:97.05ms
step:962/1770 train_time:92399ms step_avg:97.06ms
step:963/1770 train_time:92499ms step_avg:97.06ms
step:964/1770 train_time:92601ms step_avg:97.07ms
step:965/1770 train_time:92702ms step_avg:97.07ms
step:966/1770 train_time:92804ms step_avg:97.07ms
step:967/1770 train_time:92906ms step_avg:97.08ms
step:968/1770 train_time:93007ms step_avg:97.08ms
step:969/1770 train_time:93107ms step_avg:97.09ms
step:970/1770 train_time:93208ms step_avg:97.09ms
step:971/1770 train_time:93309ms step_avg:97.10ms
step:972/1770 train_time:93410ms step_avg:97.10ms
step:973/1770 train_time:93511ms step_avg:97.10ms
step:974/1770 train_time:93612ms step_avg:97.11ms
step:975/1770 train_time:93714ms step_avg:97.11ms
step:976/1770 train_time:93815ms step_avg:97.12ms
step:977/1770 train_time:93916ms step_avg:97.12ms
step:978/1770 train_time:94016ms step_avg:97.12ms
step:979/1770 train_time:94117ms step_avg:97.13ms
step:980/1770 train_time:94217ms step_avg:97.13ms
step:981/1770 train_time:94318ms step_avg:97.13ms
step:982/1770 train_time:94419ms step_avg:97.14ms
step:983/1770 train_time:94520ms step_avg:97.14ms
step:984/1770 train_time:94622ms step_avg:97.15ms
step:985/1770 train_time:94724ms step_avg:97.15ms
step:986/1770 train_time:94825ms step_avg:97.16ms
step:987/1770 train_time:94926ms step_avg:97.16ms
step:988/1770 train_time:95026ms step_avg:97.16ms
step:989/1770 train_time:95127ms step_avg:97.17ms
step:990/1770 train_time:95227ms step_avg:97.17ms
step:991/1770 train_time:95328ms step_avg:97.17ms
step:992/1770 train_time:95430ms step_avg:97.18ms
step:993/1770 train_time:95532ms step_avg:97.18ms
step:994/1770 train_time:95634ms step_avg:97.19ms
step:995/1770 train_time:95735ms step_avg:97.19ms
step:996/1770 train_time:95836ms step_avg:97.20ms
step:997/1770 train_time:95936ms step_avg:97.20ms
step:998/1770 train_time:96036ms step_avg:97.20ms
step:999/1770 train_time:96137ms step_avg:97.21ms
step:1000/1770 train_time:96238ms step_avg:97.21ms
step:1000/1770 val_loss:3.5129 train_time:96338ms step_avg:97.31ms
step:1001/1770 train_time:96359ms step_avg:97.23ms
step:1002/1770 train_time:96452ms step_avg:97.23ms
step:1003/1770 train_time:96555ms step_avg:97.24ms
step:1004/1770 train_time:96656ms step_avg:97.24ms
step:1005/1770 train_time:96755ms step_avg:97.24ms
step:1006/1770 train_time:96855ms step_avg:97.24ms
step:1007/1770 train_time:96955ms step_avg:97.25ms
step:1008/1770 train_time:97055ms step_avg:97.25ms
step:1009/1770 train_time:97155ms step_avg:97.25ms
step:1010/1770 train_time:97256ms step_avg:97.26ms
step:1011/1770 train_time:97358ms step_avg:97.26ms
step:1012/1770 train_time:97462ms step_avg:97.27ms
step:1013/1770 train_time:97565ms step_avg:97.27ms
step:1014/1770 train_time:97665ms step_avg:97.28ms
step:1015/1770 train_time:97765ms step_avg:97.28ms
step:1016/1770 train_time:97865ms step_avg:97.28ms
step:1017/1770 train_time:97965ms step_avg:97.28ms
step:1018/1770 train_time:98065ms step_avg:97.29ms
step:1019/1770 train_time:98166ms step_avg:97.29ms
step:1020/1770 train_time:98268ms step_avg:97.29ms
step:1021/1770 train_time:98370ms step_avg:97.30ms
step:1022/1770 train_time:98472ms step_avg:97.30ms
step:1023/1770 train_time:98572ms step_avg:97.31ms
step:1024/1770 train_time:98673ms step_avg:97.31ms
step:1025/1770 train_time:98774ms step_avg:97.31ms
step:1026/1770 train_time:98875ms step_avg:97.32ms
step:1027/1770 train_time:98977ms step_avg:97.32ms
step:1028/1770 train_time:99078ms step_avg:97.33ms
step:1029/1770 train_time:99180ms step_avg:97.33ms
step:1030/1770 train_time:99281ms step_avg:97.33ms
step:1031/1770 train_time:99382ms step_avg:97.34ms
step:1032/1770 train_time:99483ms step_avg:97.34ms
step:1033/1770 train_time:99583ms step_avg:97.34ms
step:1034/1770 train_time:99684ms step_avg:97.35ms
step:1035/1770 train_time:99785ms step_avg:97.35ms
step:1036/1770 train_time:99885ms step_avg:97.35ms
step:1037/1770 train_time:99986ms step_avg:97.36ms
step:1038/1770 train_time:100086ms step_avg:97.36ms
step:1039/1770 train_time:100188ms step_avg:97.36ms
step:1040/1770 train_time:100288ms step_avg:97.37ms
step:1041/1770 train_time:100389ms step_avg:97.37ms
step:1042/1770 train_time:100491ms step_avg:97.37ms
step:1043/1770 train_time:100592ms step_avg:97.38ms
step:1044/1770 train_time:100693ms step_avg:97.38ms
step:1045/1770 train_time:100793ms step_avg:97.38ms
step:1046/1770 train_time:100894ms step_avg:97.39ms
step:1047/1770 train_time:100994ms step_avg:97.39ms
step:1048/1770 train_time:101094ms step_avg:97.39ms
step:1049/1770 train_time:101195ms step_avg:97.40ms
step:1050/1770 train_time:101298ms step_avg:97.40ms
step:1051/1770 train_time:101400ms step_avg:97.41ms
step:1052/1770 train_time:101501ms step_avg:97.41ms
step:1053/1770 train_time:101601ms step_avg:97.41ms
step:1054/1770 train_time:101702ms step_avg:97.42ms
step:1055/1770 train_time:101803ms step_avg:97.42ms
step:1056/1770 train_time:101904ms step_avg:97.42ms
step:1057/1770 train_time:102004ms step_avg:97.43ms
step:1058/1770 train_time:102106ms step_avg:97.43ms
step:1059/1770 train_time:102207ms step_avg:97.43ms
step:1060/1770 train_time:102309ms step_avg:97.44ms
step:1061/1770 train_time:102410ms step_avg:97.44ms
step:1062/1770 train_time:102513ms step_avg:97.45ms
step:1063/1770 train_time:102616ms step_avg:97.45ms
step:1064/1770 train_time:102717ms step_avg:97.45ms
step:1065/1770 train_time:102817ms step_avg:97.46ms
step:1066/1770 train_time:102918ms step_avg:97.46ms
step:1067/1770 train_time:103021ms step_avg:97.47ms
step:1068/1770 train_time:103123ms step_avg:97.47ms
step:1069/1770 train_time:103224ms step_avg:97.47ms
step:1070/1770 train_time:103324ms step_avg:97.48ms
step:1071/1770 train_time:103426ms step_avg:97.48ms
step:1072/1770 train_time:103528ms step_avg:97.48ms
step:1073/1770 train_time:103629ms step_avg:97.49ms
step:1074/1770 train_time:103730ms step_avg:97.49ms
step:1075/1770 train_time:103831ms step_avg:97.49ms
step:1076/1770 train_time:103933ms step_avg:97.50ms
step:1077/1770 train_time:104034ms step_avg:97.50ms
step:1078/1770 train_time:104134ms step_avg:97.50ms
step:1079/1770 train_time:104236ms step_avg:97.51ms
step:1080/1770 train_time:104337ms step_avg:97.51ms
step:1081/1770 train_time:104439ms step_avg:97.51ms
step:1082/1770 train_time:104541ms step_avg:97.52ms
step:1083/1770 train_time:104642ms step_avg:97.52ms
step:1084/1770 train_time:104743ms step_avg:97.53ms
step:1085/1770 train_time:104844ms step_avg:97.53ms
step:1086/1770 train_time:104945ms step_avg:97.53ms
step:1087/1770 train_time:105045ms step_avg:97.54ms
step:1088/1770 train_time:105147ms step_avg:97.54ms
step:1089/1770 train_time:105248ms step_avg:97.54ms
step:1090/1770 train_time:105350ms step_avg:97.55ms
step:1091/1770 train_time:105452ms step_avg:97.55ms
step:1092/1770 train_time:105554ms step_avg:97.55ms
step:1093/1770 train_time:105654ms step_avg:97.56ms
step:1094/1770 train_time:105755ms step_avg:97.56ms
step:1095/1770 train_time:105855ms step_avg:97.56ms
step:1096/1770 train_time:105957ms step_avg:97.57ms
step:1097/1770 train_time:106058ms step_avg:97.57ms
step:1098/1770 train_time:106160ms step_avg:97.57ms
step:1099/1770 train_time:106261ms step_avg:97.58ms
step:1100/1770 train_time:106363ms step_avg:97.58ms
step:1101/1770 train_time:106463ms step_avg:97.58ms
step:1102/1770 train_time:106564ms step_avg:97.59ms
step:1103/1770 train_time:106664ms step_avg:97.59ms
step:1104/1770 train_time:106766ms step_avg:97.59ms
step:1105/1770 train_time:106867ms step_avg:97.60ms
step:1106/1770 train_time:106969ms step_avg:97.60ms
step:1107/1770 train_time:107071ms step_avg:97.60ms
step:1108/1770 train_time:107172ms step_avg:97.61ms
step:1109/1770 train_time:107273ms step_avg:97.61ms
step:1110/1770 train_time:107374ms step_avg:97.61ms
step:1111/1770 train_time:107475ms step_avg:97.62ms
step:1112/1770 train_time:107577ms step_avg:97.62ms
step:1113/1770 train_time:107677ms step_avg:97.62ms
step:1114/1770 train_time:107779ms step_avg:97.63ms
step:1115/1770 train_time:107881ms step_avg:97.63ms
step:1116/1770 train_time:107983ms step_avg:97.63ms
step:1117/1770 train_time:108083ms step_avg:97.64ms
step:1118/1770 train_time:108184ms step_avg:97.64ms
step:1119/1770 train_time:108284ms step_avg:97.64ms
step:1120/1770 train_time:108385ms step_avg:97.64ms
step:1121/1770 train_time:108486ms step_avg:97.65ms
step:1122/1770 train_time:108588ms step_avg:97.65ms
step:1123/1770 train_time:108689ms step_avg:97.65ms
step:1124/1770 train_time:108791ms step_avg:97.66ms
step:1125/1770 train_time:108892ms step_avg:97.66ms
step:1125/1770 val_loss:3.4709 train_time:108990ms step_avg:97.75ms
step:1126/1770 train_time:109012ms step_avg:97.68ms
step:1127/1770 train_time:109105ms step_avg:97.68ms
step:1128/1770 train_time:109206ms step_avg:97.68ms
step:1129/1770 train_time:109306ms step_avg:97.68ms
step:1130/1770 train_time:109407ms step_avg:97.68ms
step:1131/1770 train_time:109507ms step_avg:97.69ms
step:1132/1770 train_time:109608ms step_avg:97.69ms
step:1133/1770 train_time:109708ms step_avg:97.69ms
step:1134/1770 train_time:109809ms step_avg:97.69ms
step:1135/1770 train_time:109909ms step_avg:97.70ms
step:1136/1770 train_time:110010ms step_avg:97.70ms
step:1137/1770 train_time:110113ms step_avg:97.70ms
step:1138/1770 train_time:110215ms step_avg:97.71ms
step:1139/1770 train_time:110317ms step_avg:97.71ms
step:1140/1770 train_time:110417ms step_avg:97.71ms
step:1141/1770 train_time:110517ms step_avg:97.72ms
step:1142/1770 train_time:110618ms step_avg:97.72ms
step:1143/1770 train_time:110719ms step_avg:97.72ms
step:1144/1770 train_time:110819ms step_avg:97.72ms
step:1145/1770 train_time:110919ms step_avg:97.73ms
step:1146/1770 train_time:111022ms step_avg:97.73ms
step:1147/1770 train_time:111124ms step_avg:97.73ms
step:1148/1770 train_time:111225ms step_avg:97.74ms
step:1149/1770 train_time:111326ms step_avg:97.74ms
step:1150/1770 train_time:111426ms step_avg:97.74ms
step:1151/1770 train_time:111528ms step_avg:97.75ms
step:1152/1770 train_time:111630ms step_avg:97.75ms
step:1153/1770 train_time:111731ms step_avg:97.75ms
step:1154/1770 train_time:111833ms step_avg:97.76ms
step:1155/1770 train_time:111934ms step_avg:97.76ms
step:1156/1770 train_time:112035ms step_avg:97.76ms
step:1157/1770 train_time:112137ms step_avg:97.77ms
step:1158/1770 train_time:112239ms step_avg:97.77ms
step:1159/1770 train_time:112339ms step_avg:97.77ms
step:1160/1770 train_time:112440ms step_avg:97.77ms
step:1161/1770 train_time:112541ms step_avg:97.78ms
step:1162/1770 train_time:112643ms step_avg:97.78ms
step:1163/1770 train_time:112744ms step_avg:97.78ms
step:1164/1770 train_time:112846ms step_avg:97.79ms
step:1165/1770 train_time:112947ms step_avg:97.79ms
step:1166/1770 train_time:113048ms step_avg:97.79ms
step:1167/1770 train_time:113148ms step_avg:97.79ms
step:1168/1770 train_time:113250ms step_avg:97.80ms
step:1169/1770 train_time:113350ms step_avg:97.80ms
step:1170/1770 train_time:113451ms step_avg:97.80ms
step:1171/1770 train_time:113552ms step_avg:97.81ms
step:1172/1770 train_time:113654ms step_avg:97.81ms
step:1173/1770 train_time:113755ms step_avg:97.81ms
step:1174/1770 train_time:113858ms step_avg:97.82ms
step:1175/1770 train_time:113959ms step_avg:97.82ms
step:1176/1770 train_time:114059ms step_avg:97.82ms
step:1177/1770 train_time:114160ms step_avg:97.82ms
step:1178/1770 train_time:114262ms step_avg:97.83ms
step:1179/1770 train_time:114363ms step_avg:97.83ms
step:1180/1770 train_time:114465ms step_avg:97.83ms
step:1181/1770 train_time:114566ms step_avg:97.84ms
step:1182/1770 train_time:114667ms step_avg:97.84ms
step:1183/1770 train_time:114769ms step_avg:97.84ms
step:1184/1770 train_time:114873ms step_avg:97.85ms
step:1185/1770 train_time:114975ms step_avg:97.85ms
step:1186/1770 train_time:115079ms step_avg:97.86ms
step:1187/1770 train_time:115183ms step_avg:97.86ms
step:1188/1770 train_time:115284ms step_avg:97.86ms
step:1189/1770 train_time:115385ms step_avg:97.87ms
step:1190/1770 train_time:115486ms step_avg:97.87ms
step:1191/1770 train_time:115589ms step_avg:97.87ms
step:1192/1770 train_time:115692ms step_avg:97.88ms
step:1193/1770 train_time:115795ms step_avg:97.88ms
step:1194/1770 train_time:115897ms step_avg:97.89ms
step:1195/1770 train_time:115999ms step_avg:97.89ms
step:1196/1770 train_time:116103ms step_avg:97.89ms
step:1197/1770 train_time:116205ms step_avg:97.90ms
step:1198/1770 train_time:116307ms step_avg:97.90ms
step:1199/1770 train_time:116409ms step_avg:97.90ms
step:1200/1770 train_time:116512ms step_avg:97.91ms
step:1201/1770 train_time:116615ms step_avg:97.91ms
step:1202/1770 train_time:116716ms step_avg:97.92ms
step:1203/1770 train_time:116818ms step_avg:97.92ms
step:1204/1770 train_time:116921ms step_avg:97.92ms
step:1205/1770 train_time:117022ms step_avg:97.93ms
step:1206/1770 train_time:117126ms step_avg:97.93ms
step:1207/1770 train_time:117228ms step_avg:97.93ms
step:1208/1770 train_time:117330ms step_avg:97.94ms
step:1209/1770 train_time:117432ms step_avg:97.94ms
step:1210/1770 train_time:117534ms step_avg:97.94ms
step:1211/1770 train_time:117637ms step_avg:97.95ms
step:1212/1770 train_time:117741ms step_avg:97.95ms
step:1213/1770 train_time:117843ms step_avg:97.96ms
step:1214/1770 train_time:117944ms step_avg:97.96ms
step:1215/1770 train_time:118046ms step_avg:97.96ms
step:1216/1770 train_time:118151ms step_avg:97.97ms
step:1217/1770 train_time:118253ms step_avg:97.97ms
step:1218/1770 train_time:118355ms step_avg:97.98ms
step:1219/1770 train_time:118457ms step_avg:97.98ms
step:1220/1770 train_time:118560ms step_avg:97.98ms
step:1221/1770 train_time:118661ms step_avg:97.99ms
step:1222/1770 train_time:118765ms step_avg:97.99ms
step:1223/1770 train_time:118866ms step_avg:97.99ms
step:1224/1770 train_time:118969ms step_avg:98.00ms
step:1225/1770 train_time:119072ms step_avg:98.00ms
step:1226/1770 train_time:119175ms step_avg:98.01ms
step:1227/1770 train_time:119279ms step_avg:98.01ms
step:1228/1770 train_time:119382ms step_avg:98.02ms
step:1229/1770 train_time:119484ms step_avg:98.02ms
step:1230/1770 train_time:119586ms step_avg:98.02ms
step:1231/1770 train_time:119689ms step_avg:98.03ms
step:1232/1770 train_time:119790ms step_avg:98.03ms
step:1233/1770 train_time:119893ms step_avg:98.03ms
step:1234/1770 train_time:119995ms step_avg:98.03ms
step:1235/1770 train_time:120097ms step_avg:98.04ms
step:1236/1770 train_time:120199ms step_avg:98.04ms
step:1237/1770 train_time:120302ms step_avg:98.05ms
step:1238/1770 train_time:120404ms step_avg:98.05ms
step:1239/1770 train_time:120506ms step_avg:98.05ms
step:1240/1770 train_time:120609ms step_avg:98.06ms
step:1241/1770 train_time:120711ms step_avg:98.06ms
step:1242/1770 train_time:120813ms step_avg:98.06ms
step:1243/1770 train_time:120916ms step_avg:98.07ms
step:1244/1770 train_time:121018ms step_avg:98.07ms
step:1245/1770 train_time:121119ms step_avg:98.07ms
step:1246/1770 train_time:121221ms step_avg:98.08ms
step:1247/1770 train_time:121323ms step_avg:98.08ms
step:1248/1770 train_time:121425ms step_avg:98.08ms
step:1249/1770 train_time:121528ms step_avg:98.09ms
step:1250/1770 train_time:121630ms step_avg:98.09ms
step:1250/1770 val_loss:3.4238 train_time:121732ms step_avg:98.17ms
step:1251/1770 train_time:121753ms step_avg:98.11ms
step:1252/1770 train_time:121848ms step_avg:98.11ms
step:1253/1770 train_time:121950ms step_avg:98.11ms
step:1254/1770 train_time:122053ms step_avg:98.11ms
step:1255/1770 train_time:122157ms step_avg:98.12ms
step:1256/1770 train_time:122258ms step_avg:98.12ms
step:1257/1770 train_time:122360ms step_avg:98.12ms
step:1258/1770 train_time:122463ms step_avg:98.13ms
step:1259/1770 train_time:122565ms step_avg:98.13ms
step:1260/1770 train_time:122666ms step_avg:98.13ms
step:1261/1770 train_time:122770ms step_avg:98.14ms
step:1262/1770 train_time:122874ms step_avg:98.14ms
step:1263/1770 train_time:122976ms step_avg:98.15ms
step:1264/1770 train_time:123079ms step_avg:98.15ms
step:1265/1770 train_time:123181ms step_avg:98.15ms
step:1266/1770 train_time:123284ms step_avg:98.16ms
step:1267/1770 train_time:123386ms step_avg:98.16ms
step:1268/1770 train_time:123488ms step_avg:98.16ms
step:1269/1770 train_time:123590ms step_avg:98.17ms
step:1270/1770 train_time:123693ms step_avg:98.17ms
step:1271/1770 train_time:123796ms step_avg:98.17ms
step:1272/1770 train_time:123897ms step_avg:98.17ms
step:1273/1770 train_time:123999ms step_avg:98.18ms
step:1274/1770 train_time:124103ms step_avg:98.18ms
step:1275/1770 train_time:124204ms step_avg:98.18ms
step:1276/1770 train_time:124306ms step_avg:98.19ms
step:1277/1770 train_time:124408ms step_avg:98.19ms
step:1278/1770 train_time:124511ms step_avg:98.19ms
step:1279/1770 train_time:124613ms step_avg:98.20ms
step:1280/1770 train_time:124717ms step_avg:98.20ms
step:1281/1770 train_time:124820ms step_avg:98.21ms
step:1282/1770 train_time:124923ms step_avg:98.21ms
step:1283/1770 train_time:125026ms step_avg:98.21ms
step:1284/1770 train_time:125128ms step_avg:98.22ms
step:1285/1770 train_time:125230ms step_avg:98.22ms
step:1286/1770 train_time:125334ms step_avg:98.22ms
step:1287/1770 train_time:125438ms step_avg:98.23ms
step:1288/1770 train_time:125540ms step_avg:98.23ms
step:1289/1770 train_time:125643ms step_avg:98.24ms
step:1290/1770 train_time:125745ms step_avg:98.24ms
step:1291/1770 train_time:125848ms step_avg:98.24ms
step:1292/1770 train_time:125949ms step_avg:98.24ms
step:1293/1770 train_time:126051ms step_avg:98.25ms
step:1294/1770 train_time:126153ms step_avg:98.25ms
step:1295/1770 train_time:126255ms step_avg:98.25ms
step:1296/1770 train_time:126357ms step_avg:98.26ms
step:1297/1770 train_time:126459ms step_avg:98.26ms
step:1298/1770 train_time:126562ms step_avg:98.26ms
step:1299/1770 train_time:126665ms step_avg:98.27ms
step:1300/1770 train_time:126766ms step_avg:98.27ms
step:1301/1770 train_time:126869ms step_avg:98.27ms
step:1302/1770 train_time:126971ms step_avg:98.27ms
step:1303/1770 train_time:127074ms step_avg:98.28ms
step:1304/1770 train_time:127176ms step_avg:98.28ms
step:1305/1770 train_time:127278ms step_avg:98.28ms
step:1306/1770 train_time:127380ms step_avg:98.29ms
step:1307/1770 train_time:127482ms step_avg:98.29ms
step:1308/1770 train_time:127585ms step_avg:98.29ms
step:1309/1770 train_time:127687ms step_avg:98.30ms
step:1310/1770 train_time:127789ms step_avg:98.30ms
step:1311/1770 train_time:127890ms step_avg:98.30ms
step:1312/1770 train_time:127992ms step_avg:98.30ms
step:1313/1770 train_time:128093ms step_avg:98.31ms
step:1314/1770 train_time:128195ms step_avg:98.31ms
step:1315/1770 train_time:128298ms step_avg:98.31ms
step:1316/1770 train_time:128400ms step_avg:98.32ms
step:1317/1770 train_time:128503ms step_avg:98.32ms
step:1318/1770 train_time:128608ms step_avg:98.32ms
step:1319/1770 train_time:128710ms step_avg:98.33ms
step:1320/1770 train_time:128813ms step_avg:98.33ms
step:1321/1770 train_time:128916ms step_avg:98.33ms
step:1322/1770 train_time:129019ms step_avg:98.34ms
step:1323/1770 train_time:129122ms step_avg:98.34ms
step:1324/1770 train_time:129225ms step_avg:98.34ms
step:1325/1770 train_time:129328ms step_avg:98.35ms
step:1326/1770 train_time:129431ms step_avg:98.35ms
step:1327/1770 train_time:129535ms step_avg:98.36ms
step:1328/1770 train_time:129637ms step_avg:98.36ms
step:1329/1770 train_time:129740ms step_avg:98.36ms
step:1330/1770 train_time:129842ms step_avg:98.37ms
step:1331/1770 train_time:129943ms step_avg:98.37ms
step:1332/1770 train_time:130045ms step_avg:98.37ms
step:1333/1770 train_time:130147ms step_avg:98.37ms
step:1334/1770 train_time:130249ms step_avg:98.38ms
step:1335/1770 train_time:130350ms step_avg:98.38ms
step:1336/1770 train_time:130453ms step_avg:98.38ms
step:1337/1770 train_time:130556ms step_avg:98.38ms
step:1338/1770 train_time:130658ms step_avg:98.39ms
step:1339/1770 train_time:130762ms step_avg:98.39ms
step:1340/1770 train_time:130865ms step_avg:98.39ms
step:1341/1770 train_time:130967ms step_avg:98.40ms
step:1342/1770 train_time:131070ms step_avg:98.40ms
step:1343/1770 train_time:131173ms step_avg:98.40ms
step:1344/1770 train_time:131275ms step_avg:98.41ms
step:1345/1770 train_time:131378ms step_avg:98.41ms
step:1346/1770 train_time:131481ms step_avg:98.41ms
step:1347/1770 train_time:131583ms step_avg:98.42ms
step:1348/1770 train_time:131688ms step_avg:98.42ms
step:1349/1770 train_time:131790ms step_avg:98.42ms
step:1350/1770 train_time:131892ms step_avg:98.43ms
step:1351/1770 train_time:131994ms step_avg:98.43ms
step:1352/1770 train_time:132096ms step_avg:98.43ms
step:1353/1770 train_time:132199ms step_avg:98.44ms
step:1354/1770 train_time:132301ms step_avg:98.44ms
step:1355/1770 train_time:132403ms step_avg:98.44ms
step:1356/1770 train_time:132505ms step_avg:98.44ms
step:1357/1770 train_time:132608ms step_avg:98.45ms
step:1358/1770 train_time:132713ms step_avg:98.45ms
step:1359/1770 train_time:132815ms step_avg:98.45ms
step:1360/1770 train_time:132917ms step_avg:98.46ms
step:1361/1770 train_time:133020ms step_avg:98.46ms
step:1362/1770 train_time:133122ms step_avg:98.46ms
step:1363/1770 train_time:133225ms step_avg:98.47ms
step:1364/1770 train_time:133327ms step_avg:98.47ms
step:1365/1770 train_time:133430ms step_avg:98.47ms
step:1366/1770 train_time:133531ms step_avg:98.47ms
step:1367/1770 train_time:133634ms step_avg:98.48ms
step:1368/1770 train_time:133736ms step_avg:98.48ms
step:1369/1770 train_time:133839ms step_avg:98.48ms
step:1370/1770 train_time:133941ms step_avg:98.49ms
step:1371/1770 train_time:134043ms step_avg:98.49ms
step:1372/1770 train_time:134145ms step_avg:98.49ms
step:1373/1770 train_time:134248ms step_avg:98.49ms
step:1374/1770 train_time:134351ms step_avg:98.50ms
step:1375/1770 train_time:134454ms step_avg:98.50ms
step:1375/1770 val_loss:3.3805 train_time:134555ms step_avg:98.58ms
step:1376/1770 train_time:134578ms step_avg:98.52ms
step:1377/1770 train_time:134671ms step_avg:98.52ms
step:1378/1770 train_time:134774ms step_avg:98.52ms
step:1379/1770 train_time:134875ms step_avg:98.52ms
step:1380/1770 train_time:134977ms step_avg:98.52ms
step:1381/1770 train_time:135079ms step_avg:98.53ms
step:1382/1770 train_time:135181ms step_avg:98.53ms
step:1383/1770 train_time:135284ms step_avg:98.53ms
step:1384/1770 train_time:135386ms step_avg:98.53ms
step:1385/1770 train_time:135488ms step_avg:98.54ms
step:1386/1770 train_time:135591ms step_avg:98.54ms
step:1387/1770 train_time:135694ms step_avg:98.54ms
step:1388/1770 train_time:135796ms step_avg:98.55ms
step:1389/1770 train_time:135899ms step_avg:98.55ms
step:1390/1770 train_time:136000ms step_avg:98.55ms
step:1391/1770 train_time:136102ms step_avg:98.55ms
step:1392/1770 train_time:136204ms step_avg:98.56ms
step:1393/1770 train_time:136306ms step_avg:98.56ms
step:1394/1770 train_time:136407ms step_avg:98.56ms
step:1395/1770 train_time:136511ms step_avg:98.56ms
step:1396/1770 train_time:136613ms step_avg:98.57ms
step:1397/1770 train_time:136716ms step_avg:98.57ms
step:1398/1770 train_time:136818ms step_avg:98.57ms
step:1399/1770 train_time:136921ms step_avg:98.57ms
step:1400/1770 train_time:137024ms step_avg:98.58ms
step:1401/1770 train_time:137127ms step_avg:98.58ms
step:1402/1770 train_time:137229ms step_avg:98.58ms
step:1403/1770 train_time:137331ms step_avg:98.59ms
step:1404/1770 train_time:137433ms step_avg:98.59ms
step:1405/1770 train_time:137535ms step_avg:98.59ms
step:1406/1770 train_time:137638ms step_avg:98.59ms
step:1407/1770 train_time:137740ms step_avg:98.60ms
step:1408/1770 train_time:137843ms step_avg:98.60ms
step:1409/1770 train_time:137945ms step_avg:98.60ms
step:1410/1770 train_time:138047ms step_avg:98.61ms
step:1411/1770 train_time:138149ms step_avg:98.61ms
step:1412/1770 train_time:138251ms step_avg:98.61ms
step:1413/1770 train_time:138353ms step_avg:98.61ms
step:1414/1770 train_time:138456ms step_avg:98.62ms
step:1415/1770 train_time:138559ms step_avg:98.62ms
step:1416/1770 train_time:138662ms step_avg:98.62ms
step:1417/1770 train_time:138764ms step_avg:98.62ms
step:1418/1770 train_time:138867ms step_avg:98.63ms
step:1419/1770 train_time:138970ms step_avg:98.63ms
step:1420/1770 train_time:139071ms step_avg:98.63ms
step:1421/1770 train_time:139173ms step_avg:98.63ms
step:1422/1770 train_time:139275ms step_avg:98.64ms
step:1423/1770 train_time:139378ms step_avg:98.64ms
step:1424/1770 train_time:139480ms step_avg:98.64ms
step:1425/1770 train_time:139582ms step_avg:98.64ms
step:1426/1770 train_time:139685ms step_avg:98.65ms
step:1427/1770 train_time:139787ms step_avg:98.65ms
step:1428/1770 train_time:139891ms step_avg:98.65ms
step:1429/1770 train_time:139993ms step_avg:98.66ms
step:1430/1770 train_time:140094ms step_avg:98.66ms
step:1431/1770 train_time:140199ms step_avg:98.66ms
step:1432/1770 train_time:140300ms step_avg:98.66ms
step:1433/1770 train_time:140402ms step_avg:98.67ms
step:1434/1770 train_time:140503ms step_avg:98.67ms
step:1435/1770 train_time:140605ms step_avg:98.67ms
step:1436/1770 train_time:140708ms step_avg:98.67ms
step:1437/1770 train_time:140811ms step_avg:98.68ms
step:1438/1770 train_time:140913ms step_avg:98.68ms
step:1439/1770 train_time:141015ms step_avg:98.68ms
step:1440/1770 train_time:141118ms step_avg:98.68ms
step:1441/1770 train_time:141223ms step_avg:98.69ms
step:1442/1770 train_time:141325ms step_avg:98.69ms
step:1443/1770 train_time:141427ms step_avg:98.69ms
step:1444/1770 train_time:141529ms step_avg:98.70ms
step:1445/1770 train_time:141632ms step_avg:98.70ms
step:1446/1770 train_time:141735ms step_avg:98.70ms
step:1447/1770 train_time:141839ms step_avg:98.71ms
step:1448/1770 train_time:141943ms step_avg:98.71ms
step:1449/1770 train_time:142048ms step_avg:98.71ms
step:1450/1770 train_time:142150ms step_avg:98.72ms
step:1451/1770 train_time:142253ms step_avg:98.72ms
step:1452/1770 train_time:142357ms step_avg:98.72ms
step:1453/1770 train_time:142460ms step_avg:98.72ms
step:1454/1770 train_time:142564ms step_avg:98.73ms
step:1455/1770 train_time:142669ms step_avg:98.73ms
step:1456/1770 train_time:142774ms step_avg:98.74ms
step:1457/1770 train_time:142877ms step_avg:98.74ms
step:1458/1770 train_time:142981ms step_avg:98.74ms
step:1459/1770 train_time:143085ms step_avg:98.75ms
step:1460/1770 train_time:143188ms step_avg:98.75ms
step:1461/1770 train_time:143291ms step_avg:98.75ms
step:1462/1770 train_time:143394ms step_avg:98.76ms
step:1463/1770 train_time:143497ms step_avg:98.76ms
step:1464/1770 train_time:143603ms step_avg:98.76ms
step:1465/1770 train_time:143707ms step_avg:98.77ms
step:1466/1770 train_time:143811ms step_avg:98.77ms
step:1467/1770 train_time:143916ms step_avg:98.78ms
step:1468/1770 train_time:144020ms step_avg:98.78ms
step:1469/1770 train_time:144122ms step_avg:98.78ms
step:1470/1770 train_time:144225ms step_avg:98.78ms
step:1471/1770 train_time:144329ms step_avg:98.79ms
step:1472/1770 train_time:144432ms step_avg:98.79ms
step:1473/1770 train_time:144536ms step_avg:98.79ms
step:1474/1770 train_time:144641ms step_avg:98.80ms
step:1475/1770 train_time:144744ms step_avg:98.80ms
step:1476/1770 train_time:144848ms step_avg:98.81ms
step:1477/1770 train_time:144953ms step_avg:98.81ms
step:1478/1770 train_time:145057ms step_avg:98.81ms
step:1479/1770 train_time:145159ms step_avg:98.82ms
step:1480/1770 train_time:145262ms step_avg:98.82ms
step:1481/1770 train_time:145369ms step_avg:98.82ms
step:1482/1770 train_time:145472ms step_avg:98.83ms
step:1483/1770 train_time:145576ms step_avg:98.83ms
step:1484/1770 train_time:145679ms step_avg:98.83ms
step:1485/1770 train_time:145782ms step_avg:98.84ms
step:1486/1770 train_time:145886ms step_avg:98.84ms
step:1487/1770 train_time:145989ms step_avg:98.84ms
step:1488/1770 train_time:146093ms step_avg:98.84ms
step:1489/1770 train_time:146198ms step_avg:98.85ms
step:1490/1770 train_time:146302ms step_avg:98.85ms
step:1491/1770 train_time:146405ms step_avg:98.86ms
step:1492/1770 train_time:146509ms step_avg:98.86ms
step:1493/1770 train_time:146615ms step_avg:98.86ms
step:1494/1770 train_time:146722ms step_avg:98.87ms
step:1495/1770 train_time:146824ms step_avg:98.87ms
step:1496/1770 train_time:146926ms step_avg:98.87ms
step:1497/1770 train_time:147029ms step_avg:98.88ms
step:1498/1770 train_time:147132ms step_avg:98.88ms
step:1499/1770 train_time:147236ms step_avg:98.88ms
step:1500/1770 train_time:147338ms step_avg:98.88ms
step:1500/1770 val_loss:3.3421 train_time:147439ms step_avg:98.95ms
step:1501/1770 train_time:147460ms step_avg:98.90ms
step:1502/1770 train_time:147552ms step_avg:98.90ms
step:1503/1770 train_time:147655ms step_avg:98.90ms
step:1504/1770 train_time:147759ms step_avg:98.90ms
step:1505/1770 train_time:147864ms step_avg:98.91ms
step:1506/1770 train_time:147968ms step_avg:98.91ms
step:1507/1770 train_time:148071ms step_avg:98.91ms
step:1508/1770 train_time:148176ms step_avg:98.92ms
step:1509/1770 train_time:148279ms step_avg:98.92ms
step:1510/1770 train_time:148381ms step_avg:98.92ms
step:1511/1770 train_time:148485ms step_avg:98.92ms
step:1512/1770 train_time:148589ms step_avg:98.93ms
step:1513/1770 train_time:148693ms step_avg:98.93ms
step:1514/1770 train_time:148796ms step_avg:98.93ms
step:1515/1770 train_time:148901ms step_avg:98.94ms
step:1516/1770 train_time:149005ms step_avg:98.94ms
step:1517/1770 train_time:149107ms step_avg:98.94ms
step:1518/1770 train_time:149212ms step_avg:98.95ms
step:1519/1770 train_time:149315ms step_avg:98.95ms
step:1520/1770 train_time:149419ms step_avg:98.95ms
step:1521/1770 train_time:149523ms step_avg:98.96ms
step:1522/1770 train_time:149626ms step_avg:98.96ms
step:1523/1770 train_time:149730ms step_avg:98.96ms
step:1524/1770 train_time:149833ms step_avg:98.97ms
step:1525/1770 train_time:149937ms step_avg:98.97ms
step:1526/1770 train_time:150041ms step_avg:98.97ms
step:1527/1770 train_time:150144ms step_avg:98.97ms
step:1528/1770 train_time:150249ms step_avg:98.98ms
step:1529/1770 train_time:150352ms step_avg:98.98ms
step:1530/1770 train_time:150455ms step_avg:98.98ms
step:1531/1770 train_time:150559ms step_avg:98.99ms
step:1532/1770 train_time:150662ms step_avg:98.99ms
step:1533/1770 train_time:150766ms step_avg:98.99ms
step:1534/1770 train_time:150870ms step_avg:99.00ms
step:1535/1770 train_time:150973ms step_avg:99.00ms
step:1536/1770 train_time:151076ms step_avg:99.00ms
step:1537/1770 train_time:151179ms step_avg:99.00ms
step:1538/1770 train_time:151284ms step_avg:99.01ms
step:1539/1770 train_time:151387ms step_avg:99.01ms
step:1540/1770 train_time:151494ms step_avg:99.02ms
step:1541/1770 train_time:151598ms step_avg:99.02ms
step:1542/1770 train_time:151702ms step_avg:99.02ms
step:1543/1770 train_time:151804ms step_avg:99.02ms
step:1544/1770 train_time:151910ms step_avg:99.03ms
step:1545/1770 train_time:152013ms step_avg:99.03ms
step:1546/1770 train_time:152117ms step_avg:99.03ms
step:1547/1770 train_time:152220ms step_avg:99.04ms
step:1548/1770 train_time:152323ms step_avg:99.04ms
step:1549/1770 train_time:152426ms step_avg:99.04ms
step:1550/1770 train_time:152531ms step_avg:99.05ms
step:1551/1770 train_time:152634ms step_avg:99.05ms
step:1552/1770 train_time:152738ms step_avg:99.05ms
step:1553/1770 train_time:152841ms step_avg:99.05ms
step:1554/1770 train_time:152944ms step_avg:99.06ms
step:1555/1770 train_time:153048ms step_avg:99.06ms
step:1556/1770 train_time:153150ms step_avg:99.06ms
step:1557/1770 train_time:153253ms step_avg:99.06ms
step:1558/1770 train_time:153357ms step_avg:99.07ms
step:1559/1770 train_time:153461ms step_avg:99.07ms
step:1560/1770 train_time:153563ms step_avg:99.07ms
step:1561/1770 train_time:153670ms step_avg:99.08ms
step:1562/1770 train_time:153773ms step_avg:99.08ms
step:1563/1770 train_time:153878ms step_avg:99.08ms
step:1564/1770 train_time:153980ms step_avg:99.09ms
step:1565/1770 train_time:154083ms step_avg:99.09ms
step:1566/1770 train_time:154186ms step_avg:99.09ms
step:1567/1770 train_time:154291ms step_avg:99.09ms
step:1568/1770 train_time:154394ms step_avg:99.10ms
step:1569/1770 train_time:154500ms step_avg:99.10ms
step:1570/1770 train_time:154603ms step_avg:99.10ms
step:1571/1770 train_time:154707ms step_avg:99.11ms
step:1572/1770 train_time:154811ms step_avg:99.11ms
step:1573/1770 train_time:154916ms step_avg:99.11ms
step:1574/1770 train_time:155019ms step_avg:99.12ms
step:1575/1770 train_time:155121ms step_avg:99.12ms
step:1576/1770 train_time:155225ms step_avg:99.12ms
step:1577/1770 train_time:155330ms step_avg:99.13ms
step:1578/1770 train_time:155435ms step_avg:99.13ms
step:1579/1770 train_time:155538ms step_avg:99.13ms
step:1580/1770 train_time:155641ms step_avg:99.13ms
step:1581/1770 train_time:155747ms step_avg:99.14ms
step:1582/1770 train_time:155853ms step_avg:99.14ms
step:1583/1770 train_time:155956ms step_avg:99.15ms
step:1584/1770 train_time:156061ms step_avg:99.15ms
step:1585/1770 train_time:156164ms step_avg:99.15ms
step:1586/1770 train_time:156271ms step_avg:99.16ms
step:1587/1770 train_time:156374ms step_avg:99.16ms
step:1588/1770 train_time:156478ms step_avg:99.16ms
step:1589/1770 train_time:156583ms step_avg:99.17ms
step:1590/1770 train_time:156686ms step_avg:99.17ms
step:1591/1770 train_time:156789ms step_avg:99.17ms
step:1592/1770 train_time:156893ms step_avg:99.17ms
step:1593/1770 train_time:156996ms step_avg:99.18ms
step:1594/1770 train_time:157100ms step_avg:99.18ms
step:1595/1770 train_time:157203ms step_avg:99.18ms
step:1596/1770 train_time:157308ms step_avg:99.19ms
step:1597/1770 train_time:157410ms step_avg:99.19ms
step:1598/1770 train_time:157514ms step_avg:99.19ms
step:1599/1770 train_time:157618ms step_avg:99.19ms
step:1600/1770 train_time:157723ms step_avg:99.20ms
step:1601/1770 train_time:157827ms step_avg:99.20ms
step:1602/1770 train_time:157931ms step_avg:99.20ms
step:1603/1770 train_time:158034ms step_avg:99.21ms
step:1604/1770 train_time:158138ms step_avg:99.21ms
step:1605/1770 train_time:158240ms step_avg:99.21ms
step:1606/1770 train_time:158344ms step_avg:99.21ms
step:1607/1770 train_time:158450ms step_avg:99.22ms
step:1608/1770 train_time:158554ms step_avg:99.22ms
step:1609/1770 train_time:158658ms step_avg:99.22ms
step:1610/1770 train_time:158763ms step_avg:99.23ms
step:1611/1770 train_time:158868ms step_avg:99.23ms
step:1612/1770 train_time:158972ms step_avg:99.23ms
step:1613/1770 train_time:159075ms step_avg:99.24ms
step:1614/1770 train_time:159178ms step_avg:99.24ms
step:1615/1770 train_time:159282ms step_avg:99.24ms
step:1616/1770 train_time:159385ms step_avg:99.24ms
step:1617/1770 train_time:159491ms step_avg:99.25ms
step:1618/1770 train_time:159595ms step_avg:99.25ms
step:1619/1770 train_time:159699ms step_avg:99.25ms
step:1620/1770 train_time:159803ms step_avg:99.26ms
step:1621/1770 train_time:159908ms step_avg:99.26ms
step:1622/1770 train_time:160012ms step_avg:99.26ms
step:1623/1770 train_time:160117ms step_avg:99.27ms
step:1624/1770 train_time:160220ms step_avg:99.27ms
step:1625/1770 train_time:160322ms step_avg:99.27ms
step:1625/1770 val_loss:3.3079 train_time:160424ms step_avg:99.33ms
step:1626/1770 train_time:160445ms step_avg:99.29ms
step:1627/1770 train_time:160536ms step_avg:99.28ms
step:1628/1770 train_time:160640ms step_avg:99.28ms
step:1629/1770 train_time:160743ms step_avg:99.29ms
step:1630/1770 train_time:160846ms step_avg:99.29ms
step:1631/1770 train_time:160948ms step_avg:99.29ms
step:1632/1770 train_time:161052ms step_avg:99.29ms
step:1633/1770 train_time:161155ms step_avg:99.29ms
step:1634/1770 train_time:161258ms step_avg:99.30ms
step:1635/1770 train_time:161361ms step_avg:99.30ms
step:1636/1770 train_time:161465ms step_avg:99.30ms
step:1637/1770 train_time:161571ms step_avg:99.31ms
step:1638/1770 train_time:161674ms step_avg:99.31ms
step:1639/1770 train_time:161778ms step_avg:99.31ms
step:1640/1770 train_time:161882ms step_avg:99.31ms
step:1641/1770 train_time:161985ms step_avg:99.32ms
step:1642/1770 train_time:162087ms step_avg:99.32ms
step:1643/1770 train_time:162191ms step_avg:99.32ms
step:1644/1770 train_time:162296ms step_avg:99.32ms
step:1645/1770 train_time:162398ms step_avg:99.33ms
step:1646/1770 train_time:162504ms step_avg:99.33ms
step:1647/1770 train_time:162608ms step_avg:99.33ms
step:1648/1770 train_time:162713ms step_avg:99.34ms
step:1649/1770 train_time:162816ms step_avg:99.34ms
step:1650/1770 train_time:162920ms step_avg:99.34ms
step:1651/1770 train_time:163023ms step_avg:99.34ms
step:1652/1770 train_time:163127ms step_avg:99.35ms
step:1653/1770 train_time:163230ms step_avg:99.35ms
step:1654/1770 train_time:163337ms step_avg:99.35ms
step:1655/1770 train_time:163443ms step_avg:99.36ms
step:1656/1770 train_time:163547ms step_avg:99.36ms
step:1657/1770 train_time:163652ms step_avg:99.36ms
step:1658/1770 train_time:163756ms step_avg:99.37ms
step:1659/1770 train_time:163862ms step_avg:99.37ms
step:1660/1770 train_time:163965ms step_avg:99.37ms
step:1661/1770 train_time:164069ms step_avg:99.38ms
step:1662/1770 train_time:164173ms step_avg:99.38ms
step:1663/1770 train_time:164275ms step_avg:99.38ms
step:1664/1770 train_time:164378ms step_avg:99.38ms
step:1665/1770 train_time:164480ms step_avg:99.38ms
step:1666/1770 train_time:164585ms step_avg:99.39ms
step:1667/1770 train_time:164688ms step_avg:99.39ms
step:1668/1770 train_time:164791ms step_avg:99.39ms
step:1669/1770 train_time:164893ms step_avg:99.39ms
step:1670/1770 train_time:164996ms step_avg:99.40ms
step:1671/1770 train_time:165101ms step_avg:99.40ms
step:1672/1770 train_time:165205ms step_avg:99.40ms
step:1673/1770 train_time:165310ms step_avg:99.40ms
step:1674/1770 train_time:165412ms step_avg:99.41ms
step:1675/1770 train_time:165515ms step_avg:99.41ms
step:1676/1770 train_time:165620ms step_avg:99.41ms
step:1677/1770 train_time:165727ms step_avg:99.42ms
step:1678/1770 train_time:165829ms step_avg:99.42ms
step:1679/1770 train_time:165934ms step_avg:99.42ms
step:1680/1770 train_time:166037ms step_avg:99.42ms
step:1681/1770 train_time:166141ms step_avg:99.43ms
step:1682/1770 train_time:166246ms step_avg:99.43ms
step:1683/1770 train_time:166348ms step_avg:99.43ms
step:1684/1770 train_time:166451ms step_avg:99.43ms
step:1685/1770 train_time:166555ms step_avg:99.44ms
step:1686/1770 train_time:166661ms step_avg:99.44ms
step:1687/1770 train_time:166766ms step_avg:99.44ms
step:1688/1770 train_time:166869ms step_avg:99.45ms
step:1689/1770 train_time:166973ms step_avg:99.45ms
step:1690/1770 train_time:167076ms step_avg:99.45ms
step:1691/1770 train_time:167180ms step_avg:99.45ms
step:1692/1770 train_time:167283ms step_avg:99.46ms
step:1693/1770 train_time:167389ms step_avg:99.46ms
step:1694/1770 train_time:167492ms step_avg:99.46ms
step:1695/1770 train_time:167596ms step_avg:99.46ms
step:1696/1770 train_time:167701ms step_avg:99.47ms
step:1697/1770 train_time:167806ms step_avg:99.47ms
step:1698/1770 train_time:167911ms step_avg:99.47ms
step:1699/1770 train_time:168014ms step_avg:99.48ms
step:1700/1770 train_time:168117ms step_avg:99.48ms
step:1701/1770 train_time:168219ms step_avg:99.48ms
step:1702/1770 train_time:168323ms step_avg:99.48ms
step:1703/1770 train_time:168426ms step_avg:99.48ms
step:1704/1770 train_time:168531ms step_avg:99.49ms
step:1705/1770 train_time:168635ms step_avg:99.49ms
step:1706/1770 train_time:168738ms step_avg:99.49ms
step:1707/1770 train_time:168843ms step_avg:99.49ms
step:1708/1770 train_time:168947ms step_avg:99.50ms
step:1709/1770 train_time:169052ms step_avg:99.50ms
step:1710/1770 train_time:169160ms step_avg:99.51ms
step:1711/1770 train_time:169265ms step_avg:99.51ms
step:1712/1770 train_time:169370ms step_avg:99.51ms
step:1713/1770 train_time:169473ms step_avg:99.51ms
step:1714/1770 train_time:169578ms step_avg:99.52ms
step:1715/1770 train_time:169681ms step_avg:99.52ms
step:1716/1770 train_time:169785ms step_avg:99.52ms
step:1717/1770 train_time:169889ms step_avg:99.52ms
step:1718/1770 train_time:169994ms step_avg:99.53ms
step:1719/1770 train_time:170099ms step_avg:99.53ms
step:1720/1770 train_time:170204ms step_avg:99.53ms
step:1721/1770 train_time:170308ms step_avg:99.54ms
step:1722/1770 train_time:170416ms step_avg:99.54ms
step:1723/1770 train_time:170522ms step_avg:99.55ms
step:1724/1770 train_time:170628ms step_avg:99.55ms
step:1725/1770 train_time:170735ms step_avg:99.55ms
step:1726/1770 train_time:170841ms step_avg:99.56ms
step:1727/1770 train_time:170945ms step_avg:99.56ms
step:1728/1770 train_time:171051ms step_avg:99.56ms
step:1729/1770 train_time:171155ms step_avg:99.57ms
step:1730/1770 train_time:171260ms step_avg:99.57ms
step:1731/1770 train_time:171368ms step_avg:99.57ms
step:1732/1770 train_time:171471ms step_avg:99.58ms
step:1733/1770 train_time:171577ms step_avg:99.58ms
step:1734/1770 train_time:171680ms step_avg:99.58ms
step:1735/1770 train_time:171785ms step_avg:99.59ms
step:1736/1770 train_time:171889ms step_avg:99.59ms
step:1737/1770 train_time:171994ms step_avg:99.59ms
step:1738/1770 train_time:172098ms step_avg:99.59ms
step:1739/1770 train_time:172202ms step_avg:99.60ms
step:1740/1770 train_time:172306ms step_avg:99.60ms
step:1741/1770 train_time:172413ms step_avg:99.60ms
step:1742/1770 train_time:172520ms step_avg:99.61ms
step:1743/1770 train_time:172625ms step_avg:99.61ms
step:1744/1770 train_time:172730ms step_avg:99.61ms
step:1745/1770 train_time:172834ms step_avg:99.62ms
step:1746/1770 train_time:172940ms step_avg:99.62ms
step:1747/1770 train_time:173044ms step_avg:99.62ms
step:1748/1770 train_time:173150ms step_avg:99.63ms
step:1749/1770 train_time:173255ms step_avg:99.63ms
step:1750/1770 train_time:173359ms step_avg:99.63ms
step:1750/1770 val_loss:3.2813 train_time:173462ms step_avg:99.69ms
step:1751/1770 train_time:173483ms step_avg:99.65ms
step:1752/1770 train_time:173578ms step_avg:99.64ms
step:1753/1770 train_time:173683ms step_avg:99.65ms
step:1754/1770 train_time:173788ms step_avg:99.65ms
step:1755/1770 train_time:173892ms step_avg:99.65ms
step:1756/1770 train_time:173997ms step_avg:99.65ms
step:1757/1770 train_time:174102ms step_avg:99.66ms
step:1758/1770 train_time:174206ms step_avg:99.66ms
step:1759/1770 train_time:174311ms step_avg:99.66ms
step:1760/1770 train_time:174415ms step_avg:99.67ms
step:1761/1770 train_time:174521ms step_avg:99.67ms
step:1762/1770 train_time:174630ms step_avg:99.67ms
step:1763/1770 train_time:174733ms step_avg:99.68ms
step:1764/1770 train_time:174837ms step_avg:99.68ms
step:1765/1770 train_time:174942ms step_avg:99.68ms
step:1766/1770 train_time:175050ms step_avg:99.69ms
step:1767/1770 train_time:175153ms step_avg:99.69ms
step:1768/1770 train_time:175258ms step_avg:99.69ms
step:1769/1770 train_time:175362ms step_avg:99.69ms
step:1770/1770 train_time:175466ms step_avg:99.70ms
step:1770/1770 val_loss:3.2782 train_time:175570ms step_avg:99.76ms
peak memory allocated: 29898 MiB reserved: 44552 MiB
