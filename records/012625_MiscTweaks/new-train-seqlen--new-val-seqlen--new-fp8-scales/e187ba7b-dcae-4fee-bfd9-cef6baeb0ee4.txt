import os
import sys
with open(sys.argv[0]) as f:
    code = f.read() # read the code of this file ASAP, for logging
import uuid
import time
from dataclasses import dataclass
from functools import lru_cache
from pathlib import Path
import numpy as np

os.environ["PYTORCH_CUDA_ALLOC_CONF"] = "expandable_segments:True"
import torch
torch.empty(1, device="cuda", requires_grad=True).backward() # prevents a bug on some systems
from torch import Tensor, nn
import torch.nn.functional as F
import torch.distributed as dist
# use of FlexAttention contributed by @KoszarskyB
from torch.nn.attention.flex_attention import BlockMask, flex_attention
torch._inductor.config.coordinate_descent_tuning = True # turn this off for a faster compile time (but slightly slower run)

# -----------------------------------------------------------------------------
# Custom operators : FP8 matmul for lm_head by @YouJiacheng

@torch.library.custom_op("nanogpt::mm", mutates_args=())
def mm_op(x: Tensor, w: Tensor, x_s: float, w_s: float, grad_s: float) -> tuple[Tensor, Tensor, Tensor]:
    @torch.compile
    def impl(x: Tensor, w: Tensor):
        assert x.is_contiguous() and w.is_contiguous()
        x_f8 = x.mul(x_s).to(torch.float8_e4m3fn)
        w_f8 = w.mul(w_s).to(torch.float8_e4m3fn)
        out = torch._scaled_mm(
            x_f8,
            w_f8.t(),
            out_dtype=torch.bfloat16,
            scale_a=x.new_tensor(1 / x_s, dtype=torch.float32),
            scale_b=x.new_tensor(1 / w_s, dtype=torch.float32),
            use_fast_accum=True,
        )
        return out, x_f8, w_f8

    return impl(x, w)

@mm_op.register_fake
def _(x: Tensor, w: Tensor, *_):
    assert x.ndim == w.ndim == 2
    assert x.shape[1] == w.shape[1]
    assert x.device == w.device
    assert x.is_contiguous() and w.is_contiguous()
    return x @ w.t(), x.to(torch.float8_e4m3fn), w.to(torch.float8_e4m3fn)

@torch.library.custom_op("nanogpt::mm_backward", mutates_args=())
def mm_backward_op(g: Tensor, x_f8: Tensor, w_f8: Tensor, x_s: float, w_s: float, grad_s: float) -> tuple[Tensor, Tensor]:
    @torch.compile
    def impl(grad: Tensor, x_f8: Tensor, w_f8: Tensor):
        assert grad.is_contiguous()
        x_inv_s = grad.new_tensor(1 / x_s, dtype=torch.float32)
        w_inv_s = grad.new_tensor(1 / w_s, dtype=torch.float32)
        grad_inv_s = grad.new_tensor(1 / grad_s, dtype=torch.float32)
        grad_f8 = grad.mul(grad_s).to(torch.float8_e5m2)
        grad_x = torch._scaled_mm(
            grad_f8,
            w_f8.t().contiguous().t(),
            out_dtype=torch.bfloat16,
            scale_a=grad_inv_s,
            scale_b=w_inv_s,
            use_fast_accum=False,
        )
        # faster than grad_f8_t @ x_f8, for (d_out, d_in) == (50304, 768)
        grad_w = torch._scaled_mm(
            x_f8.t().contiguous(),
            grad_f8.t().contiguous().t(),
            out_dtype=torch.float32,
            scale_a=x_inv_s,
            scale_b=grad_inv_s,
            use_fast_accum=False,
        ).t()
        return grad_x, grad_w

    return impl(g, x_f8, w_f8)

@mm_backward_op.register_fake
def _(g: Tensor, x_f8: Tensor, w_f8: Tensor, *_):
    return x_f8.to(torch.bfloat16), w_f8.to(torch.float32)

def backward(ctx, grad_out: Tensor, *_):
    x_f8, w_f8 = ctx.saved_tensors
    x_s, w_s, grad_s = ctx.scales
    grad_x, grad_w = torch.ops.nanogpt.mm_backward(
        grad_out, x_f8, w_f8, x_s, w_s, grad_s
    )
    return grad_x, grad_w, None, None, None

def setup_context(ctx: torch.autograd.function.FunctionCtx, inputs, output):
    *_, x_s, w_s, grad_s = inputs
    _, x_f8, w_f8 = output
    ctx.save_for_backward(x_f8, w_f8)
    ctx.scales = x_s, w_s, grad_s
    ctx.set_materialize_grads(False)

mm_op.register_autograd(backward, setup_context=setup_context)

# -----------------------------------------------------------------------------
# Muon optimizer

@torch.compile
def zeropower_via_newtonschulz5(G: Tensor, steps: int) -> Tensor:
    """
    Newton-Schulz iteration to compute the zeroth power / orthogonalization of G. We opt to use a
    quintic iteration whose coefficients are selected to maximize the slope at zero. For the purpose
    of minimizing steps, it turns out to be empirically effective to keep increasing the slope at
    zero even beyond the point where the iteration no longer converges all the way to one everywhere
    on the interval. This iteration therefore does not produce UV^T but rather something like US'V^T
    where S' is diagonal with S_{ii}' ~ Uniform(0.5, 1.5), which turns out not to hurt model
    performance at all relative to UV^T, where USV^T = G is the SVD.
    """
    assert G.ndim >= 2 # batched Muon implementation by @scottjmaddox, and put into practice in the record by @YouJiacheng
    a, b, c = (3.4445, -4.7750,  2.0315)
    X = G.bfloat16()
    if G.size(-2) > G.size(-1):
        X = X.mT

    # Ensure spectral norm is at most 1
    X = X / (X.norm(dim=(-2, -1), keepdim=True) + 1e-7)
    # Perform the NS iterations
    for _ in range(steps):
        A = X @ X.mT
        B = b * A + c * A @ A # quintic computation strategy adapted from suggestion by @jxbz, @leloykun, and @YouJiacheng
        X = a * X + B @ X
    
    if G.size(-2) > G.size(-1):
        X = X.mT
    return X

class Muon(torch.optim.Optimizer):
    """
    Muon - MomentUm Orthogonalized by Newton-schulz

    Muon internally runs standard SGD-momentum, and then performs an orthogonalization post-
    processing step, in which each 2D parameter's update is replaced with the nearest orthogonal
    matrix. To efficiently orthogonalize each update, we use a Newton-Schulz iteration, which has
    the advantage that it can be stably run in bfloat16 on the GPU.

    Some warnings:
    - This optimizer assumes that all parameters passed in are 2D.
    - It should not be used for the embedding layer, the final fully connected layer, or any {0,1}-D
    parameters; those should all be optimized by a standard method (e.g., AdamW).
    - To use it with 4D convolutional filters, it works well to just flatten their last 3 dimensions.
    - We believe it is unlikely to work well for training with small batch size.
    - We believe it may not work well for finetuning pretrained models, but we haven"t tested this.
    - We have not yet tried this optimizer for training scenarios larger than NanoGPT (124M).

    Arguments:
        lr: The learning rate used by the internal SGD.
        momentum: The momentum used by the internal SGD.
        nesterov: Whether to use Nesterov-style momentum in the internal SGD. (recommended)
        ns_steps: The number of Newton-Schulz iteration steps to use.
    """
    def __init__(self, params, lr=0.02, momentum=0.95, nesterov=True, ns_steps=5, rank=0, world_size=1):
        self.rank = rank
        self.world_size = world_size
        defaults = dict(lr=lr, momentum=momentum, nesterov=nesterov, ns_steps=ns_steps)
        params: list[Tensor] = [*params]
        assert all(isinstance(p, Tensor) for p in params)
        sizes = {p.numel() for p in params}
        def create_update_buffer(size: int):
            b = torch.empty(self.world_size, size, dtype=torch.bfloat16, device="cuda")
            return dict(update_buffer=b, update_buffer_views=[b[i] for i in range(self.world_size)])
        param_groups = [
            dict(params=[p for p in params if p.numel() == size], **create_update_buffer(size)) for size in sizes]
        super().__init__(param_groups, defaults)

    @torch.no_grad()
    def step(self):
        for group in self.param_groups:
            lr = group["lr"]
            momentum = group["momentum"]
            nesterov = group["nesterov"]
            ns_steps = group["ns_steps"]
            update_buffer = group["update_buffer"]
            update_buffer_views: list[Tensor] = group["update_buffer_views"]
            # generate weight updates in distributed fashion
            params: list[Tensor] = group["params"]
            handle = None
            params_world = None
            def update_prev(): # optimized Muon implementation contributed by @YouJiacheng
                if params_world is None:
                    return
                assert handle is not None
                handle.wait()
                for p_world, g_world in zip(params_world, update_buffer_views):
                    p_world.add_(
                        g_world.view_as(p_world),
                        alpha=-lr * max(1, p_world.size(-2) / p_world.size(-1)) ** 0.5,
                    )
            for base_i in range(len(params))[::self.world_size]:
                if base_i + self.rank < len(params):
                    p = params[base_i + self.rank]
                    g = p.grad
                    assert g is not None
                    state = self.state[p]
                    if "momentum_buffer" not in state:
                        state["momentum_buffer"] = torch.zeros_like(g)
                    buf: Tensor = state["momentum_buffer"]
                    buf.lerp_(g, 1 - momentum)
                    g = g.lerp_(buf, momentum) if nesterov else buf
                    g = zeropower_via_newtonschulz5(g, steps=ns_steps).flatten()
                else:
                    g = update_buffer_views[self.rank]
                update_prev() # async all_gather instead of sync all_reduce by @YouJiacheng
                handle = dist.all_gather_into_tensor(update_buffer, g, async_op=True)
                params_world = params[base_i : base_i + self.world_size]
            update_prev()

# -----------------------------------------------------------------------------
# PyTorch nn.Module definitions for the model

def norm(x: Tensor):
    return F.rms_norm(x, (x.size(-1),))

class CastedLinear(nn.Linear):
    def __init__(self, in_features: int, out_features: int, use_fp8: bool = False, x_scale: float = 1.0, w_scale: float = 1.0, grad_scale: float = 1.0):
        super().__init__(in_features, out_features, bias=False)
        self.use_fp8 = use_fp8
        self.x_scale = x_scale
        self.w_scale = w_scale
        self.grad_scale = grad_scale

    def reset_parameters(self) -> None:
        std = 0.5 * (self.in_features ** -0.5) # 0.5 is a bit better than the default 1/sqrt(3)
        bound = (3 ** 0.5) * std
        with torch.no_grad():
            self.weight.uniform_(-bound, bound)

    def forward(self, x: Tensor):
        if self.use_fp8 and self.training:
            _x = x.flatten(0, -2)
            out: Tensor = torch.ops.nanogpt.mm(_x, self.weight, x_s=self.x_scale, w_s=self.w_scale, grad_s=self.grad_scale)[0]
            return out.reshape(*x.shape[:-1], -1)
        else:
            with torch.autocast("cuda", dtype=torch.bfloat16):
                return F.linear(x, self.weight.type_as(x))

class Rotary(nn.Module):
    def __init__(self, dim: int, max_seq_len: int):
        super().__init__()
        # half-truncate RoPE by @YouJiacheng (w/ base freq tuning)
        angular_freq = (1 / 1024) ** torch.linspace(0, 1, steps=dim//4, dtype=torch.float32)
        angular_freq = torch.cat([angular_freq, angular_freq.new_zeros(dim//4)])
        t = torch.arange(max_seq_len, dtype=torch.float32)
        theta = torch.einsum("i,j -> ij", t, angular_freq)
        self.cos = nn.Buffer(theta.cos(), persistent=False)
        self.sin = nn.Buffer(theta.sin(), persistent=False)

    def forward(self, x_BTHD: Tensor):
        assert self.cos.size(0) >= x_BTHD.size(-3)
        cos, sin = self.cos[None, :x_BTHD.size(-3), None, :], self.sin[None, :x_BTHD.size(-3), None, :]
        x1, x2 = x_BTHD.to(dtype=torch.float32).chunk(2, dim=-1)
        y1 = x1 * cos + x2 * sin
        y2 = x1 * (-sin) + x2 * cos
        return torch.cat((y1, y2), 3).type_as(x_BTHD)

class CausalSelfAttention(nn.Module):
    def __init__(self, dim: int, num_heads: int, max_seq_len: int):
        super().__init__()
        assert dim % num_heads == 0
        self.num_heads = num_heads
        std = 0.5 * (dim ** -0.5)
        bound = (3 ** 0.5) * std # improved init scale by @YouJiacheng
        # merged QKV weights: suggested by many, implemented by @fernbear.bsky.social, and further improved by @YouJiacheng
        # https://x.com/hi_tysam/status/1879699187107033311
        self.qkv_w = nn.Parameter(torch.empty(3, dim, dim).uniform_(-bound, bound))
        self.lambdas = nn.Parameter(torch.tensor([0.5, 0.5]))
        self.rotary = Rotary(dim // num_heads, max_seq_len)
        self.c_proj = CastedLinear(dim, dim)
        self.c_proj.weight.detach().zero_() # zero init suggested by @Grad62304977
        # scale the attention logits by given constant, instead of the default head_dim**-0.5, by @leloykun
        # inspired by learnable scalars used by @brendanh0gan https://x.com/hi_tysam/status/1879693583898591283
        self.attn_scale = 0.12

    def forward(self, x: Tensor, ve: Tensor | None, block_mask: BlockMask):
        B, T = x.size(0), x.size(1) # batch size, sequence length
        assert B == 1, "Must use batch size = 1 for FlexAttention"
        q, k, v = F.linear(x, self.qkv_w.flatten(end_dim=1).type_as(x)).view(B, T, 3*self.num_heads, -1).chunk(3, dim=-2)
        if ve is not None:
            v = self.lambdas[0] * v + self.lambdas[1] * ve.view_as(v) # @KoszarskyB & @Grad62304977
        else: # skip mid-layers token value embeddings by @YouJiacheng
            v = self.lambdas[0] * v
        q, k = norm(q), norm(k) # QK norm @Grad62304977
        q, k = self.rotary(q), self.rotary(k)
        y = flex_attention(q.transpose(1, 2), k.transpose(1, 2), v.transpose(1, 2), block_mask=block_mask, scale=self.attn_scale)
        y = y.transpose(1, 2).contiguous().view_as(x) # re-assemble all head outputs side by side
        y = self.c_proj(y)
        return y

class MLP(nn.Module):
    def __init__(self, dim: int):
        super().__init__()
        self.c_fc = CastedLinear(dim, 4 * dim)
        self.c_proj = CastedLinear(4 * dim, dim)
        self.c_proj.weight.detach().zero_() # zero init suggested by @Grad62304977

    def forward(self, x: Tensor):
        x = self.c_fc(x)
        x = F.relu(x).square() # https://arxiv.org/abs/2109.08668v2; ~1-2% better than GELU; suggested by @SKYLINEZ007 and @Grad62304977
        x = self.c_proj(x)
        return x

class Block(nn.Module):
    def __init__(self, model_dim: int, num_heads: int, layer_idx: int, max_seq_len: int):
        super().__init__()
        # skip attention of blocks.7 (the 8th layer) by @YouJiacheng
        self.attn = CausalSelfAttention(model_dim, num_heads, max_seq_len) if layer_idx != 7 else None
        self.mlp = MLP(model_dim)
        self.lambdas = nn.Parameter(torch.tensor([1., 0.]))

    def forward(self, x: Tensor, ve: Tensor | None, x0: Tensor, block_mask: BlockMask):
        x = self.lambdas[0] * x + self.lambdas[1] * x0
        if self.attn is not None:
            x = x + self.attn(norm(x), ve, block_mask)
        x = x + self.mlp(norm(x))
        return x

class ValueEmbedding(nn.Module):
    def __init__(self, vocab_size: int, embedding_dim: int, num_layers: int, num_embeddings: int = 3):
        super().__init__()
        self.num_layers = num_layers
        self.num_embeddings = num_embeddings
        self.embed = nn.ModuleList([nn.Embedding(vocab_size, embedding_dim) for _ in range(num_embeddings)])

    def forward(self, x: Tensor) -> list[Tensor | None]:
        ve = [emb(x) for emb in self.embed]
        # 012 ... 012 structure on token value embeddings by @YouJiacheng, improved on @leloykun's U-net structure
        ve = [ve[0], ve[1], ve[2]] + [None] * (self.num_layers - 2 * self.num_embeddings) + [ve[0], ve[1], ve[2]]
        return ve

# -----------------------------------------------------------------------------
# The main model

def next_multiple_of_n(v: float | int, *, n: int):
    return next(x for x in range(n, int(v) + 1 + n, n) if x >= v)

class GPT(nn.Module):
    def __init__(self, vocab_size: int, num_layers: int, num_heads: int, model_dim: int, max_seq_len: int):
        super().__init__()
        self.embed = nn.Embedding(vocab_size, model_dim)
        # token value embeddings by @KoszarskyB - inspired by @Grad62304977's value residual implementation following https://arxiv.org/abs/2410.17897
        self.value_embeds = ValueEmbedding(vocab_size, model_dim, num_layers)
        self.blocks = nn.ModuleList([Block(model_dim, num_heads, layer_idx, max_seq_len) for layer_idx in range(num_layers)])
        # U-net design by @brendanh0gan
        self.num_encoder_layers = num_layers // 2 # Half of the layers for encoder
        self.num_decoder_layers = num_layers - self.num_encoder_layers # Remaining for decoder
        # Add learnable skip connection weights for decoder layers
        self.skip_weights = nn.Parameter(torch.ones(self.num_decoder_layers))
        # there are only 50257 unique GPT-2 tokens; we extend to nearest multiple of 128 for efficiency.
        # suggested to me by @Grad62304977. this originates from Karpathy's experiments.
        self.lm_head = CastedLinear(model_dim, next_multiple_of_n(vocab_size, n=128), use_fp8=True, x_scale=2.0, w_scale=2.0**9, grad_scale=2.0**19)
        self.lm_head.weight.detach().zero_() # @Grad62304977

    def forward(self, input_seq: Tensor, target_seq: Tensor, sliding_window_num_blocks: Tensor):
        BLOCK_SIZE = 128
        assert input_seq.ndim == 1
        assert len(input_seq) % BLOCK_SIZE == 0
        NUM_BLOCKS = len(input_seq) // BLOCK_SIZE
        docs = (input_seq == 50256).cumsum(0)
        docs_low = docs.view(-1, BLOCK_SIZE)[:, 0].contiguous()
        docs_high = docs.view(-1, BLOCK_SIZE)[:, -1].contiguous()

        def document_causal(b, h, q_idx, kv_idx):
            causal_mask = q_idx >= kv_idx
            document_mask = docs[q_idx] == docs[kv_idx]
            return causal_mask & document_mask

        def dense_to_ordered(dense_mask: Tensor):
            num_blocks = dense_mask.sum(dim=-1, dtype=torch.int32)
            indices = dense_mask.argsort(dim=-1, descending=False, stable=True).flip(-1).to(torch.int32)
            return num_blocks[None, None].contiguous(), indices[None, None].contiguous()

        # manual block mask creation by @YouJiacheng
        def create_doc_swc_block_masks(sliding_window_num_blocks: Tensor):
            kv_idx = block_idx = torch.arange(NUM_BLOCKS, dtype=torch.int32, device="cuda")
            q_idx = block_idx[:, None]
            causal_bm = q_idx >= kv_idx
            causal_full_bm = q_idx > kv_idx
            document_bm = (docs_low[:, None] <= docs_high) & (docs_low <= docs_high[:, None])
            document_full_bm = (docs_low[:, None] == docs_high) & (docs_low == docs_high[:, None])
            nonzero_bm = causal_bm & document_bm
            full_bm  = causal_full_bm & document_full_bm
            kv_num_blocks, kv_indices = dense_to_ordered(nonzero_bm & ~full_bm)
            full_kv_num_blocks, full_kv_indices = dense_to_ordered(full_bm)
            def build_bm(sw_num_blocks: Tensor) -> BlockMask:
                return BlockMask.from_kv_blocks(
                    torch.clamp_max(kv_num_blocks, torch.clamp_min(sw_num_blocks - full_kv_num_blocks, 1)),
                    kv_indices,
                    torch.clamp_max(full_kv_num_blocks, sw_num_blocks - 1),
                    full_kv_indices,
                    BLOCK_SIZE=BLOCK_SIZE,
                    mask_mod=document_causal,
                )
            return build_bm(sliding_window_num_blocks), build_bm(sliding_window_num_blocks // 2)

        # Long-short SWA block masks by @leloykun & @YouJiacheng, adapated from suggestion by @Grad62304977, following Gemma 2 paper
        long_bm, short_bm = create_doc_swc_block_masks(sliding_window_num_blocks)

        x = x0 = norm(self.embed(input_seq)[None]) # use of norm here by @Grad62304977
        ve = self.value_embeds(input_seq)
        assert len(ve) == len(self.blocks)
        ve_enc, ve_dec = ve[:self.num_encoder_layers], ve[self.num_encoder_layers:]
        assert len(ve_enc) == self.num_encoder_layers and len(ve_dec) == self.num_decoder_layers

        # Store outputs for U-Net skip connections
        skip_connections = []
        # Encoder pass - process only the first half of the blocks
        block_masks = [long_bm, short_bm, short_bm, short_bm, long_bm, short_bm]
        assert len(block_masks) == self.num_encoder_layers
        for i in range(self.num_encoder_layers):
            x = self.blocks[i](x, ve_enc[i], x0, block_masks[i])
            skip_connections.append(x)
        # Decoder pass - process the remaining blocks with weighted skip connections
        block_masks.reverse()
        assert len(block_masks) == self.num_decoder_layers
        for i in range(self.num_decoder_layers):
            x = x + self.skip_weights[i] * skip_connections.pop()
            x = self.blocks[self.num_encoder_layers + i](x, ve_dec[i], x0, block_masks[i])
        x = norm(x)
        logits = self.lm_head(x)
        # @Grad62304977 added tanh softcapping following Gemma 2 paper, @KoszarskyB reduced it from 30 to 15, @YouJiacheng shifted it by +15 (2*sigmoid(2*x)=tanh(x)+1)
        logits = 30 * torch.sigmoid(logits.float() / 7.5)
        loss = F.cross_entropy(logits.view(-1, logits.size(-1)), target_seq)
        return loss

# -----------------------------------------------------------------------------
# Our own simple Distributed Data Loader

def _load_data_shard(file: Path):
    header = torch.from_file(f"{file}", False, 256, dtype=torch.int32) # header is 256 int32
    assert header[0] == 20240520, "magic number mismatch in the data .bin file"
    assert header[1] == 1, "unsupported version"
    num_tokens = int(header[2]) # number of tokens (claimed)
    with file.open("rb", buffering=0) as f:
        tokens = torch.empty(num_tokens, dtype=torch.uint16, pin_memory=True) # avoid pin_memory copy by @YouJiacheng
        f.seek(256 * 4)
        nbytes = f.readinto(tokens.numpy()) # avoid bytes->array copy by @YouJiacheng
        assert nbytes == 2 * num_tokens, "number of tokens read does not match header"
    return tokens

def distributed_data_generator(filename_pattern: str, batch_size: int, rank : int, world_size : int):
    files = sorted(Path.cwd().glob(filename_pattern))
    assert batch_size % world_size == 0
    local_batch_size = batch_size // world_size
    file_iter = iter(files) # use itertools.cycle(files) instead if you want to do multi-epoch training
    tokens, pos = _load_data_shard(next(file_iter)), 0
    while True:
        if pos + batch_size + 1 >= len(tokens):
            tokens, pos = _load_data_shard(next(file_iter)), 0
        buf = tokens[pos + rank * local_batch_size:][:local_batch_size + 1]
        inputs = buf[:-1].to(device="cuda", dtype=torch.int32, non_blocking=True) # no sync on host side;
        targets = buf[1:].to(device="cuda", dtype=torch.int64, non_blocking=True) # H2D in another stream isn"t helpful.
        pos += batch_size
        yield inputs, targets

# -----------------------------------------------------------------------------
# int main

@dataclass
class Hyperparameters:
    # data
    train_files = "data/fineweb10B/fineweb_train_*.bin" # input .bin to train on
    val_files = "data/fineweb10B/fineweb_val_*.bin" # input .bin to eval validation loss on
    val_tokens = 10485760 # how many tokens of validation data? it's important to keep this fixed for consistent comparisons
    # optimization
    num_iterations = 1770 # number of iterations to run
    cooldown_frac = 0.4 # fraction of training spent cooling down the learning rate
    # evaluation and logging
    val_loss_every = 125 # every how many steps to evaluate val loss? 0 for only at the end
    # implementation
    seq_len = 48*1024 # FlexAttention sequence length
    val_seq_len = 4*64*1024 # FlexAttention sequence length for validation
    save_checkpoint = False

def train(args: Hyperparameters):
    # torchrun sets these env variables
    rank = int(os.environ["RANK"])
    world_size = int(os.environ["WORLD_SIZE"])
    assert torch.cuda.is_available()
    device = torch.device("cuda", int(os.environ["LOCAL_RANK"]))
    torch.cuda.set_device(device)
    dist.init_process_group(backend="nccl", device_id=device)
    dist.barrier()
    master_process = (rank == 0) # this process will do logging, checkpointing etc.

    # begin logging
    logfile = None
    if master_process:
        run_id = uuid.uuid4()
        os.makedirs("logs", exist_ok=True)
        logfile = f"logs/{run_id}.txt"
        print(logfile)
    def print0(s, console=False):
        if master_process:
            with open(logfile, "a") as f:
                if console:
                    print(s)
                print(s, file=f)

    # begin by printing this file (the Python code)
    print0(code)
    print0("="*100)
    # log information about the hardware/software environment this is running on
    print0(f"Running Python {sys.version}")
    print0(f"Running PyTorch {torch.version.__version__} compiled for CUDA {torch.version.cuda}")
    def nvidia_smi():
        import subprocess  # avoid top level import
        return subprocess.run(["nvidia-smi"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True).stdout
    print0(nvidia_smi())
    print0("="*100)

    # load data
    batch_size = world_size * args.seq_len
    train_loader = distributed_data_generator(args.train_files, batch_size, rank, world_size)

    model = GPT(vocab_size=50257, num_layers=12, num_heads=6, model_dim=768, max_seq_len=max(args.seq_len, args.val_seq_len)).cuda()
    for m in model.modules():
        if isinstance(m, nn.Embedding):
            m.bfloat16()
    for param in model.parameters():
        dist.broadcast(param.detach(), 0)

    # collect the parameters to optimize
    hidden_matrix_params = [p for p in model.blocks.parameters() if p.ndim >= 2]
    embed_params = [model.embed.weight, *model.value_embeds.parameters()]
    scalar_params = [p for p in model.parameters() if p.ndim < 2]
    head_params = [model.lm_head.weight]

    # init the optimizer(s)
    adam_params = [dict(params=head_params, lr=0.008), dict(params=embed_params, lr=0.6), dict(params=scalar_params, lr=0.04)]
    # small adam epsilon by @YouJiacheng. this is an alternate method of fixing the world_size dependence
    # discovered by @fernbear.bsky.social https://x.com/hi_tysam/status/1879692937589875094
    optimizer1 = torch.optim.Adam(adam_params, betas=(0.8, 0.95), fused=True, eps=1e-10)
    optimizer2 = Muon(hidden_matrix_params, lr=0.05, momentum=0.95, rank=rank, world_size=world_size)
    optimizers = [optimizer1, optimizer2]

    # learning rate schedule: stable then decay
    def get_lr(it: int):
        t = 1 - it / args.num_iterations # time remaining in training
        assert 1 >= t >= 0
        w = min(t / args.cooldown_frac, 1.0) # 1 -> 0
        return w * 1.0 + (1 - w) * 0.1
    schedulers = [torch.optim.lr_scheduler.LambdaLR(opt, get_lr) for opt in optimizers]
    @lru_cache(1)
    def sw_num_blks(window_size: int):
        return torch.tensor(window_size // 128, dtype=torch.int32, pin_memory=True).cuda(non_blocking=True)

    model: nn.Module = torch.compile(model, dynamic=False)

    training_time_ms = 0
    # start the clock
    torch.cuda.synchronize()
    t0 = time.perf_counter()
    # begin training
    train_steps = args.num_iterations
    if master_process:
        from collections import defaultdict
        param_name_to_grad_scale_map = defaultdict(lambda: 1e9)
        param_name_to_weight_scale_map = defaultdict(lambda: 1e9)
    for step in range(train_steps + 1):
        last_step = (step == train_steps)
        # This effectively ignores timing first 10 steps, which are slower for weird reasons.
        # Alternately, and slightly more correctly in terms of benchmarking, we could do 10
        # steps with dummy data first, and then re-initialize the model and reset the loader.
        if step == 10:
            training_time_ms = 0
            t0 = time.perf_counter()
        timed_steps = float("nan") if step <= 11 else (step - 10) + 1 # <= 11 to avoid bug in val

        # Linearly increase the block-wise sliding window size over training 128 -> 1792:
        # increase by @fernbear.bsky.social; block-wise by @YouJiacheng
        window_size = next_multiple_of_n(1728 * step / train_steps, n=128)
        # --------------- VALIDATION SECTION -----------------
        if last_step or (args.val_loss_every > 0 and step % args.val_loss_every == 0):
            # stop the clock
            torch.cuda.synchronize()
            training_time_ms += 1000 * (time.perf_counter() - t0)
            model.eval()
            val_bs = world_size * args.val_seq_len
            assert args.val_tokens % val_bs == 0
            val_steps = args.val_tokens // val_bs
            val_loader = distributed_data_generator(args.val_files, val_bs, rank, world_size)
            val_loss = 0
            with torch.no_grad():
                for _ in range(val_steps):
                    x, y = next(val_loader)
                    val_loss += model(x, y, sw_num_blks(window_size))
            val_loss /= val_steps
            del val_loader
            dist.all_reduce(val_loss, op=dist.ReduceOp.AVG)
            print0(f"step:{step}/{train_steps} val_loss:{val_loss:.4f} train_time:{training_time_ms:.0f}ms step_avg:{training_time_ms/(timed_steps-1):.2f}ms", console=True)
            model.train()
            # start the clock again
            torch.cuda.synchronize()
            t0 = time.perf_counter()

        if last_step:
            if master_process and args.save_checkpoint:
                log = dict(step=step, code=code, model=model.state_dict(), optimizers=[opt.state_dict() for opt in optimizers])
                os.makedirs(f"logs/{run_id}", exist_ok=True)
                torch.save(log, f"logs/{run_id}/state_step{step:06d}.pt")
            # the last step only has the validation loop, so break to avoid training
            break

        # --------------- TRAINING SECTION BEGIN -----------------
        inputs, targets = next(train_loader)
        for input_seq, target_seq in zip(inputs.split(args.seq_len), targets.split(args.seq_len)):
            model(input_seq, target_seq, sw_num_blks(window_size)).backward()
        for param in model.parameters():
            dist.all_reduce(param.grad, op=dist.ReduceOp.AVG)
        if False and master_process and (step+5) % 25 == 0:
            for name, param in model.named_parameters():
                if not ("c_proj" in name or "c_fc" in name or "lm_head" in name):
                    continue
                if param.grad is not None:
                    grad_max_abs = param.grad.abs().max().item()
                    weight_max_abs = param.abs().max().item()
                    grad_scale = np.ceil(np.log2(0.8 * 40896.0 / grad_max_abs)) if grad_max_abs > 1e-9 else 1
                    weight_scale = np.ceil(np.log2(0.8 * 448.0 / weight_max_abs)) if weight_max_abs > 1e-9 else 1
                    if step > 0:
                        param_name_to_grad_scale_map[name] = min(param_name_to_grad_scale_map[name], grad_scale)
                        param_name_to_weight_scale_map[name] = min(param_name_to_weight_scale_map[name], weight_scale)
                    print0(f"{name:<40} | weight_scale={weight_scale:<3} | grad_scale={grad_scale:<3}", console=True)
        # momentum warmup for Muon
        frac = min(step / 300, 1)
        for group in optimizer2.param_groups:
            group["momentum"] = (1 - frac) * 0.85 + frac * 0.95
        # step the optimizers and schedulers
        for opt, sched in zip(optimizers, schedulers):
            opt.step()
            sched.step()
        # null the gradients
        model.zero_grad(set_to_none=True)
        # logging
        approx_time = training_time_ms + 1000 * (time.perf_counter() - t0)
        print0(f"step:{step+1}/{train_steps} train_time:{approx_time:.0f}ms step_avg:{approx_time/timed_steps:.2f}ms", console=True)
    if master_process:
        param_names = list(param_name_to_grad_scale_map.keys())
        for name in param_names:
            grad_scale = param_name_to_grad_scale_map[name]
            weight_scale = param_name_to_weight_scale_map[name]
            print0(f"{name:<40} | weight_scale={weight_scale:<3} | grad_scale={grad_scale:<3}", console=True)

    print0(
        f"peak memory allocated: {torch.cuda.max_memory_allocated() // 1024 // 1024} MiB "
        f"reserved: {torch.cuda.max_memory_reserved() // 1024 // 1024} MiB",
        console=True,
    )
    dist.destroy_process_group()

if __name__ == "__main__":
    args = Hyperparameters()
    train(args)

====================================================================================================
Running Python 3.10.12 (main, Sep 11 2024, 15:47:36) [GCC 11.4.0]
Running PyTorch 2.7.0.dev20250125+cu126 compiled for CUDA 12.6
Sat Jan 25 23:53:42 2025       
+---------------------------------------------------------------------------------------+
| NVIDIA-SMI 535.183.06             Driver Version: 535.183.06   CUDA Version: 12.4     |
|-----------------------------------------+----------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |
|                                         |                      |               MIG M. |
|=========================================+======================+======================|
|   0  NVIDIA H100 80GB HBM3          On  | 00000000:19:00.0 Off |                    0 |
| N/A   37C    P0             120W / 700W |   7713MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   1  NVIDIA H100 80GB HBM3          On  | 00000000:3B:00.0 Off |                    0 |
| N/A   29C    P0             113W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   2  NVIDIA H100 80GB HBM3          On  | 00000000:4C:00.0 Off |                    0 |
| N/A   28C    P0             114W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   3  NVIDIA H100 80GB HBM3          On  | 00000000:5D:00.0 Off |                    0 |
| N/A   37C    P0             117W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   4  NVIDIA H100 80GB HBM3          On  | 00000000:9B:00.0 Off |                    0 |
| N/A   37C    P0             119W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   5  NVIDIA H100 80GB HBM3          On  | 00000000:BB:00.0 Off |                    0 |
| N/A   29C    P0             112W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   6  NVIDIA H100 80GB HBM3          On  | 00000000:CB:00.0 Off |                    0 |
| N/A   36C    P0             116W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   7  NVIDIA H100 80GB HBM3          On  | 00000000:DB:00.0 Off |                    0 |
| N/A   28C    P0             113W / 700W |   3211MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
                                                                                         
+---------------------------------------------------------------------------------------+
| Processes:                                                                            |
|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |
|        ID   ID                                                             Usage      |
|=======================================================================================|
+---------------------------------------------------------------------------------------+

====================================================================================================
step:0/1770 val_loss:10.8258 train_time:0ms step_avg:nanms
step:1/1770 train_time:23219ms step_avg:nanms
step:2/1770 train_time:23735ms step_avg:nanms
step:3/1770 train_time:23830ms step_avg:nanms
step:4/1770 train_time:23923ms step_avg:nanms
step:5/1770 train_time:24016ms step_avg:nanms
step:6/1770 train_time:24110ms step_avg:nanms
step:7/1770 train_time:24204ms step_avg:nanms
step:8/1770 train_time:24297ms step_avg:nanms
step:9/1770 train_time:24393ms step_avg:nanms
step:10/1770 train_time:24484ms step_avg:nanms
step:11/1770 train_time:94ms step_avg:nanms
step:12/1770 train_time:188ms step_avg:nanms
step:13/1770 train_time:282ms step_avg:94.02ms
step:14/1770 train_time:377ms step_avg:94.16ms
step:15/1770 train_time:471ms step_avg:94.19ms
step:16/1770 train_time:565ms step_avg:94.19ms
step:17/1770 train_time:659ms step_avg:94.15ms
step:18/1770 train_time:753ms step_avg:94.18ms
step:19/1770 train_time:847ms step_avg:94.13ms
step:20/1770 train_time:941ms step_avg:94.08ms
step:21/1770 train_time:1034ms step_avg:94.02ms
step:22/1770 train_time:1128ms step_avg:94.03ms
step:23/1770 train_time:1221ms step_avg:93.96ms
step:24/1770 train_time:1316ms step_avg:93.98ms
step:25/1770 train_time:1410ms step_avg:93.98ms
step:26/1770 train_time:1504ms step_avg:93.97ms
step:27/1770 train_time:1598ms step_avg:93.99ms
step:28/1770 train_time:1692ms step_avg:94.00ms
step:29/1770 train_time:1786ms step_avg:93.98ms
step:30/1770 train_time:1880ms step_avg:93.98ms
step:31/1770 train_time:1973ms step_avg:93.97ms
step:32/1770 train_time:2067ms step_avg:93.97ms
step:33/1770 train_time:2161ms step_avg:93.94ms
step:34/1770 train_time:2255ms step_avg:93.94ms
step:35/1770 train_time:2349ms step_avg:93.95ms
step:36/1770 train_time:2443ms step_avg:93.96ms
step:37/1770 train_time:2537ms step_avg:93.95ms
step:38/1770 train_time:2631ms step_avg:93.96ms
step:39/1770 train_time:2725ms step_avg:93.98ms
step:40/1770 train_time:2819ms step_avg:93.97ms
step:41/1770 train_time:2913ms step_avg:93.97ms
step:42/1770 train_time:3007ms step_avg:93.97ms
step:43/1770 train_time:3101ms step_avg:93.96ms
step:44/1770 train_time:3194ms step_avg:93.95ms
step:45/1770 train_time:3288ms step_avg:93.94ms
step:46/1770 train_time:3381ms step_avg:93.93ms
step:47/1770 train_time:3475ms step_avg:93.91ms
step:48/1770 train_time:3569ms step_avg:93.91ms
step:49/1770 train_time:3662ms step_avg:93.91ms
step:50/1770 train_time:3756ms step_avg:93.91ms
step:51/1770 train_time:3851ms step_avg:93.92ms
step:52/1770 train_time:3944ms step_avg:93.91ms
step:53/1770 train_time:4038ms step_avg:93.91ms
step:54/1770 train_time:4132ms step_avg:93.90ms
step:55/1770 train_time:4226ms step_avg:93.90ms
step:56/1770 train_time:4319ms step_avg:93.90ms
step:57/1770 train_time:4414ms step_avg:93.91ms
step:58/1770 train_time:4508ms step_avg:93.91ms
step:59/1770 train_time:4601ms step_avg:93.90ms
step:60/1770 train_time:4695ms step_avg:93.90ms
step:61/1770 train_time:4789ms step_avg:93.90ms
step:62/1770 train_time:4883ms step_avg:93.90ms
step:63/1770 train_time:4976ms step_avg:93.89ms
step:64/1770 train_time:5070ms step_avg:93.89ms
step:65/1770 train_time:5164ms step_avg:93.89ms
step:66/1770 train_time:5258ms step_avg:93.89ms
step:67/1770 train_time:5352ms step_avg:93.89ms
step:68/1770 train_time:5446ms step_avg:93.89ms
step:69/1770 train_time:5539ms step_avg:93.88ms
step:70/1770 train_time:5633ms step_avg:93.88ms
step:71/1770 train_time:5727ms step_avg:93.88ms
step:72/1770 train_time:5820ms step_avg:93.88ms
step:73/1770 train_time:5915ms step_avg:93.89ms
step:74/1770 train_time:6009ms step_avg:93.89ms
step:75/1770 train_time:6103ms step_avg:93.90ms
step:76/1770 train_time:6197ms step_avg:93.90ms
step:77/1770 train_time:6291ms step_avg:93.89ms
step:78/1770 train_time:6385ms step_avg:93.89ms
step:79/1770 train_time:6479ms step_avg:93.89ms
step:80/1770 train_time:6573ms step_avg:93.89ms
step:81/1770 train_time:6665ms step_avg:93.88ms
step:82/1770 train_time:6759ms step_avg:93.88ms
step:83/1770 train_time:6853ms step_avg:93.88ms
step:84/1770 train_time:6947ms step_avg:93.88ms
step:85/1770 train_time:7041ms step_avg:93.87ms
step:86/1770 train_time:7134ms step_avg:93.87ms
step:87/1770 train_time:7228ms step_avg:93.87ms
step:88/1770 train_time:7321ms step_avg:93.86ms
step:89/1770 train_time:7416ms step_avg:93.87ms
step:90/1770 train_time:7510ms step_avg:93.88ms
step:91/1770 train_time:7604ms step_avg:93.88ms
step:92/1770 train_time:7698ms step_avg:93.88ms
step:93/1770 train_time:7792ms step_avg:93.87ms
step:94/1770 train_time:7885ms step_avg:93.87ms
step:95/1770 train_time:7979ms step_avg:93.87ms
step:96/1770 train_time:8073ms step_avg:93.87ms
step:97/1770 train_time:8167ms step_avg:93.87ms
step:98/1770 train_time:8260ms step_avg:93.86ms
step:99/1770 train_time:8354ms step_avg:93.86ms
step:100/1770 train_time:8447ms step_avg:93.86ms
step:101/1770 train_time:8540ms step_avg:93.85ms
step:102/1770 train_time:8635ms step_avg:93.86ms
step:103/1770 train_time:8728ms step_avg:93.85ms
step:104/1770 train_time:8822ms step_avg:93.85ms
step:105/1770 train_time:8915ms step_avg:93.84ms
step:106/1770 train_time:9009ms step_avg:93.84ms
step:107/1770 train_time:9103ms step_avg:93.84ms
step:108/1770 train_time:9196ms step_avg:93.84ms
step:109/1770 train_time:9291ms step_avg:93.85ms
step:110/1770 train_time:9384ms step_avg:93.84ms
step:111/1770 train_time:9478ms step_avg:93.84ms
step:112/1770 train_time:9573ms step_avg:93.86ms
step:113/1770 train_time:9668ms step_avg:93.86ms
step:114/1770 train_time:9762ms step_avg:93.86ms
step:115/1770 train_time:9855ms step_avg:93.86ms
step:116/1770 train_time:9949ms step_avg:93.86ms
step:117/1770 train_time:10043ms step_avg:93.86ms
step:118/1770 train_time:10136ms step_avg:93.85ms
step:119/1770 train_time:10230ms step_avg:93.85ms
step:120/1770 train_time:10324ms step_avg:93.86ms
step:121/1770 train_time:10418ms step_avg:93.85ms
step:122/1770 train_time:10512ms step_avg:93.85ms
step:123/1770 train_time:10605ms step_avg:93.85ms
step:124/1770 train_time:10699ms step_avg:93.85ms
step:125/1770 train_time:10792ms step_avg:93.84ms
step:125/1770 val_loss:4.6453 train_time:10884ms step_avg:94.64ms
step:126/1770 train_time:10906ms step_avg:94.02ms
step:127/1770 train_time:10980ms step_avg:93.84ms
step:128/1770 train_time:11077ms step_avg:93.87ms
step:129/1770 train_time:11179ms step_avg:93.94ms
step:130/1770 train_time:11274ms step_avg:93.95ms
step:131/1770 train_time:11367ms step_avg:93.95ms
step:132/1770 train_time:11461ms step_avg:93.94ms
step:133/1770 train_time:11554ms step_avg:93.93ms
step:134/1770 train_time:11648ms step_avg:93.93ms
step:135/1770 train_time:11742ms step_avg:93.93ms
step:136/1770 train_time:11836ms step_avg:93.93ms
step:137/1770 train_time:11930ms step_avg:93.93ms
step:138/1770 train_time:12024ms step_avg:93.93ms
step:139/1770 train_time:12119ms step_avg:93.94ms
step:140/1770 train_time:12214ms step_avg:93.96ms
step:141/1770 train_time:12309ms step_avg:93.96ms
step:142/1770 train_time:12403ms step_avg:93.97ms
step:143/1770 train_time:12498ms step_avg:93.97ms
step:144/1770 train_time:12592ms step_avg:93.97ms
step:145/1770 train_time:12686ms step_avg:93.97ms
step:146/1770 train_time:12781ms step_avg:93.98ms
step:147/1770 train_time:12875ms step_avg:93.98ms
step:148/1770 train_time:12969ms step_avg:93.98ms
step:149/1770 train_time:13063ms step_avg:93.98ms
step:150/1770 train_time:13158ms step_avg:93.99ms
step:151/1770 train_time:13253ms step_avg:93.99ms
step:152/1770 train_time:13348ms step_avg:94.00ms
step:153/1770 train_time:13442ms step_avg:94.00ms
step:154/1770 train_time:13537ms step_avg:94.00ms
step:155/1770 train_time:13631ms step_avg:94.01ms
step:156/1770 train_time:13725ms step_avg:94.01ms
step:157/1770 train_time:13820ms step_avg:94.01ms
step:158/1770 train_time:13915ms step_avg:94.02ms
step:159/1770 train_time:14009ms step_avg:94.02ms
step:160/1770 train_time:14104ms step_avg:94.02ms
step:161/1770 train_time:14198ms step_avg:94.03ms
step:162/1770 train_time:14294ms step_avg:94.04ms
step:163/1770 train_time:14388ms step_avg:94.04ms
step:164/1770 train_time:14482ms step_avg:94.04ms
step:165/1770 train_time:14576ms step_avg:94.04ms
step:166/1770 train_time:14671ms step_avg:94.04ms
step:167/1770 train_time:14765ms step_avg:94.04ms
step:168/1770 train_time:14859ms step_avg:94.04ms
step:169/1770 train_time:14953ms step_avg:94.05ms
step:170/1770 train_time:15048ms step_avg:94.05ms
step:171/1770 train_time:15142ms step_avg:94.05ms
step:172/1770 train_time:15236ms step_avg:94.05ms
step:173/1770 train_time:15331ms step_avg:94.05ms
step:174/1770 train_time:15425ms step_avg:94.05ms
step:175/1770 train_time:15519ms step_avg:94.06ms
step:176/1770 train_time:15614ms step_avg:94.06ms
step:177/1770 train_time:15708ms step_avg:94.06ms
step:178/1770 train_time:15803ms step_avg:94.07ms
step:179/1770 train_time:15897ms step_avg:94.06ms
step:180/1770 train_time:15991ms step_avg:94.07ms
step:181/1770 train_time:16086ms step_avg:94.07ms
step:182/1770 train_time:16180ms step_avg:94.07ms
step:183/1770 train_time:16274ms step_avg:94.07ms
step:184/1770 train_time:16369ms step_avg:94.07ms
step:185/1770 train_time:16463ms step_avg:94.08ms
step:186/1770 train_time:16558ms step_avg:94.08ms
step:187/1770 train_time:16653ms step_avg:94.08ms
step:188/1770 train_time:16747ms step_avg:94.08ms
step:189/1770 train_time:16842ms step_avg:94.09ms
step:190/1770 train_time:16936ms step_avg:94.09ms
step:191/1770 train_time:17031ms step_avg:94.09ms
step:192/1770 train_time:17126ms step_avg:94.10ms
step:193/1770 train_time:17221ms step_avg:94.10ms
step:194/1770 train_time:17317ms step_avg:94.11ms
step:195/1770 train_time:17411ms step_avg:94.11ms
step:196/1770 train_time:17505ms step_avg:94.11ms
step:197/1770 train_time:17599ms step_avg:94.11ms
step:198/1770 train_time:17693ms step_avg:94.11ms
step:199/1770 train_time:17788ms step_avg:94.11ms
step:200/1770 train_time:17882ms step_avg:94.12ms
step:201/1770 train_time:17976ms step_avg:94.12ms
step:202/1770 train_time:18071ms step_avg:94.12ms
step:203/1770 train_time:18165ms step_avg:94.12ms
step:204/1770 train_time:18260ms step_avg:94.12ms
step:205/1770 train_time:18354ms step_avg:94.12ms
step:206/1770 train_time:18449ms step_avg:94.13ms
step:207/1770 train_time:18544ms step_avg:94.13ms
step:208/1770 train_time:18638ms step_avg:94.13ms
step:209/1770 train_time:18732ms step_avg:94.13ms
step:210/1770 train_time:18828ms step_avg:94.14ms
step:211/1770 train_time:18921ms step_avg:94.14ms
step:212/1770 train_time:19016ms step_avg:94.14ms
step:213/1770 train_time:19110ms step_avg:94.14ms
step:214/1770 train_time:19205ms step_avg:94.14ms
step:215/1770 train_time:19299ms step_avg:94.14ms
step:216/1770 train_time:19394ms step_avg:94.15ms
step:217/1770 train_time:19489ms step_avg:94.15ms
step:218/1770 train_time:19583ms step_avg:94.15ms
step:219/1770 train_time:19677ms step_avg:94.15ms
step:220/1770 train_time:19772ms step_avg:94.15ms
step:221/1770 train_time:19867ms step_avg:94.16ms
step:222/1770 train_time:19961ms step_avg:94.16ms
step:223/1770 train_time:20055ms step_avg:94.16ms
step:224/1770 train_time:20150ms step_avg:94.16ms
step:225/1770 train_time:20245ms step_avg:94.16ms
step:226/1770 train_time:20340ms step_avg:94.17ms
step:227/1770 train_time:20433ms step_avg:94.16ms
step:228/1770 train_time:20527ms step_avg:94.16ms
step:229/1770 train_time:20621ms step_avg:94.16ms
step:230/1770 train_time:20716ms step_avg:94.16ms
step:231/1770 train_time:20811ms step_avg:94.17ms
step:232/1770 train_time:20905ms step_avg:94.17ms
step:233/1770 train_time:21000ms step_avg:94.17ms
step:234/1770 train_time:21094ms step_avg:94.17ms
step:235/1770 train_time:21189ms step_avg:94.17ms
step:236/1770 train_time:21283ms step_avg:94.17ms
step:237/1770 train_time:21377ms step_avg:94.17ms
step:238/1770 train_time:21472ms step_avg:94.17ms
step:239/1770 train_time:21566ms step_avg:94.17ms
step:240/1770 train_time:21660ms step_avg:94.18ms
step:241/1770 train_time:21755ms step_avg:94.18ms
step:242/1770 train_time:21851ms step_avg:94.19ms
step:243/1770 train_time:21945ms step_avg:94.19ms
step:244/1770 train_time:22039ms step_avg:94.18ms
step:245/1770 train_time:22133ms step_avg:94.19ms
step:246/1770 train_time:22228ms step_avg:94.19ms
step:247/1770 train_time:22322ms step_avg:94.19ms
step:248/1770 train_time:22417ms step_avg:94.19ms
step:249/1770 train_time:22512ms step_avg:94.19ms
step:250/1770 train_time:22606ms step_avg:94.19ms
step:250/1770 val_loss:4.1049 train_time:22699ms step_avg:94.58ms
step:251/1770 train_time:22721ms step_avg:94.28ms
step:252/1770 train_time:22803ms step_avg:94.23ms
step:253/1770 train_time:22904ms step_avg:94.25ms
step:254/1770 train_time:23000ms step_avg:94.26ms
step:255/1770 train_time:23095ms step_avg:94.26ms
step:256/1770 train_time:23189ms step_avg:94.27ms
step:257/1770 train_time:23282ms step_avg:94.26ms
step:258/1770 train_time:23376ms step_avg:94.26ms
step:259/1770 train_time:23470ms step_avg:94.26ms
step:260/1770 train_time:23564ms step_avg:94.26ms
step:261/1770 train_time:23658ms step_avg:94.25ms
step:262/1770 train_time:23752ms step_avg:94.26ms
step:263/1770 train_time:23847ms step_avg:94.26ms
step:264/1770 train_time:23943ms step_avg:94.26ms
step:265/1770 train_time:24039ms step_avg:94.27ms
step:266/1770 train_time:24134ms step_avg:94.27ms
step:267/1770 train_time:24229ms step_avg:94.28ms
step:268/1770 train_time:24324ms step_avg:94.28ms
step:269/1770 train_time:24419ms step_avg:94.28ms
step:270/1770 train_time:24514ms step_avg:94.29ms
step:271/1770 train_time:24609ms step_avg:94.29ms
step:272/1770 train_time:24704ms step_avg:94.29ms
step:273/1770 train_time:24799ms step_avg:94.29ms
step:274/1770 train_time:24895ms step_avg:94.30ms
step:275/1770 train_time:24991ms step_avg:94.30ms
step:276/1770 train_time:25086ms step_avg:94.31ms
step:277/1770 train_time:25182ms step_avg:94.31ms
step:278/1770 train_time:25277ms step_avg:94.32ms
step:279/1770 train_time:25372ms step_avg:94.32ms
step:280/1770 train_time:25467ms step_avg:94.32ms
step:281/1770 train_time:25562ms step_avg:94.33ms
step:282/1770 train_time:25657ms step_avg:94.33ms
step:283/1770 train_time:25751ms step_avg:94.33ms
step:284/1770 train_time:25847ms step_avg:94.33ms
step:285/1770 train_time:25943ms step_avg:94.34ms
step:286/1770 train_time:26038ms step_avg:94.34ms
step:287/1770 train_time:26134ms step_avg:94.34ms
step:288/1770 train_time:26229ms step_avg:94.35ms
step:289/1770 train_time:26324ms step_avg:94.35ms
step:290/1770 train_time:26419ms step_avg:94.35ms
step:291/1770 train_time:26513ms step_avg:94.35ms
step:292/1770 train_time:26608ms step_avg:94.35ms
step:293/1770 train_time:26703ms step_avg:94.36ms
step:294/1770 train_time:26798ms step_avg:94.36ms
step:295/1770 train_time:26892ms step_avg:94.36ms
step:296/1770 train_time:26987ms step_avg:94.36ms
step:297/1770 train_time:27082ms step_avg:94.36ms
step:298/1770 train_time:27177ms step_avg:94.36ms
step:299/1770 train_time:27272ms step_avg:94.37ms
step:300/1770 train_time:27367ms step_avg:94.37ms
step:301/1770 train_time:27462ms step_avg:94.37ms
step:302/1770 train_time:27557ms step_avg:94.37ms
step:303/1770 train_time:27652ms step_avg:94.38ms
step:304/1770 train_time:27747ms step_avg:94.38ms
step:305/1770 train_time:27842ms step_avg:94.38ms
step:306/1770 train_time:27937ms step_avg:94.38ms
step:307/1770 train_time:28032ms step_avg:94.38ms
step:308/1770 train_time:28128ms step_avg:94.39ms
step:309/1770 train_time:28223ms step_avg:94.39ms
step:310/1770 train_time:28317ms step_avg:94.39ms
step:311/1770 train_time:28412ms step_avg:94.39ms
step:312/1770 train_time:28506ms step_avg:94.39ms
step:313/1770 train_time:28602ms step_avg:94.40ms
step:314/1770 train_time:28696ms step_avg:94.40ms
step:315/1770 train_time:28791ms step_avg:94.40ms
step:316/1770 train_time:28887ms step_avg:94.40ms
step:317/1770 train_time:28982ms step_avg:94.40ms
step:318/1770 train_time:29077ms step_avg:94.41ms
step:319/1770 train_time:29171ms step_avg:94.41ms
step:320/1770 train_time:29266ms step_avg:94.41ms
step:321/1770 train_time:29361ms step_avg:94.41ms
step:322/1770 train_time:29456ms step_avg:94.41ms
step:323/1770 train_time:29550ms step_avg:94.41ms
step:324/1770 train_time:29646ms step_avg:94.41ms
step:325/1770 train_time:29741ms step_avg:94.42ms
step:326/1770 train_time:29836ms step_avg:94.42ms
step:327/1770 train_time:29930ms step_avg:94.42ms
step:328/1770 train_time:30026ms step_avg:94.42ms
step:329/1770 train_time:30121ms step_avg:94.42ms
step:330/1770 train_time:30216ms step_avg:94.42ms
step:331/1770 train_time:30311ms step_avg:94.43ms
step:332/1770 train_time:30406ms step_avg:94.43ms
step:333/1770 train_time:30502ms step_avg:94.43ms
step:334/1770 train_time:30597ms step_avg:94.43ms
step:335/1770 train_time:30692ms step_avg:94.44ms
step:336/1770 train_time:30787ms step_avg:94.44ms
step:337/1770 train_time:30883ms step_avg:94.44ms
step:338/1770 train_time:30978ms step_avg:94.44ms
step:339/1770 train_time:31073ms step_avg:94.45ms
step:340/1770 train_time:31168ms step_avg:94.45ms
step:341/1770 train_time:31263ms step_avg:94.45ms
step:342/1770 train_time:31358ms step_avg:94.45ms
step:343/1770 train_time:31453ms step_avg:94.45ms
step:344/1770 train_time:31548ms step_avg:94.45ms
step:345/1770 train_time:31643ms step_avg:94.46ms
step:346/1770 train_time:31738ms step_avg:94.46ms
step:347/1770 train_time:31833ms step_avg:94.46ms
step:348/1770 train_time:31928ms step_avg:94.46ms
step:349/1770 train_time:32024ms step_avg:94.46ms
step:350/1770 train_time:32119ms step_avg:94.47ms
step:351/1770 train_time:32214ms step_avg:94.47ms
step:352/1770 train_time:32309ms step_avg:94.47ms
step:353/1770 train_time:32403ms step_avg:94.47ms
step:354/1770 train_time:32499ms step_avg:94.47ms
step:355/1770 train_time:32594ms step_avg:94.47ms
step:356/1770 train_time:32688ms step_avg:94.47ms
step:357/1770 train_time:32785ms step_avg:94.48ms
step:358/1770 train_time:32879ms step_avg:94.48ms
step:359/1770 train_time:32973ms step_avg:94.48ms
step:360/1770 train_time:33069ms step_avg:94.48ms
step:361/1770 train_time:33163ms step_avg:94.48ms
step:362/1770 train_time:33258ms step_avg:94.48ms
step:363/1770 train_time:33353ms step_avg:94.48ms
step:364/1770 train_time:33448ms step_avg:94.49ms
step:365/1770 train_time:33543ms step_avg:94.49ms
step:366/1770 train_time:33638ms step_avg:94.49ms
step:367/1770 train_time:33733ms step_avg:94.49ms
step:368/1770 train_time:33828ms step_avg:94.49ms
step:369/1770 train_time:33924ms step_avg:94.50ms
step:370/1770 train_time:34019ms step_avg:94.50ms
step:371/1770 train_time:34113ms step_avg:94.50ms
step:372/1770 train_time:34209ms step_avg:94.50ms
step:373/1770 train_time:34304ms step_avg:94.50ms
step:374/1770 train_time:34399ms step_avg:94.50ms
step:375/1770 train_time:34494ms step_avg:94.50ms
step:375/1770 val_loss:3.8968 train_time:34588ms step_avg:94.76ms
step:376/1770 train_time:34610ms step_avg:94.56ms
step:377/1770 train_time:34695ms step_avg:94.54ms
step:378/1770 train_time:34793ms step_avg:94.55ms
step:379/1770 train_time:34889ms step_avg:94.55ms
step:380/1770 train_time:34984ms step_avg:94.55ms
step:381/1770 train_time:35078ms step_avg:94.55ms
step:382/1770 train_time:35172ms step_avg:94.55ms
step:383/1770 train_time:35267ms step_avg:94.55ms
step:384/1770 train_time:35361ms step_avg:94.55ms
step:385/1770 train_time:35455ms step_avg:94.55ms
step:386/1770 train_time:35550ms step_avg:94.55ms
step:387/1770 train_time:35644ms step_avg:94.55ms
step:388/1770 train_time:35740ms step_avg:94.55ms
step:389/1770 train_time:35835ms step_avg:94.55ms
step:390/1770 train_time:35930ms step_avg:94.55ms
step:391/1770 train_time:36025ms step_avg:94.55ms
step:392/1770 train_time:36120ms step_avg:94.56ms
step:393/1770 train_time:36214ms step_avg:94.55ms
step:394/1770 train_time:36310ms step_avg:94.56ms
step:395/1770 train_time:36404ms step_avg:94.56ms
step:396/1770 train_time:36500ms step_avg:94.56ms
step:397/1770 train_time:36597ms step_avg:94.57ms
step:398/1770 train_time:36694ms step_avg:94.57ms
step:399/1770 train_time:36791ms step_avg:94.58ms
step:400/1770 train_time:36888ms step_avg:94.58ms
step:401/1770 train_time:36985ms step_avg:94.59ms
step:402/1770 train_time:37081ms step_avg:94.60ms
step:403/1770 train_time:37178ms step_avg:94.60ms
step:404/1770 train_time:37275ms step_avg:94.61ms
step:405/1770 train_time:37372ms step_avg:94.61ms
step:406/1770 train_time:37469ms step_avg:94.62ms
step:407/1770 train_time:37566ms step_avg:94.63ms
step:408/1770 train_time:37663ms step_avg:94.63ms
step:409/1770 train_time:37760ms step_avg:94.64ms
step:410/1770 train_time:37856ms step_avg:94.64ms
step:411/1770 train_time:37953ms step_avg:94.64ms
step:412/1770 train_time:38050ms step_avg:94.65ms
step:413/1770 train_time:38147ms step_avg:94.66ms
step:414/1770 train_time:38244ms step_avg:94.66ms
step:415/1770 train_time:38341ms step_avg:94.67ms
step:416/1770 train_time:38438ms step_avg:94.67ms
step:417/1770 train_time:38534ms step_avg:94.68ms
step:418/1770 train_time:38631ms step_avg:94.68ms
step:419/1770 train_time:38728ms step_avg:94.69ms
step:420/1770 train_time:38824ms step_avg:94.69ms
step:421/1770 train_time:38920ms step_avg:94.70ms
step:422/1770 train_time:39017ms step_avg:94.70ms
step:423/1770 train_time:39114ms step_avg:94.71ms
step:424/1770 train_time:39211ms step_avg:94.71ms
step:425/1770 train_time:39308ms step_avg:94.72ms
step:426/1770 train_time:39405ms step_avg:94.72ms
step:427/1770 train_time:39502ms step_avg:94.73ms
step:428/1770 train_time:39599ms step_avg:94.73ms
step:429/1770 train_time:39695ms step_avg:94.74ms
step:430/1770 train_time:39792ms step_avg:94.74ms
step:431/1770 train_time:39889ms step_avg:94.75ms
step:432/1770 train_time:39986ms step_avg:94.75ms
step:433/1770 train_time:40082ms step_avg:94.76ms
step:434/1770 train_time:40178ms step_avg:94.76ms
step:435/1770 train_time:40275ms step_avg:94.76ms
step:436/1770 train_time:40372ms step_avg:94.77ms
step:437/1770 train_time:40469ms step_avg:94.77ms
step:438/1770 train_time:40566ms step_avg:94.78ms
step:439/1770 train_time:40663ms step_avg:94.79ms
step:440/1770 train_time:40760ms step_avg:94.79ms
step:441/1770 train_time:40857ms step_avg:94.80ms
step:442/1770 train_time:40954ms step_avg:94.80ms
step:443/1770 train_time:41050ms step_avg:94.80ms
step:444/1770 train_time:41147ms step_avg:94.81ms
step:445/1770 train_time:41244ms step_avg:94.81ms
step:446/1770 train_time:41341ms step_avg:94.82ms
step:447/1770 train_time:41437ms step_avg:94.82ms
step:448/1770 train_time:41534ms step_avg:94.83ms
step:449/1770 train_time:41631ms step_avg:94.83ms
step:450/1770 train_time:41728ms step_avg:94.84ms
step:451/1770 train_time:41826ms step_avg:94.84ms
step:452/1770 train_time:41922ms step_avg:94.85ms
step:453/1770 train_time:42019ms step_avg:94.85ms
step:454/1770 train_time:42115ms step_avg:94.85ms
step:455/1770 train_time:42212ms step_avg:94.86ms
step:456/1770 train_time:42309ms step_avg:94.86ms
step:457/1770 train_time:42406ms step_avg:94.87ms
step:458/1770 train_time:42503ms step_avg:94.87ms
step:459/1770 train_time:42600ms step_avg:94.88ms
step:460/1770 train_time:42696ms step_avg:94.88ms
step:461/1770 train_time:42793ms step_avg:94.88ms
step:462/1770 train_time:42890ms step_avg:94.89ms
step:463/1770 train_time:42988ms step_avg:94.90ms
step:464/1770 train_time:43084ms step_avg:94.90ms
step:465/1770 train_time:43181ms step_avg:94.90ms
step:466/1770 train_time:43278ms step_avg:94.91ms
step:467/1770 train_time:43375ms step_avg:94.91ms
step:468/1770 train_time:43471ms step_avg:94.92ms
step:469/1770 train_time:43568ms step_avg:94.92ms
step:470/1770 train_time:43665ms step_avg:94.92ms
step:471/1770 train_time:43761ms step_avg:94.93ms
step:472/1770 train_time:43858ms step_avg:94.93ms
step:473/1770 train_time:43955ms step_avg:94.93ms
step:474/1770 train_time:44051ms step_avg:94.94ms
step:475/1770 train_time:44148ms step_avg:94.94ms
step:476/1770 train_time:44245ms step_avg:94.95ms
step:477/1770 train_time:44342ms step_avg:94.95ms
step:478/1770 train_time:44439ms step_avg:94.95ms
step:479/1770 train_time:44535ms step_avg:94.96ms
step:480/1770 train_time:44632ms step_avg:94.96ms
step:481/1770 train_time:44728ms step_avg:94.96ms
step:482/1770 train_time:44825ms step_avg:94.97ms
step:483/1770 train_time:44922ms step_avg:94.97ms
step:484/1770 train_time:45019ms step_avg:94.98ms
step:485/1770 train_time:45116ms step_avg:94.98ms
step:486/1770 train_time:45213ms step_avg:94.99ms
step:487/1770 train_time:45310ms step_avg:94.99ms
step:488/1770 train_time:45407ms step_avg:94.99ms
step:489/1770 train_time:45504ms step_avg:95.00ms
step:490/1770 train_time:45602ms step_avg:95.00ms
step:491/1770 train_time:45699ms step_avg:95.01ms
step:492/1770 train_time:45796ms step_avg:95.01ms
step:493/1770 train_time:45893ms step_avg:95.02ms
step:494/1770 train_time:45990ms step_avg:95.02ms
step:495/1770 train_time:46087ms step_avg:95.02ms
step:496/1770 train_time:46183ms step_avg:95.03ms
step:497/1770 train_time:46279ms step_avg:95.03ms
step:498/1770 train_time:46376ms step_avg:95.03ms
step:499/1770 train_time:46473ms step_avg:95.04ms
step:500/1770 train_time:46570ms step_avg:95.04ms
step:500/1770 val_loss:3.7497 train_time:46665ms step_avg:95.23ms
step:501/1770 train_time:46687ms step_avg:95.09ms
step:502/1770 train_time:46775ms step_avg:95.07ms
step:503/1770 train_time:46874ms step_avg:95.08ms
step:504/1770 train_time:46972ms step_avg:95.08ms
step:505/1770 train_time:47068ms step_avg:95.09ms
step:506/1770 train_time:47165ms step_avg:95.09ms
step:507/1770 train_time:47261ms step_avg:95.09ms
step:508/1770 train_time:47358ms step_avg:95.10ms
step:509/1770 train_time:47454ms step_avg:95.10ms
step:510/1770 train_time:47550ms step_avg:95.10ms
step:511/1770 train_time:47646ms step_avg:95.10ms
step:512/1770 train_time:47744ms step_avg:95.11ms
step:513/1770 train_time:47841ms step_avg:95.11ms
step:514/1770 train_time:47939ms step_avg:95.12ms
step:515/1770 train_time:48037ms step_avg:95.12ms
step:516/1770 train_time:48134ms step_avg:95.13ms
step:517/1770 train_time:48231ms step_avg:95.13ms
step:518/1770 train_time:48327ms step_avg:95.13ms
step:519/1770 train_time:48424ms step_avg:95.14ms
step:520/1770 train_time:48519ms step_avg:95.14ms
step:521/1770 train_time:48616ms step_avg:95.14ms
step:522/1770 train_time:48713ms step_avg:95.14ms
step:523/1770 train_time:48810ms step_avg:95.15ms
step:524/1770 train_time:48908ms step_avg:95.15ms
step:525/1770 train_time:49005ms step_avg:95.16ms
step:526/1770 train_time:49102ms step_avg:95.16ms
step:527/1770 train_time:49199ms step_avg:95.16ms
step:528/1770 train_time:49297ms step_avg:95.17ms
step:529/1770 train_time:49394ms step_avg:95.17ms
step:530/1770 train_time:49491ms step_avg:95.18ms
step:531/1770 train_time:49588ms step_avg:95.18ms
step:532/1770 train_time:49685ms step_avg:95.18ms
step:533/1770 train_time:49782ms step_avg:95.19ms
step:534/1770 train_time:49879ms step_avg:95.19ms
step:535/1770 train_time:49977ms step_avg:95.19ms
step:536/1770 train_time:50074ms step_avg:95.20ms
step:537/1770 train_time:50172ms step_avg:95.20ms
step:538/1770 train_time:50269ms step_avg:95.21ms
step:539/1770 train_time:50366ms step_avg:95.21ms
step:540/1770 train_time:50463ms step_avg:95.21ms
step:541/1770 train_time:50560ms step_avg:95.22ms
step:542/1770 train_time:50658ms step_avg:95.22ms
step:543/1770 train_time:50755ms step_avg:95.22ms
step:544/1770 train_time:50853ms step_avg:95.23ms
step:545/1770 train_time:50950ms step_avg:95.23ms
step:546/1770 train_time:51047ms step_avg:95.24ms
step:547/1770 train_time:51145ms step_avg:95.24ms
step:548/1770 train_time:51242ms step_avg:95.25ms
step:549/1770 train_time:51339ms step_avg:95.25ms
step:550/1770 train_time:51437ms step_avg:95.25ms
step:551/1770 train_time:51535ms step_avg:95.26ms
step:552/1770 train_time:51632ms step_avg:95.26ms
step:553/1770 train_time:51729ms step_avg:95.27ms
step:554/1770 train_time:51826ms step_avg:95.27ms
step:555/1770 train_time:51923ms step_avg:95.27ms
step:556/1770 train_time:52020ms step_avg:95.27ms
step:557/1770 train_time:52117ms step_avg:95.28ms
step:558/1770 train_time:52215ms step_avg:95.28ms
step:559/1770 train_time:52312ms step_avg:95.29ms
step:560/1770 train_time:52410ms step_avg:95.29ms
step:561/1770 train_time:52507ms step_avg:95.29ms
step:562/1770 train_time:52604ms step_avg:95.30ms
step:563/1770 train_time:52701ms step_avg:95.30ms
step:564/1770 train_time:52799ms step_avg:95.30ms
step:565/1770 train_time:52896ms step_avg:95.31ms
step:566/1770 train_time:52994ms step_avg:95.31ms
step:567/1770 train_time:53091ms step_avg:95.32ms
step:568/1770 train_time:53188ms step_avg:95.32ms
step:569/1770 train_time:53286ms step_avg:95.32ms
step:570/1770 train_time:53383ms step_avg:95.33ms
step:571/1770 train_time:53481ms step_avg:95.33ms
step:572/1770 train_time:53578ms step_avg:95.33ms
step:573/1770 train_time:53676ms step_avg:95.34ms
step:574/1770 train_time:53773ms step_avg:95.34ms
step:575/1770 train_time:53870ms step_avg:95.35ms
step:576/1770 train_time:53967ms step_avg:95.35ms
step:577/1770 train_time:54064ms step_avg:95.35ms
step:578/1770 train_time:54161ms step_avg:95.35ms
step:579/1770 train_time:54258ms step_avg:95.36ms
step:580/1770 train_time:54356ms step_avg:95.36ms
step:581/1770 train_time:54453ms step_avg:95.36ms
step:582/1770 train_time:54551ms step_avg:95.37ms
step:583/1770 train_time:54648ms step_avg:95.37ms
step:584/1770 train_time:54745ms step_avg:95.37ms
step:585/1770 train_time:54842ms step_avg:95.38ms
step:586/1770 train_time:54939ms step_avg:95.38ms
step:587/1770 train_time:55036ms step_avg:95.38ms
step:588/1770 train_time:55134ms step_avg:95.39ms
step:589/1770 train_time:55231ms step_avg:95.39ms
step:590/1770 train_time:55328ms step_avg:95.39ms
step:591/1770 train_time:55426ms step_avg:95.40ms
step:592/1770 train_time:55523ms step_avg:95.40ms
step:593/1770 train_time:55620ms step_avg:95.40ms
step:594/1770 train_time:55717ms step_avg:95.41ms
step:595/1770 train_time:55815ms step_avg:95.41ms
step:596/1770 train_time:55913ms step_avg:95.41ms
step:597/1770 train_time:56010ms step_avg:95.42ms
step:598/1770 train_time:56106ms step_avg:95.42ms
step:599/1770 train_time:56204ms step_avg:95.42ms
step:600/1770 train_time:56301ms step_avg:95.43ms
step:601/1770 train_time:56399ms step_avg:95.43ms
step:602/1770 train_time:56496ms step_avg:95.43ms
step:603/1770 train_time:56593ms step_avg:95.43ms
step:604/1770 train_time:56690ms step_avg:95.44ms
step:605/1770 train_time:56789ms step_avg:95.44ms
step:606/1770 train_time:56885ms step_avg:95.45ms
step:607/1770 train_time:56983ms step_avg:95.45ms
step:608/1770 train_time:57080ms step_avg:95.45ms
step:609/1770 train_time:57177ms step_avg:95.45ms
step:610/1770 train_time:57274ms step_avg:95.46ms
step:611/1770 train_time:57371ms step_avg:95.46ms
step:612/1770 train_time:57469ms step_avg:95.46ms
step:613/1770 train_time:57565ms step_avg:95.47ms
step:614/1770 train_time:57663ms step_avg:95.47ms
step:615/1770 train_time:57760ms step_avg:95.47ms
step:616/1770 train_time:57857ms step_avg:95.47ms
step:617/1770 train_time:57956ms step_avg:95.48ms
step:618/1770 train_time:58053ms step_avg:95.48ms
step:619/1770 train_time:58151ms step_avg:95.49ms
step:620/1770 train_time:58248ms step_avg:95.49ms
step:621/1770 train_time:58345ms step_avg:95.49ms
step:622/1770 train_time:58443ms step_avg:95.49ms
step:623/1770 train_time:58540ms step_avg:95.50ms
step:624/1770 train_time:58638ms step_avg:95.50ms
step:625/1770 train_time:58735ms step_avg:95.50ms
step:625/1770 val_loss:3.6636 train_time:58830ms step_avg:95.66ms
step:626/1770 train_time:58852ms step_avg:95.54ms
step:627/1770 train_time:58940ms step_avg:95.53ms
step:628/1770 train_time:59041ms step_avg:95.53ms
step:629/1770 train_time:59140ms step_avg:95.54ms
step:630/1770 train_time:59237ms step_avg:95.54ms
step:631/1770 train_time:59333ms step_avg:95.55ms
step:632/1770 train_time:59430ms step_avg:95.55ms
step:633/1770 train_time:59527ms step_avg:95.55ms
step:634/1770 train_time:59624ms step_avg:95.55ms
step:635/1770 train_time:59721ms step_avg:95.55ms
step:636/1770 train_time:59817ms step_avg:95.56ms
step:637/1770 train_time:59915ms step_avg:95.56ms
step:638/1770 train_time:60013ms step_avg:95.56ms
step:639/1770 train_time:60111ms step_avg:95.57ms
step:640/1770 train_time:60209ms step_avg:95.57ms
step:641/1770 train_time:60306ms step_avg:95.57ms
step:642/1770 train_time:60403ms step_avg:95.57ms
step:643/1770 train_time:60501ms step_avg:95.58ms
step:644/1770 train_time:60598ms step_avg:95.58ms
step:645/1770 train_time:60694ms step_avg:95.58ms
step:646/1770 train_time:60791ms step_avg:95.58ms
step:647/1770 train_time:60889ms step_avg:95.59ms
step:648/1770 train_time:60987ms step_avg:95.59ms
step:649/1770 train_time:61085ms step_avg:95.59ms
step:650/1770 train_time:61183ms step_avg:95.60ms
step:651/1770 train_time:61281ms step_avg:95.60ms
step:652/1770 train_time:61377ms step_avg:95.60ms
step:653/1770 train_time:61474ms step_avg:95.61ms
step:654/1770 train_time:61571ms step_avg:95.61ms
step:655/1770 train_time:61668ms step_avg:95.61ms
step:656/1770 train_time:61765ms step_avg:95.61ms
step:657/1770 train_time:61862ms step_avg:95.61ms
step:658/1770 train_time:61962ms step_avg:95.62ms
step:659/1770 train_time:62060ms step_avg:95.62ms
step:660/1770 train_time:62159ms step_avg:95.63ms
step:661/1770 train_time:62259ms step_avg:95.64ms
step:662/1770 train_time:62358ms step_avg:95.64ms
step:663/1770 train_time:62456ms step_avg:95.64ms
step:664/1770 train_time:62555ms step_avg:95.65ms
step:665/1770 train_time:62654ms step_avg:95.65ms
step:666/1770 train_time:62752ms step_avg:95.66ms
step:667/1770 train_time:62851ms step_avg:95.66ms
step:668/1770 train_time:62950ms step_avg:95.67ms
step:669/1770 train_time:63049ms step_avg:95.67ms
step:670/1770 train_time:63148ms step_avg:95.68ms
step:671/1770 train_time:63248ms step_avg:95.68ms
step:672/1770 train_time:63347ms step_avg:95.69ms
step:673/1770 train_time:63445ms step_avg:95.69ms
step:674/1770 train_time:63545ms step_avg:95.70ms
step:675/1770 train_time:63644ms step_avg:95.71ms
step:676/1770 train_time:63744ms step_avg:95.71ms
step:677/1770 train_time:63844ms step_avg:95.72ms
step:678/1770 train_time:63943ms step_avg:95.72ms
step:679/1770 train_time:64043ms step_avg:95.73ms
step:680/1770 train_time:64142ms step_avg:95.73ms
step:681/1770 train_time:64240ms step_avg:95.74ms
step:682/1770 train_time:64339ms step_avg:95.74ms
step:683/1770 train_time:64438ms step_avg:95.75ms
step:684/1770 train_time:64537ms step_avg:95.75ms
step:685/1770 train_time:64636ms step_avg:95.76ms
step:686/1770 train_time:64735ms step_avg:95.76ms
step:687/1770 train_time:64834ms step_avg:95.77ms
step:688/1770 train_time:64933ms step_avg:95.77ms
step:689/1770 train_time:65032ms step_avg:95.78ms
step:690/1770 train_time:65131ms step_avg:95.78ms
step:691/1770 train_time:65230ms step_avg:95.79ms
step:692/1770 train_time:65328ms step_avg:95.79ms
step:693/1770 train_time:65427ms step_avg:95.79ms
step:694/1770 train_time:65527ms step_avg:95.80ms
step:695/1770 train_time:65625ms step_avg:95.80ms
step:696/1770 train_time:65725ms step_avg:95.81ms
step:697/1770 train_time:65825ms step_avg:95.82ms
step:698/1770 train_time:65925ms step_avg:95.82ms
step:699/1770 train_time:66024ms step_avg:95.83ms
step:700/1770 train_time:66124ms step_avg:95.83ms
step:701/1770 train_time:66224ms step_avg:95.84ms
step:702/1770 train_time:66322ms step_avg:95.84ms
step:703/1770 train_time:66420ms step_avg:95.84ms
step:704/1770 train_time:66519ms step_avg:95.85ms
step:705/1770 train_time:66618ms step_avg:95.85ms
step:706/1770 train_time:66716ms step_avg:95.86ms
step:707/1770 train_time:66815ms step_avg:95.86ms
step:708/1770 train_time:66914ms step_avg:95.87ms
step:709/1770 train_time:67014ms step_avg:95.87ms
step:710/1770 train_time:67114ms step_avg:95.88ms
step:711/1770 train_time:67213ms step_avg:95.88ms
step:712/1770 train_time:67313ms step_avg:95.89ms
step:713/1770 train_time:67412ms step_avg:95.89ms
step:714/1770 train_time:67511ms step_avg:95.90ms
step:715/1770 train_time:67610ms step_avg:95.90ms
step:716/1770 train_time:67709ms step_avg:95.91ms
step:717/1770 train_time:67809ms step_avg:95.91ms
step:718/1770 train_time:67908ms step_avg:95.92ms
step:719/1770 train_time:68008ms step_avg:95.92ms
step:720/1770 train_time:68108ms step_avg:95.93ms
step:721/1770 train_time:68207ms step_avg:95.93ms
step:722/1770 train_time:68307ms step_avg:95.94ms
step:723/1770 train_time:68407ms step_avg:95.94ms
step:724/1770 train_time:68506ms step_avg:95.95ms
step:725/1770 train_time:68606ms step_avg:95.95ms
step:726/1770 train_time:68705ms step_avg:95.96ms
step:727/1770 train_time:68804ms step_avg:95.96ms
step:728/1770 train_time:68903ms step_avg:95.97ms
step:729/1770 train_time:69002ms step_avg:95.97ms
step:730/1770 train_time:69101ms step_avg:95.97ms
step:731/1770 train_time:69200ms step_avg:95.98ms
step:732/1770 train_time:69299ms step_avg:95.98ms
step:733/1770 train_time:69399ms step_avg:95.99ms
step:734/1770 train_time:69498ms step_avg:95.99ms
step:735/1770 train_time:69598ms step_avg:96.00ms
step:736/1770 train_time:69697ms step_avg:96.00ms
step:737/1770 train_time:69795ms step_avg:96.00ms
step:738/1770 train_time:69894ms step_avg:96.01ms
step:739/1770 train_time:69993ms step_avg:96.01ms
step:740/1770 train_time:70092ms step_avg:96.02ms
step:741/1770 train_time:70191ms step_avg:96.02ms
step:742/1770 train_time:70291ms step_avg:96.03ms
step:743/1770 train_time:70390ms step_avg:96.03ms
step:744/1770 train_time:70489ms step_avg:96.03ms
step:745/1770 train_time:70589ms step_avg:96.04ms
step:746/1770 train_time:70688ms step_avg:96.04ms
step:747/1770 train_time:70786ms step_avg:96.05ms
step:748/1770 train_time:70885ms step_avg:96.05ms
step:749/1770 train_time:70984ms step_avg:96.05ms
step:750/1770 train_time:71083ms step_avg:96.06ms
step:750/1770 val_loss:3.5997 train_time:71181ms step_avg:96.19ms
step:751/1770 train_time:71204ms step_avg:96.09ms
step:752/1770 train_time:71293ms step_avg:96.08ms
step:753/1770 train_time:71393ms step_avg:96.09ms
step:754/1770 train_time:71492ms step_avg:96.09ms
step:755/1770 train_time:71591ms step_avg:96.10ms
step:756/1770 train_time:71690ms step_avg:96.10ms
step:757/1770 train_time:71788ms step_avg:96.10ms
step:758/1770 train_time:71886ms step_avg:96.10ms
step:759/1770 train_time:71984ms step_avg:96.11ms
step:760/1770 train_time:72083ms step_avg:96.11ms
step:761/1770 train_time:72181ms step_avg:96.11ms
step:762/1770 train_time:72281ms step_avg:96.12ms
step:763/1770 train_time:72381ms step_avg:96.12ms
step:764/1770 train_time:72480ms step_avg:96.13ms
step:765/1770 train_time:72579ms step_avg:96.13ms
step:766/1770 train_time:72679ms step_avg:96.14ms
step:767/1770 train_time:72779ms step_avg:96.14ms
step:768/1770 train_time:72878ms step_avg:96.15ms
step:769/1770 train_time:72977ms step_avg:96.15ms
step:770/1770 train_time:73075ms step_avg:96.15ms
step:771/1770 train_time:73175ms step_avg:96.16ms
step:772/1770 train_time:73274ms step_avg:96.16ms
step:773/1770 train_time:73373ms step_avg:96.16ms
step:774/1770 train_time:73472ms step_avg:96.17ms
step:775/1770 train_time:73571ms step_avg:96.17ms
step:776/1770 train_time:73670ms step_avg:96.17ms
step:777/1770 train_time:73769ms step_avg:96.18ms
step:778/1770 train_time:73869ms step_avg:96.18ms
step:779/1770 train_time:73967ms step_avg:96.19ms
step:780/1770 train_time:74066ms step_avg:96.19ms
step:781/1770 train_time:74165ms step_avg:96.19ms
step:782/1770 train_time:74264ms step_avg:96.20ms
step:783/1770 train_time:74363ms step_avg:96.20ms
step:784/1770 train_time:74463ms step_avg:96.21ms
step:785/1770 train_time:74562ms step_avg:96.21ms
step:786/1770 train_time:74662ms step_avg:96.21ms
step:787/1770 train_time:74761ms step_avg:96.22ms
step:788/1770 train_time:74861ms step_avg:96.22ms
step:789/1770 train_time:74961ms step_avg:96.23ms
step:790/1770 train_time:75060ms step_avg:96.23ms
step:791/1770 train_time:75161ms step_avg:96.24ms
step:792/1770 train_time:75260ms step_avg:96.24ms
step:793/1770 train_time:75360ms step_avg:96.25ms
step:794/1770 train_time:75460ms step_avg:96.25ms
step:795/1770 train_time:75559ms step_avg:96.25ms
step:796/1770 train_time:75660ms step_avg:96.26ms
step:797/1770 train_time:75759ms step_avg:96.26ms
step:798/1770 train_time:75860ms step_avg:96.27ms
step:799/1770 train_time:75959ms step_avg:96.27ms
step:800/1770 train_time:76059ms step_avg:96.28ms
step:801/1770 train_time:76158ms step_avg:96.28ms
step:802/1770 train_time:76258ms step_avg:96.28ms
step:803/1770 train_time:76357ms step_avg:96.29ms
step:804/1770 train_time:76457ms step_avg:96.29ms
step:805/1770 train_time:76556ms step_avg:96.30ms
step:806/1770 train_time:76656ms step_avg:96.30ms
step:807/1770 train_time:76755ms step_avg:96.30ms
step:808/1770 train_time:76854ms step_avg:96.31ms
step:809/1770 train_time:76954ms step_avg:96.31ms
step:810/1770 train_time:77054ms step_avg:96.32ms
step:811/1770 train_time:77153ms step_avg:96.32ms
step:812/1770 train_time:77252ms step_avg:96.32ms
step:813/1770 train_time:77352ms step_avg:96.33ms
step:814/1770 train_time:77451ms step_avg:96.33ms
step:815/1770 train_time:77550ms step_avg:96.34ms
step:816/1770 train_time:77649ms step_avg:96.34ms
step:817/1770 train_time:77748ms step_avg:96.34ms
step:818/1770 train_time:77847ms step_avg:96.34ms
step:819/1770 train_time:77946ms step_avg:96.35ms
step:820/1770 train_time:78045ms step_avg:96.35ms
step:821/1770 train_time:78144ms step_avg:96.36ms
step:822/1770 train_time:78244ms step_avg:96.36ms
step:823/1770 train_time:78344ms step_avg:96.36ms
step:824/1770 train_time:78443ms step_avg:96.37ms
step:825/1770 train_time:78543ms step_avg:96.37ms
step:826/1770 train_time:78642ms step_avg:96.38ms
step:827/1770 train_time:78742ms step_avg:96.38ms
step:828/1770 train_time:78841ms step_avg:96.38ms
step:829/1770 train_time:78941ms step_avg:96.39ms
step:830/1770 train_time:79040ms step_avg:96.39ms
step:831/1770 train_time:79140ms step_avg:96.39ms
step:832/1770 train_time:79239ms step_avg:96.40ms
step:833/1770 train_time:79340ms step_avg:96.40ms
step:834/1770 train_time:79440ms step_avg:96.41ms
step:835/1770 train_time:79539ms step_avg:96.41ms
step:836/1770 train_time:79638ms step_avg:96.41ms
step:837/1770 train_time:79738ms step_avg:96.42ms
step:838/1770 train_time:79837ms step_avg:96.42ms
step:839/1770 train_time:79936ms step_avg:96.42ms
step:840/1770 train_time:80035ms step_avg:96.43ms
step:841/1770 train_time:80135ms step_avg:96.43ms
step:842/1770 train_time:80234ms step_avg:96.44ms
step:843/1770 train_time:80334ms step_avg:96.44ms
step:844/1770 train_time:80433ms step_avg:96.44ms
step:845/1770 train_time:80532ms step_avg:96.45ms
step:846/1770 train_time:80632ms step_avg:96.45ms
step:847/1770 train_time:80731ms step_avg:96.45ms
step:848/1770 train_time:80831ms step_avg:96.46ms
step:849/1770 train_time:80930ms step_avg:96.46ms
step:850/1770 train_time:81031ms step_avg:96.46ms
step:851/1770 train_time:81129ms step_avg:96.47ms
step:852/1770 train_time:81228ms step_avg:96.47ms
step:853/1770 train_time:81327ms step_avg:96.47ms
step:854/1770 train_time:81426ms step_avg:96.48ms
step:855/1770 train_time:81525ms step_avg:96.48ms
step:856/1770 train_time:81624ms step_avg:96.48ms
step:857/1770 train_time:81724ms step_avg:96.49ms
step:858/1770 train_time:81823ms step_avg:96.49ms
step:859/1770 train_time:81922ms step_avg:96.49ms
step:860/1770 train_time:82021ms step_avg:96.50ms
step:861/1770 train_time:82121ms step_avg:96.50ms
step:862/1770 train_time:82221ms step_avg:96.50ms
step:863/1770 train_time:82320ms step_avg:96.51ms
step:864/1770 train_time:82420ms step_avg:96.51ms
step:865/1770 train_time:82520ms step_avg:96.51ms
step:866/1770 train_time:82621ms step_avg:96.52ms
step:867/1770 train_time:82720ms step_avg:96.52ms
step:868/1770 train_time:82819ms step_avg:96.53ms
step:869/1770 train_time:82919ms step_avg:96.53ms
step:870/1770 train_time:83019ms step_avg:96.53ms
step:871/1770 train_time:83118ms step_avg:96.54ms
step:872/1770 train_time:83218ms step_avg:96.54ms
step:873/1770 train_time:83316ms step_avg:96.54ms
step:874/1770 train_time:83416ms step_avg:96.55ms
step:875/1770 train_time:83515ms step_avg:96.55ms
step:875/1770 val_loss:3.5521 train_time:83613ms step_avg:96.66ms
step:876/1770 train_time:83634ms step_avg:96.58ms
step:877/1770 train_time:83725ms step_avg:96.57ms
step:878/1770 train_time:83826ms step_avg:96.57ms
step:879/1770 train_time:83927ms step_avg:96.58ms
step:880/1770 train_time:84025ms step_avg:96.58ms
step:881/1770 train_time:84124ms step_avg:96.58ms
step:882/1770 train_time:84222ms step_avg:96.58ms
step:883/1770 train_time:84320ms step_avg:96.59ms
step:884/1770 train_time:84418ms step_avg:96.59ms
step:885/1770 train_time:84516ms step_avg:96.59ms
step:886/1770 train_time:84615ms step_avg:96.59ms
step:887/1770 train_time:84715ms step_avg:96.60ms
step:888/1770 train_time:84814ms step_avg:96.60ms
step:889/1770 train_time:84914ms step_avg:96.60ms
step:890/1770 train_time:85014ms step_avg:96.61ms
step:891/1770 train_time:85113ms step_avg:96.61ms
step:892/1770 train_time:85214ms step_avg:96.61ms
step:893/1770 train_time:85313ms step_avg:96.62ms
step:894/1770 train_time:85413ms step_avg:96.62ms
step:895/1770 train_time:85513ms step_avg:96.62ms
step:896/1770 train_time:85613ms step_avg:96.63ms
step:897/1770 train_time:85712ms step_avg:96.63ms
step:898/1770 train_time:85812ms step_avg:96.63ms
step:899/1770 train_time:85912ms step_avg:96.64ms
step:900/1770 train_time:86011ms step_avg:96.64ms
step:901/1770 train_time:86111ms step_avg:96.65ms
step:902/1770 train_time:86212ms step_avg:96.65ms
step:903/1770 train_time:86312ms step_avg:96.65ms
step:904/1770 train_time:86412ms step_avg:96.66ms
step:905/1770 train_time:86512ms step_avg:96.66ms
step:906/1770 train_time:86611ms step_avg:96.66ms
step:907/1770 train_time:86711ms step_avg:96.67ms
step:908/1770 train_time:86810ms step_avg:96.67ms
step:909/1770 train_time:86911ms step_avg:96.67ms
step:910/1770 train_time:87011ms step_avg:96.68ms
step:911/1770 train_time:87110ms step_avg:96.68ms
step:912/1770 train_time:87210ms step_avg:96.69ms
step:913/1770 train_time:87309ms step_avg:96.69ms
step:914/1770 train_time:87409ms step_avg:96.69ms
step:915/1770 train_time:87509ms step_avg:96.69ms
step:916/1770 train_time:87608ms step_avg:96.70ms
step:917/1770 train_time:87707ms step_avg:96.70ms
step:918/1770 train_time:87806ms step_avg:96.70ms
step:919/1770 train_time:87905ms step_avg:96.70ms
step:920/1770 train_time:88006ms step_avg:96.71ms
step:921/1770 train_time:88107ms step_avg:96.72ms
step:922/1770 train_time:88209ms step_avg:96.72ms
step:923/1770 train_time:88309ms step_avg:96.72ms
step:924/1770 train_time:88410ms step_avg:96.73ms
step:925/1770 train_time:88510ms step_avg:96.73ms
step:926/1770 train_time:88611ms step_avg:96.74ms
step:927/1770 train_time:88712ms step_avg:96.74ms
step:928/1770 train_time:88813ms step_avg:96.75ms
step:929/1770 train_time:88914ms step_avg:96.75ms
step:930/1770 train_time:89014ms step_avg:96.75ms
step:931/1770 train_time:89115ms step_avg:96.76ms
step:932/1770 train_time:89216ms step_avg:96.76ms
step:933/1770 train_time:89316ms step_avg:96.77ms
step:934/1770 train_time:89417ms step_avg:96.77ms
step:935/1770 train_time:89518ms step_avg:96.78ms
step:936/1770 train_time:89619ms step_avg:96.78ms
step:937/1770 train_time:89719ms step_avg:96.78ms
step:938/1770 train_time:89819ms step_avg:96.79ms
step:939/1770 train_time:89919ms step_avg:96.79ms
step:940/1770 train_time:90019ms step_avg:96.80ms
step:941/1770 train_time:90120ms step_avg:96.80ms
step:942/1770 train_time:90221ms step_avg:96.80ms
step:943/1770 train_time:90321ms step_avg:96.81ms
step:944/1770 train_time:90421ms step_avg:96.81ms
step:945/1770 train_time:90521ms step_avg:96.81ms
step:946/1770 train_time:90621ms step_avg:96.82ms
step:947/1770 train_time:90721ms step_avg:96.82ms
step:948/1770 train_time:90822ms step_avg:96.82ms
step:949/1770 train_time:90923ms step_avg:96.83ms
step:950/1770 train_time:91023ms step_avg:96.83ms
step:951/1770 train_time:91125ms step_avg:96.84ms
step:952/1770 train_time:91226ms step_avg:96.84ms
step:953/1770 train_time:91326ms step_avg:96.85ms
step:954/1770 train_time:91427ms step_avg:96.85ms
step:955/1770 train_time:91527ms step_avg:96.85ms
step:956/1770 train_time:91628ms step_avg:96.86ms
step:957/1770 train_time:91729ms step_avg:96.86ms
step:958/1770 train_time:91830ms step_avg:96.87ms
step:959/1770 train_time:91931ms step_avg:96.87ms
step:960/1770 train_time:92032ms step_avg:96.88ms
step:961/1770 train_time:92133ms step_avg:96.88ms
step:962/1770 train_time:92234ms step_avg:96.88ms
step:963/1770 train_time:92336ms step_avg:96.89ms
step:964/1770 train_time:92437ms step_avg:96.89ms
step:965/1770 train_time:92537ms step_avg:96.90ms
step:966/1770 train_time:92637ms step_avg:96.90ms
step:967/1770 train_time:92737ms step_avg:96.90ms
step:968/1770 train_time:92838ms step_avg:96.91ms
step:969/1770 train_time:92938ms step_avg:96.91ms
step:970/1770 train_time:93038ms step_avg:96.92ms
step:971/1770 train_time:93138ms step_avg:96.92ms
step:972/1770 train_time:93240ms step_avg:96.92ms
step:973/1770 train_time:93340ms step_avg:96.93ms
step:974/1770 train_time:93441ms step_avg:96.93ms
step:975/1770 train_time:93542ms step_avg:96.93ms
step:976/1770 train_time:93642ms step_avg:96.94ms
step:977/1770 train_time:93743ms step_avg:96.94ms
step:978/1770 train_time:93844ms step_avg:96.95ms
step:979/1770 train_time:93944ms step_avg:96.95ms
step:980/1770 train_time:94046ms step_avg:96.95ms
step:981/1770 train_time:94146ms step_avg:96.96ms
step:982/1770 train_time:94246ms step_avg:96.96ms
step:983/1770 train_time:94347ms step_avg:96.96ms
step:984/1770 train_time:94448ms step_avg:96.97ms
step:985/1770 train_time:94550ms step_avg:96.97ms
step:986/1770 train_time:94650ms step_avg:96.98ms
step:987/1770 train_time:94751ms step_avg:96.98ms
step:988/1770 train_time:94851ms step_avg:96.98ms
step:989/1770 train_time:94955ms step_avg:96.99ms
step:990/1770 train_time:95056ms step_avg:97.00ms
step:991/1770 train_time:95157ms step_avg:97.00ms
step:992/1770 train_time:95258ms step_avg:97.00ms
step:993/1770 train_time:95358ms step_avg:97.01ms
step:994/1770 train_time:95459ms step_avg:97.01ms
step:995/1770 train_time:95559ms step_avg:97.01ms
step:996/1770 train_time:95659ms step_avg:97.02ms
step:997/1770 train_time:95760ms step_avg:97.02ms
step:998/1770 train_time:95860ms step_avg:97.02ms
step:999/1770 train_time:95961ms step_avg:97.03ms
step:1000/1770 train_time:96061ms step_avg:97.03ms
step:1000/1770 val_loss:3.5119 train_time:96160ms step_avg:97.13ms
step:1001/1770 train_time:96184ms step_avg:97.06ms
step:1002/1770 train_time:96276ms step_avg:97.05ms
step:1003/1770 train_time:96379ms step_avg:97.06ms
step:1004/1770 train_time:96479ms step_avg:97.06ms
step:1005/1770 train_time:96579ms step_avg:97.06ms
step:1006/1770 train_time:96679ms step_avg:97.07ms
step:1007/1770 train_time:96779ms step_avg:97.07ms
step:1008/1770 train_time:96879ms step_avg:97.07ms
step:1009/1770 train_time:96979ms step_avg:97.08ms
step:1010/1770 train_time:97079ms step_avg:97.08ms
step:1011/1770 train_time:97182ms step_avg:97.09ms
step:1012/1770 train_time:97286ms step_avg:97.09ms
step:1013/1770 train_time:97388ms step_avg:97.10ms
step:1014/1770 train_time:97489ms step_avg:97.10ms
step:1015/1770 train_time:97590ms step_avg:97.10ms
step:1016/1770 train_time:97690ms step_avg:97.11ms
step:1017/1770 train_time:97791ms step_avg:97.11ms
step:1018/1770 train_time:97891ms step_avg:97.11ms
step:1019/1770 train_time:97993ms step_avg:97.12ms
step:1020/1770 train_time:98093ms step_avg:97.12ms
step:1021/1770 train_time:98195ms step_avg:97.13ms
step:1022/1770 train_time:98296ms step_avg:97.13ms
step:1023/1770 train_time:98396ms step_avg:97.13ms
step:1024/1770 train_time:98498ms step_avg:97.14ms
step:1025/1770 train_time:98599ms step_avg:97.14ms
step:1026/1770 train_time:98699ms step_avg:97.14ms
step:1027/1770 train_time:98800ms step_avg:97.15ms
step:1028/1770 train_time:98902ms step_avg:97.15ms
step:1029/1770 train_time:99002ms step_avg:97.16ms
step:1030/1770 train_time:99103ms step_avg:97.16ms
step:1031/1770 train_time:99203ms step_avg:97.16ms
step:1032/1770 train_time:99304ms step_avg:97.17ms
step:1033/1770 train_time:99406ms step_avg:97.17ms
step:1034/1770 train_time:99507ms step_avg:97.17ms
step:1035/1770 train_time:99608ms step_avg:97.18ms
step:1036/1770 train_time:99709ms step_avg:97.18ms
step:1037/1770 train_time:99811ms step_avg:97.19ms
step:1038/1770 train_time:99912ms step_avg:97.19ms
step:1039/1770 train_time:100014ms step_avg:97.20ms
step:1040/1770 train_time:100115ms step_avg:97.20ms
step:1041/1770 train_time:100215ms step_avg:97.20ms
step:1042/1770 train_time:100316ms step_avg:97.21ms
step:1043/1770 train_time:100417ms step_avg:97.21ms
step:1044/1770 train_time:100517ms step_avg:97.21ms
step:1045/1770 train_time:100618ms step_avg:97.21ms
step:1046/1770 train_time:100718ms step_avg:97.22ms
step:1047/1770 train_time:100818ms step_avg:97.22ms
step:1048/1770 train_time:100920ms step_avg:97.23ms
step:1049/1770 train_time:101020ms step_avg:97.23ms
step:1050/1770 train_time:101121ms step_avg:97.23ms
step:1051/1770 train_time:101222ms step_avg:97.24ms
step:1052/1770 train_time:101323ms step_avg:97.24ms
step:1053/1770 train_time:101424ms step_avg:97.24ms
step:1054/1770 train_time:101525ms step_avg:97.25ms
step:1055/1770 train_time:101625ms step_avg:97.25ms
step:1056/1770 train_time:101726ms step_avg:97.25ms
step:1057/1770 train_time:101827ms step_avg:97.26ms
step:1058/1770 train_time:101929ms step_avg:97.26ms
step:1059/1770 train_time:102031ms step_avg:97.26ms
step:1060/1770 train_time:102133ms step_avg:97.27ms
step:1061/1770 train_time:102234ms step_avg:97.27ms
step:1062/1770 train_time:102337ms step_avg:97.28ms
step:1063/1770 train_time:102438ms step_avg:97.28ms
step:1064/1770 train_time:102540ms step_avg:97.29ms
step:1065/1770 train_time:102640ms step_avg:97.29ms
step:1066/1770 train_time:102741ms step_avg:97.29ms
step:1067/1770 train_time:102841ms step_avg:97.30ms
step:1068/1770 train_time:102943ms step_avg:97.30ms
step:1069/1770 train_time:103043ms step_avg:97.30ms
step:1070/1770 train_time:103145ms step_avg:97.31ms
step:1071/1770 train_time:103246ms step_avg:97.31ms
step:1072/1770 train_time:103347ms step_avg:97.31ms
step:1073/1770 train_time:103449ms step_avg:97.32ms
step:1074/1770 train_time:103550ms step_avg:97.32ms
step:1075/1770 train_time:103652ms step_avg:97.33ms
step:1076/1770 train_time:103753ms step_avg:97.33ms
step:1077/1770 train_time:103853ms step_avg:97.33ms
step:1078/1770 train_time:103954ms step_avg:97.34ms
step:1079/1770 train_time:104055ms step_avg:97.34ms
step:1080/1770 train_time:104155ms step_avg:97.34ms
step:1081/1770 train_time:104257ms step_avg:97.35ms
step:1082/1770 train_time:104358ms step_avg:97.35ms
step:1083/1770 train_time:104459ms step_avg:97.35ms
step:1084/1770 train_time:104560ms step_avg:97.36ms
step:1085/1770 train_time:104661ms step_avg:97.36ms
step:1086/1770 train_time:104761ms step_avg:97.36ms
step:1087/1770 train_time:104862ms step_avg:97.36ms
step:1088/1770 train_time:104963ms step_avg:97.37ms
step:1089/1770 train_time:105063ms step_avg:97.37ms
step:1090/1770 train_time:105165ms step_avg:97.38ms
step:1091/1770 train_time:105266ms step_avg:97.38ms
step:1092/1770 train_time:105368ms step_avg:97.38ms
step:1093/1770 train_time:105469ms step_avg:97.39ms
step:1094/1770 train_time:105570ms step_avg:97.39ms
step:1095/1770 train_time:105671ms step_avg:97.39ms
step:1096/1770 train_time:105773ms step_avg:97.40ms
step:1097/1770 train_time:105874ms step_avg:97.40ms
step:1098/1770 train_time:105975ms step_avg:97.40ms
step:1099/1770 train_time:106076ms step_avg:97.41ms
step:1100/1770 train_time:106177ms step_avg:97.41ms
step:1101/1770 train_time:106278ms step_avg:97.41ms
step:1102/1770 train_time:106379ms step_avg:97.42ms
step:1103/1770 train_time:106479ms step_avg:97.42ms
step:1104/1770 train_time:106580ms step_avg:97.42ms
step:1105/1770 train_time:106681ms step_avg:97.43ms
step:1106/1770 train_time:106783ms step_avg:97.43ms
step:1107/1770 train_time:106884ms step_avg:97.43ms
step:1108/1770 train_time:106985ms step_avg:97.44ms
step:1109/1770 train_time:107087ms step_avg:97.44ms
step:1110/1770 train_time:107189ms step_avg:97.44ms
step:1111/1770 train_time:107289ms step_avg:97.45ms
step:1112/1770 train_time:107390ms step_avg:97.45ms
step:1113/1770 train_time:107491ms step_avg:97.45ms
step:1114/1770 train_time:107593ms step_avg:97.46ms
step:1115/1770 train_time:107693ms step_avg:97.46ms
step:1116/1770 train_time:107794ms step_avg:97.46ms
step:1117/1770 train_time:107895ms step_avg:97.47ms
step:1118/1770 train_time:107995ms step_avg:97.47ms
step:1119/1770 train_time:108095ms step_avg:97.47ms
step:1120/1770 train_time:108197ms step_avg:97.47ms
step:1121/1770 train_time:108298ms step_avg:97.48ms
step:1122/1770 train_time:108399ms step_avg:97.48ms
step:1123/1770 train_time:108499ms step_avg:97.48ms
step:1124/1770 train_time:108601ms step_avg:97.49ms
step:1125/1770 train_time:108701ms step_avg:97.49ms
step:1125/1770 val_loss:3.4709 train_time:108800ms step_avg:97.58ms
step:1126/1770 train_time:108822ms step_avg:97.51ms
step:1127/1770 train_time:108916ms step_avg:97.51ms
step:1128/1770 train_time:109017ms step_avg:97.51ms
step:1129/1770 train_time:109117ms step_avg:97.51ms
step:1130/1770 train_time:109217ms step_avg:97.52ms
step:1131/1770 train_time:109318ms step_avg:97.52ms
step:1132/1770 train_time:109418ms step_avg:97.52ms
step:1133/1770 train_time:109518ms step_avg:97.52ms
step:1134/1770 train_time:109618ms step_avg:97.52ms
step:1135/1770 train_time:109718ms step_avg:97.53ms
step:1136/1770 train_time:109821ms step_avg:97.53ms
step:1137/1770 train_time:109926ms step_avg:97.54ms
step:1138/1770 train_time:110029ms step_avg:97.54ms
step:1139/1770 train_time:110129ms step_avg:97.55ms
step:1140/1770 train_time:110229ms step_avg:97.55ms
step:1141/1770 train_time:110330ms step_avg:97.55ms
step:1142/1770 train_time:110430ms step_avg:97.55ms
step:1143/1770 train_time:110531ms step_avg:97.56ms
step:1144/1770 train_time:110631ms step_avg:97.56ms
step:1145/1770 train_time:110733ms step_avg:97.56ms
step:1146/1770 train_time:110835ms step_avg:97.57ms
step:1147/1770 train_time:110936ms step_avg:97.57ms
step:1148/1770 train_time:111037ms step_avg:97.57ms
step:1149/1770 train_time:111137ms step_avg:97.57ms
step:1150/1770 train_time:111237ms step_avg:97.58ms
step:1151/1770 train_time:111338ms step_avg:97.58ms
step:1152/1770 train_time:111439ms step_avg:97.58ms
step:1153/1770 train_time:111540ms step_avg:97.59ms
step:1154/1770 train_time:111641ms step_avg:97.59ms
step:1155/1770 train_time:111742ms step_avg:97.59ms
step:1156/1770 train_time:111843ms step_avg:97.59ms
step:1157/1770 train_time:111947ms step_avg:97.60ms
step:1158/1770 train_time:112048ms step_avg:97.60ms
step:1159/1770 train_time:112148ms step_avg:97.60ms
step:1160/1770 train_time:112249ms step_avg:97.61ms
step:1161/1770 train_time:112349ms step_avg:97.61ms
step:1162/1770 train_time:112450ms step_avg:97.61ms
step:1163/1770 train_time:112552ms step_avg:97.62ms
step:1164/1770 train_time:112654ms step_avg:97.62ms
step:1165/1770 train_time:112754ms step_avg:97.62ms
step:1166/1770 train_time:112855ms step_avg:97.63ms
step:1167/1770 train_time:112955ms step_avg:97.63ms
step:1168/1770 train_time:113056ms step_avg:97.63ms
step:1169/1770 train_time:113157ms step_avg:97.63ms
step:1170/1770 train_time:113258ms step_avg:97.64ms
step:1171/1770 train_time:113360ms step_avg:97.64ms
step:1172/1770 train_time:113461ms step_avg:97.64ms
step:1173/1770 train_time:113562ms step_avg:97.65ms
step:1174/1770 train_time:113664ms step_avg:97.65ms
step:1175/1770 train_time:113764ms step_avg:97.65ms
step:1176/1770 train_time:113865ms step_avg:97.65ms
step:1177/1770 train_time:113965ms step_avg:97.66ms
step:1178/1770 train_time:114066ms step_avg:97.66ms
step:1179/1770 train_time:114167ms step_avg:97.66ms
step:1180/1770 train_time:114268ms step_avg:97.67ms
step:1181/1770 train_time:114370ms step_avg:97.67ms
step:1182/1770 train_time:114472ms step_avg:97.67ms
step:1183/1770 train_time:114574ms step_avg:97.68ms
step:1184/1770 train_time:114677ms step_avg:97.68ms
step:1185/1770 train_time:114778ms step_avg:97.68ms
step:1186/1770 train_time:114880ms step_avg:97.69ms
step:1187/1770 train_time:114983ms step_avg:97.69ms
step:1188/1770 train_time:115085ms step_avg:97.70ms
step:1189/1770 train_time:115188ms step_avg:97.70ms
step:1190/1770 train_time:115289ms step_avg:97.70ms
step:1191/1770 train_time:115392ms step_avg:97.71ms
step:1192/1770 train_time:115495ms step_avg:97.71ms
step:1193/1770 train_time:115597ms step_avg:97.71ms
step:1194/1770 train_time:115698ms step_avg:97.72ms
step:1195/1770 train_time:115801ms step_avg:97.72ms
step:1196/1770 train_time:115904ms step_avg:97.73ms
step:1197/1770 train_time:116005ms step_avg:97.73ms
step:1198/1770 train_time:116107ms step_avg:97.73ms
step:1199/1770 train_time:116209ms step_avg:97.74ms
step:1200/1770 train_time:116312ms step_avg:97.74ms
step:1201/1770 train_time:116414ms step_avg:97.74ms
step:1202/1770 train_time:116515ms step_avg:97.75ms
step:1203/1770 train_time:116618ms step_avg:97.75ms
step:1204/1770 train_time:116720ms step_avg:97.76ms
step:1205/1770 train_time:116822ms step_avg:97.76ms
step:1206/1770 train_time:116925ms step_avg:97.76ms
step:1207/1770 train_time:117027ms step_avg:97.77ms
step:1208/1770 train_time:117129ms step_avg:97.77ms
step:1209/1770 train_time:117231ms step_avg:97.77ms
step:1210/1770 train_time:117333ms step_avg:97.78ms
step:1211/1770 train_time:117435ms step_avg:97.78ms
step:1212/1770 train_time:117538ms step_avg:97.79ms
step:1213/1770 train_time:117640ms step_avg:97.79ms
step:1214/1770 train_time:117741ms step_avg:97.79ms
step:1215/1770 train_time:117843ms step_avg:97.79ms
step:1216/1770 train_time:117947ms step_avg:97.80ms
step:1217/1770 train_time:118049ms step_avg:97.80ms
step:1218/1770 train_time:118151ms step_avg:97.81ms
step:1219/1770 train_time:118253ms step_avg:97.81ms
step:1220/1770 train_time:118356ms step_avg:97.81ms
step:1221/1770 train_time:118458ms step_avg:97.82ms
step:1222/1770 train_time:118562ms step_avg:97.82ms
step:1223/1770 train_time:118663ms step_avg:97.83ms
step:1224/1770 train_time:118766ms step_avg:97.83ms
step:1225/1770 train_time:118868ms step_avg:97.83ms
step:1226/1770 train_time:118970ms step_avg:97.84ms
step:1227/1770 train_time:119075ms step_avg:97.84ms
step:1228/1770 train_time:119178ms step_avg:97.85ms
step:1229/1770 train_time:119280ms step_avg:97.85ms
step:1230/1770 train_time:119382ms step_avg:97.85ms
step:1231/1770 train_time:119485ms step_avg:97.86ms
step:1232/1770 train_time:119587ms step_avg:97.86ms
step:1233/1770 train_time:119689ms step_avg:97.86ms
step:1234/1770 train_time:119790ms step_avg:97.87ms
step:1235/1770 train_time:119892ms step_avg:97.87ms
step:1236/1770 train_time:119994ms step_avg:97.87ms
step:1237/1770 train_time:120096ms step_avg:97.88ms
step:1238/1770 train_time:120198ms step_avg:97.88ms
step:1239/1770 train_time:120300ms step_avg:97.88ms
step:1240/1770 train_time:120402ms step_avg:97.89ms
step:1241/1770 train_time:120505ms step_avg:97.89ms
step:1242/1770 train_time:120606ms step_avg:97.89ms
step:1243/1770 train_time:120709ms step_avg:97.90ms
step:1244/1770 train_time:120811ms step_avg:97.90ms
step:1245/1770 train_time:120913ms step_avg:97.90ms
step:1246/1770 train_time:121014ms step_avg:97.91ms
step:1247/1770 train_time:121117ms step_avg:97.91ms
step:1248/1770 train_time:121220ms step_avg:97.92ms
step:1249/1770 train_time:121321ms step_avg:97.92ms
step:1250/1770 train_time:121424ms step_avg:97.92ms
step:1250/1770 val_loss:3.4242 train_time:121525ms step_avg:98.00ms
step:1251/1770 train_time:121547ms step_avg:97.94ms
step:1252/1770 train_time:121637ms step_avg:97.94ms
step:1253/1770 train_time:121741ms step_avg:97.94ms
step:1254/1770 train_time:121843ms step_avg:97.94ms
step:1255/1770 train_time:121946ms step_avg:97.95ms
step:1256/1770 train_time:122047ms step_avg:97.95ms
step:1257/1770 train_time:122149ms step_avg:97.95ms
step:1258/1770 train_time:122252ms step_avg:97.96ms
step:1259/1770 train_time:122353ms step_avg:97.96ms
step:1260/1770 train_time:122454ms step_avg:97.96ms
step:1261/1770 train_time:122558ms step_avg:97.97ms
step:1262/1770 train_time:122661ms step_avg:97.97ms
step:1263/1770 train_time:122763ms step_avg:97.98ms
step:1264/1770 train_time:122866ms step_avg:97.98ms
step:1265/1770 train_time:122968ms step_avg:97.98ms
step:1266/1770 train_time:123071ms step_avg:97.99ms
step:1267/1770 train_time:123175ms step_avg:97.99ms
step:1268/1770 train_time:123276ms step_avg:97.99ms
step:1269/1770 train_time:123378ms step_avg:98.00ms
step:1270/1770 train_time:123481ms step_avg:98.00ms
step:1271/1770 train_time:123583ms step_avg:98.00ms
step:1272/1770 train_time:123684ms step_avg:98.01ms
step:1273/1770 train_time:123786ms step_avg:98.01ms
step:1274/1770 train_time:123889ms step_avg:98.01ms
step:1275/1770 train_time:123991ms step_avg:98.02ms
step:1276/1770 train_time:124094ms step_avg:98.02ms
step:1277/1770 train_time:124197ms step_avg:98.02ms
step:1278/1770 train_time:124298ms step_avg:98.03ms
step:1279/1770 train_time:124400ms step_avg:98.03ms
step:1280/1770 train_time:124503ms step_avg:98.03ms
step:1281/1770 train_time:124604ms step_avg:98.04ms
step:1282/1770 train_time:124707ms step_avg:98.04ms
step:1283/1770 train_time:124810ms step_avg:98.04ms
step:1284/1770 train_time:124913ms step_avg:98.05ms
step:1285/1770 train_time:125015ms step_avg:98.05ms
step:1286/1770 train_time:125118ms step_avg:98.05ms
step:1287/1770 train_time:125222ms step_avg:98.06ms
step:1288/1770 train_time:125324ms step_avg:98.06ms
step:1289/1770 train_time:125426ms step_avg:98.07ms
step:1290/1770 train_time:125528ms step_avg:98.07ms
step:1291/1770 train_time:125630ms step_avg:98.07ms
step:1292/1770 train_time:125732ms step_avg:98.07ms
step:1293/1770 train_time:125834ms step_avg:98.08ms
step:1294/1770 train_time:125935ms step_avg:98.08ms
step:1295/1770 train_time:126037ms step_avg:98.08ms
step:1296/1770 train_time:126139ms step_avg:98.09ms
step:1297/1770 train_time:126241ms step_avg:98.09ms
step:1298/1770 train_time:126343ms step_avg:98.09ms
step:1299/1770 train_time:126445ms step_avg:98.10ms
step:1300/1770 train_time:126547ms step_avg:98.10ms
step:1301/1770 train_time:126650ms step_avg:98.10ms
step:1302/1770 train_time:126752ms step_avg:98.11ms
step:1303/1770 train_time:126854ms step_avg:98.11ms
step:1304/1770 train_time:126956ms step_avg:98.11ms
step:1305/1770 train_time:127057ms step_avg:98.11ms
step:1306/1770 train_time:127160ms step_avg:98.12ms
step:1307/1770 train_time:127262ms step_avg:98.12ms
step:1308/1770 train_time:127363ms step_avg:98.12ms
step:1309/1770 train_time:127466ms step_avg:98.13ms
step:1310/1770 train_time:127568ms step_avg:98.13ms
step:1311/1770 train_time:127670ms step_avg:98.13ms
step:1312/1770 train_time:127772ms step_avg:98.13ms
step:1313/1770 train_time:127872ms step_avg:98.14ms
step:1314/1770 train_time:127974ms step_avg:98.14ms
step:1315/1770 train_time:128076ms step_avg:98.14ms
step:1316/1770 train_time:128178ms step_avg:98.15ms
step:1317/1770 train_time:128281ms step_avg:98.15ms
step:1318/1770 train_time:128385ms step_avg:98.15ms
step:1319/1770 train_time:128488ms step_avg:98.16ms
step:1320/1770 train_time:128589ms step_avg:98.16ms
step:1321/1770 train_time:128692ms step_avg:98.16ms
step:1322/1770 train_time:128794ms step_avg:98.17ms
step:1323/1770 train_time:128897ms step_avg:98.17ms
step:1324/1770 train_time:128999ms step_avg:98.17ms
step:1325/1770 train_time:129103ms step_avg:98.18ms
step:1326/1770 train_time:129204ms step_avg:98.18ms
step:1327/1770 train_time:129310ms step_avg:98.19ms
step:1328/1770 train_time:129411ms step_avg:98.19ms
step:1329/1770 train_time:129514ms step_avg:98.19ms
step:1330/1770 train_time:129615ms step_avg:98.19ms
step:1331/1770 train_time:129717ms step_avg:98.20ms
step:1332/1770 train_time:129818ms step_avg:98.20ms
step:1333/1770 train_time:129920ms step_avg:98.20ms
step:1334/1770 train_time:130021ms step_avg:98.20ms
step:1335/1770 train_time:130124ms step_avg:98.21ms
step:1336/1770 train_time:130226ms step_avg:98.21ms
step:1337/1770 train_time:130329ms step_avg:98.21ms
step:1338/1770 train_time:130430ms step_avg:98.22ms
step:1339/1770 train_time:130534ms step_avg:98.22ms
step:1340/1770 train_time:130637ms step_avg:98.22ms
step:1341/1770 train_time:130739ms step_avg:98.23ms
step:1342/1770 train_time:130841ms step_avg:98.23ms
step:1343/1770 train_time:130944ms step_avg:98.23ms
step:1344/1770 train_time:131046ms step_avg:98.24ms
step:1345/1770 train_time:131148ms step_avg:98.24ms
step:1346/1770 train_time:131250ms step_avg:98.24ms
step:1347/1770 train_time:131353ms step_avg:98.24ms
step:1348/1770 train_time:131457ms step_avg:98.25ms
step:1349/1770 train_time:131559ms step_avg:98.25ms
step:1350/1770 train_time:131661ms step_avg:98.25ms
step:1351/1770 train_time:131763ms step_avg:98.26ms
step:1352/1770 train_time:131865ms step_avg:98.26ms
step:1353/1770 train_time:131968ms step_avg:98.26ms
step:1354/1770 train_time:132070ms step_avg:98.27ms
step:1355/1770 train_time:132172ms step_avg:98.27ms
step:1356/1770 train_time:132273ms step_avg:98.27ms
step:1357/1770 train_time:132375ms step_avg:98.27ms
step:1358/1770 train_time:132478ms step_avg:98.28ms
step:1359/1770 train_time:132581ms step_avg:98.28ms
step:1360/1770 train_time:132683ms step_avg:98.28ms
step:1361/1770 train_time:132786ms step_avg:98.29ms
step:1362/1770 train_time:132888ms step_avg:98.29ms
step:1363/1770 train_time:132991ms step_avg:98.29ms
step:1364/1770 train_time:133093ms step_avg:98.30ms
step:1365/1770 train_time:133195ms step_avg:98.30ms
step:1366/1770 train_time:133296ms step_avg:98.30ms
step:1367/1770 train_time:133400ms step_avg:98.31ms
step:1368/1770 train_time:133501ms step_avg:98.31ms
step:1369/1770 train_time:133604ms step_avg:98.31ms
step:1370/1770 train_time:133706ms step_avg:98.31ms
step:1371/1770 train_time:133808ms step_avg:98.32ms
step:1372/1770 train_time:133910ms step_avg:98.32ms
step:1373/1770 train_time:134013ms step_avg:98.32ms
step:1374/1770 train_time:134116ms step_avg:98.33ms
step:1375/1770 train_time:134218ms step_avg:98.33ms
step:1375/1770 val_loss:3.3815 train_time:134320ms step_avg:98.40ms
step:1376/1770 train_time:134342ms step_avg:98.35ms
step:1377/1770 train_time:134437ms step_avg:98.34ms
step:1378/1770 train_time:134538ms step_avg:98.35ms
step:1379/1770 train_time:134640ms step_avg:98.35ms
step:1380/1770 train_time:134741ms step_avg:98.35ms
step:1381/1770 train_time:134843ms step_avg:98.35ms
step:1382/1770 train_time:134944ms step_avg:98.36ms
step:1383/1770 train_time:135047ms step_avg:98.36ms
step:1384/1770 train_time:135150ms step_avg:98.36ms
step:1385/1770 train_time:135251ms step_avg:98.36ms
step:1386/1770 train_time:135355ms step_avg:98.37ms
step:1387/1770 train_time:135460ms step_avg:98.37ms
step:1388/1770 train_time:135562ms step_avg:98.38ms
step:1389/1770 train_time:135664ms step_avg:98.38ms
step:1390/1770 train_time:135766ms step_avg:98.38ms
step:1391/1770 train_time:135868ms step_avg:98.38ms
step:1392/1770 train_time:135969ms step_avg:98.39ms
step:1393/1770 train_time:136071ms step_avg:98.39ms
step:1394/1770 train_time:136173ms step_avg:98.39ms
step:1395/1770 train_time:136275ms step_avg:98.39ms
step:1396/1770 train_time:136379ms step_avg:98.40ms
step:1397/1770 train_time:136482ms step_avg:98.40ms
step:1398/1770 train_time:136585ms step_avg:98.40ms
step:1399/1770 train_time:136687ms step_avg:98.41ms
step:1400/1770 train_time:136789ms step_avg:98.41ms
step:1401/1770 train_time:136891ms step_avg:98.41ms
step:1402/1770 train_time:136994ms step_avg:98.42ms
step:1403/1770 train_time:137096ms step_avg:98.42ms
step:1404/1770 train_time:137198ms step_avg:98.42ms
step:1405/1770 train_time:137300ms step_avg:98.42ms
step:1406/1770 train_time:137402ms step_avg:98.43ms
step:1407/1770 train_time:137503ms step_avg:98.43ms
step:1408/1770 train_time:137605ms step_avg:98.43ms
step:1409/1770 train_time:137706ms step_avg:98.43ms
step:1410/1770 train_time:137809ms step_avg:98.43ms
step:1411/1770 train_time:137910ms step_avg:98.44ms
step:1412/1770 train_time:138012ms step_avg:98.44ms
step:1413/1770 train_time:138114ms step_avg:98.44ms
step:1414/1770 train_time:138217ms step_avg:98.45ms
step:1415/1770 train_time:138320ms step_avg:98.45ms
step:1416/1770 train_time:138423ms step_avg:98.45ms
step:1417/1770 train_time:138525ms step_avg:98.45ms
step:1418/1770 train_time:138627ms step_avg:98.46ms
step:1419/1770 train_time:138730ms step_avg:98.46ms
step:1420/1770 train_time:138832ms step_avg:98.46ms
step:1421/1770 train_time:138935ms step_avg:98.47ms
step:1422/1770 train_time:139036ms step_avg:98.47ms
step:1423/1770 train_time:139138ms step_avg:98.47ms
step:1424/1770 train_time:139241ms step_avg:98.47ms
step:1425/1770 train_time:139342ms step_avg:98.48ms
step:1426/1770 train_time:139445ms step_avg:98.48ms
step:1427/1770 train_time:139546ms step_avg:98.48ms
step:1428/1770 train_time:139650ms step_avg:98.48ms
step:1429/1770 train_time:139752ms step_avg:98.49ms
step:1430/1770 train_time:139854ms step_avg:98.49ms
step:1431/1770 train_time:139957ms step_avg:98.49ms
step:1432/1770 train_time:140059ms step_avg:98.49ms
step:1433/1770 train_time:140161ms step_avg:98.50ms
step:1434/1770 train_time:140262ms step_avg:98.50ms
step:1435/1770 train_time:140364ms step_avg:98.50ms
step:1436/1770 train_time:140468ms step_avg:98.50ms
step:1437/1770 train_time:140570ms step_avg:98.51ms
step:1438/1770 train_time:140671ms step_avg:98.51ms
step:1439/1770 train_time:140774ms step_avg:98.51ms
step:1440/1770 train_time:140876ms step_avg:98.51ms
step:1441/1770 train_time:140981ms step_avg:98.52ms
step:1442/1770 train_time:141082ms step_avg:98.52ms
step:1443/1770 train_time:141184ms step_avg:98.52ms
step:1444/1770 train_time:141287ms step_avg:98.53ms
step:1445/1770 train_time:141391ms step_avg:98.53ms
step:1446/1770 train_time:141494ms step_avg:98.53ms
step:1447/1770 train_time:141597ms step_avg:98.54ms
step:1448/1770 train_time:141700ms step_avg:98.54ms
step:1449/1770 train_time:141804ms step_avg:98.54ms
step:1450/1770 train_time:141907ms step_avg:98.55ms
step:1451/1770 train_time:142012ms step_avg:98.55ms
step:1452/1770 train_time:142116ms step_avg:98.55ms
step:1453/1770 train_time:142218ms step_avg:98.56ms
step:1454/1770 train_time:142321ms step_avg:98.56ms
step:1455/1770 train_time:142425ms step_avg:98.56ms
step:1456/1770 train_time:142529ms step_avg:98.57ms
step:1457/1770 train_time:142633ms step_avg:98.57ms
step:1458/1770 train_time:142736ms step_avg:98.57ms
step:1459/1770 train_time:142841ms step_avg:98.58ms
step:1460/1770 train_time:142944ms step_avg:98.58ms
step:1461/1770 train_time:143048ms step_avg:98.59ms
step:1462/1770 train_time:143151ms step_avg:98.59ms
step:1463/1770 train_time:143254ms step_avg:98.59ms
step:1464/1770 train_time:143358ms step_avg:98.60ms
step:1465/1770 train_time:143461ms step_avg:98.60ms
step:1466/1770 train_time:143565ms step_avg:98.60ms
step:1467/1770 train_time:143671ms step_avg:98.61ms
step:1468/1770 train_time:143774ms step_avg:98.61ms
step:1469/1770 train_time:143877ms step_avg:98.61ms
step:1470/1770 train_time:143979ms step_avg:98.62ms
step:1471/1770 train_time:144083ms step_avg:98.62ms
step:1472/1770 train_time:144186ms step_avg:98.62ms
step:1473/1770 train_time:144290ms step_avg:98.63ms
step:1474/1770 train_time:144394ms step_avg:98.63ms
step:1475/1770 train_time:144497ms step_avg:98.63ms
step:1476/1770 train_time:144601ms step_avg:98.64ms
step:1477/1770 train_time:144706ms step_avg:98.64ms
step:1478/1770 train_time:144810ms step_avg:98.64ms
step:1479/1770 train_time:144913ms step_avg:98.65ms
step:1480/1770 train_time:145016ms step_avg:98.65ms
step:1481/1770 train_time:145123ms step_avg:98.66ms
step:1482/1770 train_time:145225ms step_avg:98.66ms
step:1483/1770 train_time:145329ms step_avg:98.66ms
step:1484/1770 train_time:145433ms step_avg:98.67ms
step:1485/1770 train_time:145536ms step_avg:98.67ms
step:1486/1770 train_time:145639ms step_avg:98.67ms
step:1487/1770 train_time:145742ms step_avg:98.67ms
step:1488/1770 train_time:145845ms step_avg:98.68ms
step:1489/1770 train_time:145949ms step_avg:98.68ms
step:1490/1770 train_time:146053ms step_avg:98.68ms
step:1491/1770 train_time:146156ms step_avg:98.69ms
step:1492/1770 train_time:146260ms step_avg:98.69ms
step:1493/1770 train_time:146367ms step_avg:98.70ms
step:1494/1770 train_time:146473ms step_avg:98.70ms
step:1495/1770 train_time:146576ms step_avg:98.70ms
step:1496/1770 train_time:146679ms step_avg:98.71ms
step:1497/1770 train_time:146783ms step_avg:98.71ms
step:1498/1770 train_time:146885ms step_avg:98.71ms
step:1499/1770 train_time:146988ms step_avg:98.72ms
step:1500/1770 train_time:147091ms step_avg:98.72ms
step:1500/1770 val_loss:3.3428 train_time:147192ms step_avg:98.79ms
step:1501/1770 train_time:147214ms step_avg:98.73ms
step:1502/1770 train_time:147306ms step_avg:98.73ms
step:1503/1770 train_time:147408ms step_avg:98.73ms
step:1504/1770 train_time:147512ms step_avg:98.74ms
step:1505/1770 train_time:147617ms step_avg:98.74ms
step:1506/1770 train_time:147720ms step_avg:98.74ms
step:1507/1770 train_time:147824ms step_avg:98.75ms
step:1508/1770 train_time:147928ms step_avg:98.75ms
step:1509/1770 train_time:148031ms step_avg:98.75ms
step:1510/1770 train_time:148134ms step_avg:98.76ms
step:1511/1770 train_time:148239ms step_avg:98.76ms
step:1512/1770 train_time:148345ms step_avg:98.76ms
step:1513/1770 train_time:148448ms step_avg:98.77ms
step:1514/1770 train_time:148551ms step_avg:98.77ms
step:1515/1770 train_time:148655ms step_avg:98.77ms
step:1516/1770 train_time:148758ms step_avg:98.78ms
step:1517/1770 train_time:148860ms step_avg:98.78ms
step:1518/1770 train_time:148966ms step_avg:98.78ms
step:1519/1770 train_time:149068ms step_avg:98.79ms
step:1520/1770 train_time:149172ms step_avg:98.79ms
step:1521/1770 train_time:149275ms step_avg:98.79ms
step:1522/1770 train_time:149380ms step_avg:98.80ms
step:1523/1770 train_time:149484ms step_avg:98.80ms
step:1524/1770 train_time:149587ms step_avg:98.80ms
step:1525/1770 train_time:149690ms step_avg:98.80ms
step:1526/1770 train_time:149792ms step_avg:98.81ms
step:1527/1770 train_time:149896ms step_avg:98.81ms
step:1528/1770 train_time:150003ms step_avg:98.82ms
step:1529/1770 train_time:150105ms step_avg:98.82ms
step:1530/1770 train_time:150208ms step_avg:98.82ms
step:1531/1770 train_time:150310ms step_avg:98.82ms
step:1532/1770 train_time:150414ms step_avg:98.83ms
step:1533/1770 train_time:150518ms step_avg:98.83ms
step:1534/1770 train_time:150622ms step_avg:98.83ms
step:1535/1770 train_time:150726ms step_avg:98.84ms
step:1536/1770 train_time:150829ms step_avg:98.84ms
step:1537/1770 train_time:150933ms step_avg:98.84ms
step:1538/1770 train_time:151037ms step_avg:98.85ms
step:1539/1770 train_time:151140ms step_avg:98.85ms
step:1540/1770 train_time:151246ms step_avg:98.85ms
step:1541/1770 train_time:151352ms step_avg:98.86ms
step:1542/1770 train_time:151455ms step_avg:98.86ms
step:1543/1770 train_time:151557ms step_avg:98.86ms
step:1544/1770 train_time:151663ms step_avg:98.87ms
step:1545/1770 train_time:151766ms step_avg:98.87ms
step:1546/1770 train_time:151870ms step_avg:98.87ms
step:1547/1770 train_time:151972ms step_avg:98.88ms
step:1548/1770 train_time:152074ms step_avg:98.88ms
step:1549/1770 train_time:152178ms step_avg:98.88ms
step:1550/1770 train_time:152282ms step_avg:98.88ms
step:1551/1770 train_time:152385ms step_avg:98.89ms
step:1552/1770 train_time:152491ms step_avg:98.89ms
step:1553/1770 train_time:152594ms step_avg:98.89ms
step:1554/1770 train_time:152696ms step_avg:98.90ms
step:1555/1770 train_time:152801ms step_avg:98.90ms
step:1556/1770 train_time:152904ms step_avg:98.90ms
step:1557/1770 train_time:153006ms step_avg:98.91ms
step:1558/1770 train_time:153110ms step_avg:98.91ms
step:1559/1770 train_time:153212ms step_avg:98.91ms
step:1560/1770 train_time:153314ms step_avg:98.91ms
step:1561/1770 train_time:153420ms step_avg:98.92ms
step:1562/1770 train_time:153523ms step_avg:98.92ms
step:1563/1770 train_time:153626ms step_avg:98.92ms
step:1564/1770 train_time:153729ms step_avg:98.92ms
step:1565/1770 train_time:153832ms step_avg:98.93ms
step:1566/1770 train_time:153936ms step_avg:98.93ms
step:1567/1770 train_time:154040ms step_avg:98.93ms
step:1568/1770 train_time:154143ms step_avg:98.94ms
step:1569/1770 train_time:154250ms step_avg:98.94ms
step:1570/1770 train_time:154352ms step_avg:98.94ms
step:1571/1770 train_time:154456ms step_avg:98.95ms
step:1572/1770 train_time:154561ms step_avg:98.95ms
step:1573/1770 train_time:154666ms step_avg:98.95ms
step:1574/1770 train_time:154769ms step_avg:98.96ms
step:1575/1770 train_time:154871ms step_avg:98.96ms
step:1576/1770 train_time:154974ms step_avg:98.96ms
step:1577/1770 train_time:155078ms step_avg:98.96ms
step:1578/1770 train_time:155185ms step_avg:98.97ms
step:1579/1770 train_time:155288ms step_avg:98.97ms
step:1580/1770 train_time:155391ms step_avg:98.98ms
step:1581/1770 train_time:155497ms step_avg:98.98ms
step:1582/1770 train_time:155602ms step_avg:98.98ms
step:1583/1770 train_time:155705ms step_avg:98.99ms
step:1584/1770 train_time:155808ms step_avg:98.99ms
step:1585/1770 train_time:155912ms step_avg:98.99ms
step:1586/1770 train_time:156019ms step_avg:99.00ms
step:1587/1770 train_time:156122ms step_avg:99.00ms
step:1588/1770 train_time:156225ms step_avg:99.00ms
step:1589/1770 train_time:156330ms step_avg:99.01ms
step:1590/1770 train_time:156433ms step_avg:99.01ms
step:1591/1770 train_time:156536ms step_avg:99.01ms
step:1592/1770 train_time:156641ms step_avg:99.01ms
step:1593/1770 train_time:156743ms step_avg:99.02ms
step:1594/1770 train_time:156847ms step_avg:99.02ms
step:1595/1770 train_time:156949ms step_avg:99.02ms
step:1596/1770 train_time:157053ms step_avg:99.02ms
step:1597/1770 train_time:157156ms step_avg:99.03ms
step:1598/1770 train_time:157259ms step_avg:99.03ms
step:1599/1770 train_time:157364ms step_avg:99.03ms
step:1600/1770 train_time:157469ms step_avg:99.04ms
step:1601/1770 train_time:157573ms step_avg:99.04ms
step:1602/1770 train_time:157678ms step_avg:99.04ms
step:1603/1770 train_time:157782ms step_avg:99.05ms
step:1604/1770 train_time:157885ms step_avg:99.05ms
step:1605/1770 train_time:157987ms step_avg:99.05ms
step:1606/1770 train_time:158090ms step_avg:99.05ms
step:1607/1770 train_time:158196ms step_avg:99.06ms
step:1608/1770 train_time:158299ms step_avg:99.06ms
step:1609/1770 train_time:158403ms step_avg:99.06ms
step:1610/1770 train_time:158508ms step_avg:99.07ms
step:1611/1770 train_time:158613ms step_avg:99.07ms
step:1612/1770 train_time:158717ms step_avg:99.07ms
step:1613/1770 train_time:158821ms step_avg:99.08ms
step:1614/1770 train_time:158924ms step_avg:99.08ms
step:1615/1770 train_time:159028ms step_avg:99.08ms
step:1616/1770 train_time:159131ms step_avg:99.09ms
step:1617/1770 train_time:159236ms step_avg:99.09ms
step:1618/1770 train_time:159340ms step_avg:99.09ms
step:1619/1770 train_time:159444ms step_avg:99.09ms
step:1620/1770 train_time:159547ms step_avg:99.10ms
step:1621/1770 train_time:159650ms step_avg:99.10ms
step:1622/1770 train_time:159755ms step_avg:99.10ms
step:1623/1770 train_time:159861ms step_avg:99.11ms
step:1624/1770 train_time:159965ms step_avg:99.11ms
step:1625/1770 train_time:160067ms step_avg:99.11ms
step:1625/1770 val_loss:3.3083 train_time:160169ms step_avg:99.18ms
step:1626/1770 train_time:160191ms step_avg:99.13ms
step:1627/1770 train_time:160283ms step_avg:99.12ms
step:1628/1770 train_time:160387ms step_avg:99.13ms
step:1629/1770 train_time:160490ms step_avg:99.13ms
step:1630/1770 train_time:160593ms step_avg:99.13ms
step:1631/1770 train_time:160696ms step_avg:99.13ms
step:1632/1770 train_time:160799ms step_avg:99.14ms
step:1633/1770 train_time:160902ms step_avg:99.14ms
step:1634/1770 train_time:161005ms step_avg:99.14ms
step:1635/1770 train_time:161108ms step_avg:99.14ms
step:1636/1770 train_time:161213ms step_avg:99.15ms
step:1637/1770 train_time:161318ms step_avg:99.15ms
step:1638/1770 train_time:161421ms step_avg:99.15ms
step:1639/1770 train_time:161525ms step_avg:99.16ms
step:1640/1770 train_time:161630ms step_avg:99.16ms
step:1641/1770 train_time:161733ms step_avg:99.16ms
step:1642/1770 train_time:161836ms step_avg:99.16ms
step:1643/1770 train_time:161940ms step_avg:99.17ms
step:1644/1770 train_time:162044ms step_avg:99.17ms
step:1645/1770 train_time:162148ms step_avg:99.17ms
step:1646/1770 train_time:162252ms step_avg:99.18ms
step:1647/1770 train_time:162357ms step_avg:99.18ms
step:1648/1770 train_time:162459ms step_avg:99.18ms
step:1649/1770 train_time:162562ms step_avg:99.18ms
step:1650/1770 train_time:162666ms step_avg:99.19ms
step:1651/1770 train_time:162769ms step_avg:99.19ms
step:1652/1770 train_time:162873ms step_avg:99.19ms
step:1653/1770 train_time:162976ms step_avg:99.19ms
step:1654/1770 train_time:163083ms step_avg:99.20ms
step:1655/1770 train_time:163189ms step_avg:99.20ms
step:1656/1770 train_time:163292ms step_avg:99.21ms
step:1657/1770 train_time:163398ms step_avg:99.21ms
step:1658/1770 train_time:163501ms step_avg:99.21ms
step:1659/1770 train_time:163606ms step_avg:99.22ms
step:1660/1770 train_time:163709ms step_avg:99.22ms
step:1661/1770 train_time:163815ms step_avg:99.22ms
step:1662/1770 train_time:163919ms step_avg:99.22ms
step:1663/1770 train_time:164022ms step_avg:99.23ms
step:1664/1770 train_time:164125ms step_avg:99.23ms
step:1665/1770 train_time:164227ms step_avg:99.23ms
step:1666/1770 train_time:164331ms step_avg:99.23ms
step:1667/1770 train_time:164434ms step_avg:99.24ms
step:1668/1770 train_time:164537ms step_avg:99.24ms
step:1669/1770 train_time:164640ms step_avg:99.24ms
step:1670/1770 train_time:164743ms step_avg:99.24ms
step:1671/1770 train_time:164848ms step_avg:99.25ms
step:1672/1770 train_time:164953ms step_avg:99.25ms
step:1673/1770 train_time:165058ms step_avg:99.25ms
step:1674/1770 train_time:165161ms step_avg:99.26ms
step:1675/1770 train_time:165264ms step_avg:99.26ms
step:1676/1770 train_time:165368ms step_avg:99.26ms
step:1677/1770 train_time:165477ms step_avg:99.27ms
step:1678/1770 train_time:165579ms step_avg:99.27ms
step:1679/1770 train_time:165683ms step_avg:99.27ms
step:1680/1770 train_time:165786ms step_avg:99.27ms
step:1681/1770 train_time:165892ms step_avg:99.28ms
step:1682/1770 train_time:165998ms step_avg:99.28ms
step:1683/1770 train_time:166102ms step_avg:99.28ms
step:1684/1770 train_time:166205ms step_avg:99.29ms
step:1685/1770 train_time:166308ms step_avg:99.29ms
step:1686/1770 train_time:166413ms step_avg:99.29ms
step:1687/1770 train_time:166518ms step_avg:99.29ms
step:1688/1770 train_time:166621ms step_avg:99.30ms
step:1689/1770 train_time:166724ms step_avg:99.30ms
step:1690/1770 train_time:166828ms step_avg:99.30ms
step:1691/1770 train_time:166933ms step_avg:99.31ms
step:1692/1770 train_time:167036ms step_avg:99.31ms
step:1693/1770 train_time:167140ms step_avg:99.31ms
step:1694/1770 train_time:167243ms step_avg:99.31ms
step:1695/1770 train_time:167348ms step_avg:99.32ms
step:1696/1770 train_time:167454ms step_avg:99.32ms
step:1697/1770 train_time:167559ms step_avg:99.32ms
step:1698/1770 train_time:167662ms step_avg:99.33ms
step:1699/1770 train_time:167765ms step_avg:99.33ms
step:1700/1770 train_time:167868ms step_avg:99.33ms
step:1701/1770 train_time:167970ms step_avg:99.33ms
step:1702/1770 train_time:168075ms step_avg:99.34ms
step:1703/1770 train_time:168179ms step_avg:99.34ms
step:1704/1770 train_time:168282ms step_avg:99.34ms
step:1705/1770 train_time:168385ms step_avg:99.34ms
step:1706/1770 train_time:168488ms step_avg:99.34ms
step:1707/1770 train_time:168592ms step_avg:99.35ms
step:1708/1770 train_time:168696ms step_avg:99.35ms
step:1709/1770 train_time:168802ms step_avg:99.35ms
step:1710/1770 train_time:168909ms step_avg:99.36ms
step:1711/1770 train_time:169016ms step_avg:99.36ms
step:1712/1770 train_time:169120ms step_avg:99.37ms
step:1713/1770 train_time:169224ms step_avg:99.37ms
step:1714/1770 train_time:169328ms step_avg:99.37ms
step:1715/1770 train_time:169432ms step_avg:99.37ms
step:1716/1770 train_time:169538ms step_avg:99.38ms
step:1717/1770 train_time:169642ms step_avg:99.38ms
step:1718/1770 train_time:169747ms step_avg:99.38ms
step:1719/1770 train_time:169852ms step_avg:99.39ms
step:1720/1770 train_time:169956ms step_avg:99.39ms
step:1721/1770 train_time:170060ms step_avg:99.39ms
step:1722/1770 train_time:170166ms step_avg:99.40ms
step:1723/1770 train_time:170272ms step_avg:99.40ms
step:1724/1770 train_time:170379ms step_avg:99.40ms
step:1725/1770 train_time:170485ms step_avg:99.41ms
step:1726/1770 train_time:170591ms step_avg:99.41ms
step:1727/1770 train_time:170695ms step_avg:99.41ms
step:1728/1770 train_time:170801ms step_avg:99.42ms
step:1729/1770 train_time:170905ms step_avg:99.42ms
step:1730/1770 train_time:171010ms step_avg:99.42ms
step:1731/1770 train_time:171116ms step_avg:99.43ms
step:1732/1770 train_time:171219ms step_avg:99.43ms
step:1733/1770 train_time:171325ms step_avg:99.43ms
step:1734/1770 train_time:171429ms step_avg:99.44ms
step:1735/1770 train_time:171535ms step_avg:99.44ms
step:1736/1770 train_time:171638ms step_avg:99.44ms
step:1737/1770 train_time:171743ms step_avg:99.45ms
step:1738/1770 train_time:171847ms step_avg:99.45ms
step:1739/1770 train_time:171951ms step_avg:99.45ms
step:1740/1770 train_time:172055ms step_avg:99.45ms
step:1741/1770 train_time:172161ms step_avg:99.46ms
step:1742/1770 train_time:172268ms step_avg:99.46ms
step:1743/1770 train_time:172374ms step_avg:99.47ms
step:1744/1770 train_time:172478ms step_avg:99.47ms
step:1745/1770 train_time:172581ms step_avg:99.47ms
step:1746/1770 train_time:172687ms step_avg:99.47ms
step:1747/1770 train_time:172791ms step_avg:99.48ms
step:1748/1770 train_time:172896ms step_avg:99.48ms
step:1749/1770 train_time:173002ms step_avg:99.48ms
step:1750/1770 train_time:173106ms step_avg:99.49ms
step:1750/1770 val_loss:3.2812 train_time:173208ms step_avg:99.55ms
step:1751/1770 train_time:173230ms step_avg:99.50ms
step:1752/1770 train_time:173321ms step_avg:99.50ms
step:1753/1770 train_time:173425ms step_avg:99.50ms
step:1754/1770 train_time:173530ms step_avg:99.50ms
step:1755/1770 train_time:173633ms step_avg:99.50ms
step:1756/1770 train_time:173739ms step_avg:99.51ms
step:1757/1770 train_time:173842ms step_avg:99.51ms
step:1758/1770 train_time:173946ms step_avg:99.51ms
step:1759/1770 train_time:174051ms step_avg:99.51ms
step:1760/1770 train_time:174155ms step_avg:99.52ms
step:1761/1770 train_time:174261ms step_avg:99.52ms
step:1762/1770 train_time:174369ms step_avg:99.53ms
step:1763/1770 train_time:174472ms step_avg:99.53ms
step:1764/1770 train_time:174577ms step_avg:99.53ms
step:1765/1770 train_time:174681ms step_avg:99.53ms
step:1766/1770 train_time:174789ms step_avg:99.54ms
step:1767/1770 train_time:174892ms step_avg:99.54ms
step:1768/1770 train_time:174997ms step_avg:99.54ms
step:1769/1770 train_time:175101ms step_avg:99.55ms
step:1770/1770 train_time:175203ms step_avg:99.55ms
step:1770/1770 val_loss:3.2782 train_time:175308ms step_avg:99.61ms
peak memory allocated: 29898 MiB reserved: 44552 MiB
