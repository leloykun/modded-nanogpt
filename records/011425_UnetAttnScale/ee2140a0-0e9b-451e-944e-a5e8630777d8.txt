import os
import sys
with open(sys.argv[0]) as f:
    code = f.read() # read the code of this file ASAP, for logging
import uuid
import time
import glob
import subprocess
import contextlib
from dataclasses import dataclass

import torch
torch.empty(1, device='cuda', requires_grad=True).backward()
from torch import nn
import torch.nn.functional as F
import torch.distributed as dist
from torch.nn.parallel import DistributedDataParallel as DDP
# use of FlexAttention contributed by @KoszarskyB
from torch.nn.attention.flex_attention import BlockMask, flex_attention

# -----------------------------------------------------------------------------
# Muon optimizer

@torch.compile
def zeropower_via_newtonschulz5(G, steps):
    """
    Newton-Schulz iteration to compute the zeroth power / orthogonalization of G. We opt to use a
    quintic iteration whose coefficients are selected to maximize the slope at zero. For the purpose
    of minimizing steps, it turns out to be empirically effective to keep increasing the slope at
    zero even beyond the point where the iteration no longer converges all the way to one everywhere
    on the interval. This iteration therefore does not produce UV^T but rather something like US'V^T
    where S' is diagonal with S_{ii}' ~ Uniform(0.5, 1.5), which turns out not to hurt model
    performance at all relative to UV^T, where USV^T = G is the SVD.
    """
    assert len(G.shape) == 2
    a, b, c = (3.4445, -4.7750,  2.0315)
    X = G.bfloat16()
    if G.size(0) > G.size(1):
        X = X.T

    # Ensure spectral norm is at most 1
    X = X / (X.norm() + 1e-7)
    # Perform the NS iterations
    for _ in range(steps):
        A = X @ X.T
        B = b * A + c * A @ A # adapted from suggestion by @jxbz, @leloykun, and @YouJiacheng
        X = a * X + B @ X
    
    if G.size(0) > G.size(1):
        X = X.T
    return X

class Muon(torch.optim.Optimizer):
    """
    Muon - MomentUm Orthogonalized by Newton-schulz

    Muon internally runs standard SGD-momentum, and then performs an orthogonalization post-
    processing step, in which each 2D parameter's update is replaced with the nearest orthogonal
    matrix. To efficiently orthogonalize each update, we use a Newton-Schulz iteration, which has
    the advantage that it can be stably run in bfloat16 on the GPU.

    Some warnings:
    - This optimizer assumes that all parameters passed in are 2D.
    - It should not be used for the embedding layer, the final fully connected layer, or any {0,1}-D
    parameters; those should all be optimized by a standard method (e.g., AdamW).
    - To use it with 4D convolutional filters, it works well to just flatten their last 3 dimensions.
    - We believe it is unlikely to work well for training with small batch size.
    - We believe it may not work well for finetuning pretrained models, but we haven't tested this.
    - We have not yet tried this optimizer for training scenarios larger than NanoGPT (124M).

    Arguments:
        lr: The learning rate used by the internal SGD.
        momentum: The momentum used by the internal SGD.
        nesterov: Whether to use Nesterov-style momentum in the internal SGD. (recommended)
        ns_steps: The number of Newton-Schulz iteration steps to use.
    """
    def __init__(self, params, lr=0.02, momentum=0.95, nesterov=True, ns_steps=5):
        self.world_size = int(os.environ['WORLD_SIZE'])
        self.rank = int(os.environ['RANK'])
        defaults = dict(lr=lr, momentum=momentum, nesterov=nesterov, ns_steps=ns_steps)
        assert all(isinstance(p, torch.Tensor) for p in params)
        sizes = {p.numel() for p in params}
        param_groups = [dict(params=[p for p in params if p.numel() == size],
                             update_buffer=[torch.empty(size, device='cuda', dtype=torch.bfloat16) for _ in range(self.world_size)])
                        for size in sizes]
        super().__init__(param_groups, defaults)

    def step(self):

        for group in self.param_groups:

            lr = group['lr']
            momentum = group['momentum']
            nesterov = group['nesterov']
            ns_steps = group['ns_steps']
            update_buffers = group['update_buffer']
            # generate weight updates in distributed fashion
            params = group['params']
            handle = None
            params_world = None
            def update_prev():
                if params_world is None:
                    return
                assert handle is not None
                handle.wait()
                for p_world, g_world in zip(params_world, update_buffers):
                    p_world.data.add_(
                        g_world.view_as(p_world),
                        alpha=-lr * max(1, p_world.size(0) / p_world.size(1)) ** 0.5,
                    )
            for base_i in range(len(params))[::self.world_size]:
                if base_i + rank < len(params):
                    p = params[base_i + self.rank]
                    g = p.grad
                    assert g is not None
                    state = self.state[p]
                    if 'momentum_buffer' not in state:
                        state['momentum_buffer'] = torch.zeros_like(g)
                    buf = state['momentum_buffer']
                    buf.lerp_(g, 1 - momentum)
                    g = g.lerp_(buf, momentum) if nesterov else buf
                    g = zeropower_via_newtonschulz5(g, steps=ns_steps).flatten()
                else:
                    g = update_buffers[rank]
                update_prev() # async all_gather instead of sync all_reduce by @YouJiacheng
                handle = dist.all_gather(update_buffers, g, async_op=True)
                params_world = params[base_i : base_i + self.world_size]
            update_prev()

# -----------------------------------------------------------------------------
# PyTorch nn.Module definitions for the GPT-2 model

def norm(x):
    return F.rms_norm(x, (x.size(-1),))

class CastedLinear(nn.Linear):

    def __init__(self, in_features, out_features):
        super().__init__(in_features, out_features, bias=False)

    def forward(self, x):
        return F.linear(x, self.weight.type_as(x))

class Rotary(nn.Module):

    def __init__(self, dim, max_seq_len=65536):
        super().__init__()
        # half-truncate RoPE by @YouJiacheng
        angular_freq = (1 / 1024) ** torch.linspace(0, 1, steps=dim//4, dtype=torch.float32)
        angular_freq = torch.cat([angular_freq, angular_freq.new_zeros(dim//4)])
        t = torch.arange(max_seq_len, dtype=torch.float32)
        theta = torch.einsum('i,j -> ij', t, angular_freq)
        self.cos = nn.Buffer(theta.cos(), persistent=False)
        self.sin = nn.Buffer(theta.sin(), persistent=False)

    def forward(self, x):
        cos, sin = self.cos[None, :x.size(-3), None, :], self.sin[None, :x.size(-3), None, :]
        x1, x2 = x.float().chunk(2, dim=-1)
        y1 = x1 * cos + x2 * sin
        y2 = x1 * (-sin) + x2 * cos
        return torch.cat((y1, y2), 3).type_as(x)

class CausalSelfAttention(nn.Module):

    def __init__(self, dim, num_heads, layer_id):
        super().__init__()
        assert dim % num_heads == 0
        self.num_heads = num_heads
        self.layer_id = layer_id
        self.c_q = CastedLinear(dim, dim)
        self.c_k = CastedLinear(dim, dim)
        self.c_v = CastedLinear(dim, dim)
        self.lambdas = nn.Parameter(torch.tensor([0.5, 0.5]))
        self.rotary = Rotary(dim // num_heads) # dim // num_heads = head_dim
        self.c_proj = CastedLinear(dim, dim)
        self.c_proj.weight.data.zero_() # zero init suggested by @Grad62304977
        self.attn_scale = 0.13 + 0.01 * min(layer_id, 11 - layer_id)  # unet pattern attention scale by @leloykun

    def forward(self, x, ve, block_mask):
        B, T = x.size(0), x.size(1) # batch size, sequence length
        assert B == 1, 'Must use batch size = 1 for FlexAttention'
        q = self.c_q(x).view(B, T, self.num_heads, -1)
        k = self.c_k(x).view(B, T, self.num_heads, -1)
        v = self.c_v(x).view(B, T, self.num_heads, -1)
        if ve is not None:
            v = self.lambdas[0] * v + self.lambdas[1] * ve.view_as(v) # @KoszarskyB & @Grad62304977
        else: # skip mid-layers token value embeddings by @YouJiacheng
            v = self.lambdas[0] * v
        q, k = norm(q), norm(k) # QK norm @Grad62304977
        q, k = self.rotary(q), self.rotary(k)
        y = flex_attention(q.transpose(1, 2), k.transpose(1, 2), v.transpose(1, 2), block_mask=block_mask, scale=self.attn_scale)
        y = y.transpose(1, 2).contiguous().view_as(x) # re-assemble all head outputs side by side
        y = self.c_proj(y)
        return y

class MLP(nn.Module):

    def __init__(self, dim):
        super().__init__()
        self.c_fc = CastedLinear(dim, 4 * dim)
        self.c_proj = CastedLinear(4 * dim, dim)
        self.c_proj.weight.data.zero_() # zero init suggested by @Grad62304977

    def forward(self, x):
        x = self.c_fc(x)
        x = F.relu(x).square() # https://arxiv.org/abs/2109.08668v2; ~1-2% better than GELU; suggested by @SKYLINEZ007 and @Grad62304977
        x = self.c_proj(x)
        return x

class Block(nn.Module):

    def __init__(self, model_dim, num_heads, layer_id, use_attn=True):
        super().__init__()
        self.attn = CausalSelfAttention(model_dim, num_heads, layer_id) if use_attn else None
        self.mlp = MLP(model_dim)
        self.lambdas = nn.Parameter(torch.tensor([1., 0.]))

    def forward(self, x, ve, x0, block_mask):
        x = self.lambdas[0] * x + self.lambdas[1] * x0
        if self.attn is not None:
            x = x + self.attn(norm(x), ve, block_mask)
        x = x + self.mlp(norm(x))
        return x

class ValueEmbedding(nn.Module):
    def __init__(self, vocab_size, model_dim):
        super().__init__()
        self.embed = nn.ModuleList([nn.Embedding(vocab_size, model_dim) for _ in range(3)])

    def forward(self, inputs):
        ve = [emb(inputs).bfloat16() for emb in self.embed]
        # 012 ... 012 structure on token value embeddings by @YouJiacheng, improved on @leloykun's U-net structure
        ve = [ve[0], ve[1], ve[2], None, None, None, None, None, None, ve[0], ve[1], ve[2]]
        return ve

# -----------------------------------------------------------------------------
# The main GPT-2 model

class GPT(nn.Module):

    def __init__(self, vocab_size, num_layers, num_heads, model_dim):
        super().__init__()
        self.embed = nn.Embedding(vocab_size, model_dim)
        # skip attention of blocks.7 (the 8th layer) by @YouJiacheng
        self.blocks = nn.ModuleList([Block(model_dim, num_heads, layer_id=layer_id, use_attn=(layer_id != 7))
                                     for layer_id in range(num_layers)])
        # token value embeddings by @KoszarskyB - inspired by @Grad62304977's value residual learning
        # U-net structure on token value embeddings by @leloykun
        self.value_embeds = ValueEmbedding(vocab_size, model_dim)
        self.lm_head = CastedLinear(model_dim, vocab_size)
        self.lm_head.weight.data.zero_() # @Grad62304977
        # U-net design by @brendanh0gan
        self.num_encoder_layers = num_layers // 2 # Half of the layers for encoder
        self.num_decoder_layers = num_layers - self.num_encoder_layers # Remaining for decoder
        # Add learnable skip connection weights for decoder layers
        self.skip_weights = nn.Parameter(torch.ones(self.num_decoder_layers))

    def forward(self, inputs, targets, sliding_window_num_blocks):
        BLOCK_SIZE = 128
        seq_len = len(inputs)
        assert seq_len % BLOCK_SIZE == 0
        total_num_blocks = seq_len // BLOCK_SIZE
        assert inputs.ndim == 1
        docs = (inputs == 50256).cumsum(0)
        docs_low = docs.view(-1, BLOCK_SIZE)[:, 0].contiguous()
        docs_high = docs.view(-1, BLOCK_SIZE)[:, -1].contiguous()

        def document_causal(b, h, q_idx, kv_idx):
            causal_mask = q_idx >= kv_idx
            document_mask = docs[q_idx] == docs[kv_idx]
            return causal_mask & document_mask

        def dense_to_ordered(dense_mask):
            num_blocks = dense_mask.sum(dim=-1, dtype=torch.int32)
            indices = dense_mask.argsort(dim=-1, descending=True, stable=True).to(torch.int32)
            return num_blocks[None, None].contiguous(), indices[None, None].contiguous()

        def create_doc_swc_block_mask(sliding_window_num_blocks):
            kv_idx = block_idx = torch.arange(total_num_blocks, dtype=torch.int32, device='cuda')
            q_idx = block_idx[:, None]
            causal_bm = q_idx >= kv_idx
            causal_full_bm = q_idx > kv_idx
            window_bm = q_idx - kv_idx < sliding_window_num_blocks
            window_full_bm = window_bm # block-wise sliding window by @YouJiacheng
            # document_bm = (docs_low[q_idx] <= docs_high[kv_idx]) & (docs_low[kv_idx] <= docs_high[q_idx])
            document_bm = (docs_low[:, None] <= docs_high) & (docs_low <= docs_high[:, None])
            document_full_bm = (docs_low[:, None] == docs_high) & (docs_low == docs_high[:, None])
            nonzero_bm = causal_bm & window_bm & document_bm
            full_bm  = causal_full_bm & window_full_bm & document_full_bm
            kv_num_blocks, kv_indices = dense_to_ordered(nonzero_bm & ~full_bm)
            full_kv_num_blocks, full_kv_indices = dense_to_ordered(full_bm)
            return BlockMask.from_kv_blocks(
                kv_num_blocks,
                kv_indices,
                full_kv_num_blocks,
                full_kv_indices,
                BLOCK_SIZE=BLOCK_SIZE,
                mask_mod=document_causal,
            )

        block_mask = create_doc_swc_block_mask(sliding_window_num_blocks)

        x0 = norm(self.embed(inputs[None]).bfloat16()) # use of norm here by @Grad62304977
        x = x0
        ve = self.value_embeds(inputs)
        assert len(ve) == len(self.blocks)
        ve_enc, ve_dec = ve[:self.num_encoder_layers], ve[self.num_encoder_layers:]

        # Store outputs for U-Net skip connections
        skip_connections = []
        # Encoder pass - process only the first half of the blocks
        for i in range(self.num_encoder_layers):
            x = self.blocks[i](x, ve_enc[i], x0, block_mask)
            skip_connections.append(x)
        # Decoder pass - process the remaining blocks with weighted skip connections
        for i in range(self.num_decoder_layers):
            x = x + self.skip_weights[i] * skip_connections.pop()
            # U-net structure on token value embeddings by @leloykun
            x = self.blocks[self.num_encoder_layers + i](x, ve_dec[i], x0, block_mask)

        x = norm(x)
        logits = self.lm_head(x)
        logits = 15 * torch.tanh(logits / 15) # @Grad62304977 added tanh softcapping, @KoszarskyB reduced it from 30 to 15
        logits = logits.float()
        loss = F.cross_entropy(logits.view(-1, logits.size(-1)), targets)
        return loss

# -----------------------------------------------------------------------------
# Our own simple Distributed Data Loader

def _load_data_shard(path):
    # only reads the header, returns header data
    # header is 256 int32
    header = torch.from_file(path, False, 256, dtype=torch.int32)
    assert header[0] == 20240520, 'magic number mismatch in the data .bin file'
    assert header[1] == 1, 'unsupported version'
    num_tokens = int(header[2]) # number of tokens (claimed)
    with open(path, 'rb', buffering=0) as f:
        tokens = torch.empty(num_tokens, dtype=torch.uint16, pin_memory=True) # avoid pin_memory copy by @YouJiacheng
        f.seek(256 * 4)
        nbytes = f.readinto(tokens.numpy()) # avoid bytes->array copy by @YouJiacheng
        assert nbytes == 2 * num_tokens, 'number of tokens read does not match header'
    return tokens

class DistributedDataLoader:

    def __init__(self, filename_pattern):
        self.rank = int(os.environ['RANK'])
        self.world_size = int(os.environ['WORLD_SIZE'])
        self.files = sorted(glob.glob(filename_pattern))
        self.reset()

    def reset(self):
        self.current_shard = -1
        self.advance()

    def advance(self):
        self.current_shard = (self.current_shard + 1) % len(self.files)
        self.current_position = 0
        self.tokens = _load_data_shard(self.files[self.current_shard])

    def next_batch(self, batch_size):
        assert batch_size % self.world_size == 0
        device_batch_size = batch_size // self.world_size
        # load next shard if necessary
        if self.current_position + batch_size + 1 >= len(self.tokens):
            self.advance()
        pos = self.current_position + self.rank * device_batch_size
        device_batch_tokens = self.tokens[pos:pos+device_batch_size+1]
        # advance current position
        self.current_position += batch_size
        inputs = device_batch_tokens[:-1].to(device='cuda', dtype=torch.int32, non_blocking=True)
        targets = device_batch_tokens[1:].to(device='cuda', dtype=torch.int64, non_blocking=True)
        return inputs, targets

# -----------------------------------------------------------------------------
# int main

@dataclass
class Hyperparameters:
    # data
    train_files = 'data/fineweb10B/fineweb_train_*.bin' # input .bin to train on
    val_files = 'data/fineweb10B/fineweb_val_*.bin' # input .bin to eval validation loss on
    val_tokens = 10485760 # how many tokens of validation data? it's important to keep this fixed for consistent comparisons
    # optimization
    batch_size = 8*64*1024 # batch size in tokens
    num_iterations = 1375 # number of iterations to run
    cooldown_frac = 0.4 # fraction of training spent cooling down the learning rate
    bf16_embeds = True
    # evaluation and logging
    val_loss_every = 125 # every how many steps to evaluate val loss? 0 for only at the end
    # implementation
    max_device_batch_size = 64*1024 # batch size per device in tokens
    save_checkpoint = False
args = Hyperparameters()

micro_bs = args.max_device_batch_size

# set up DDP (distributed data parallel). torchrun sets this env variable
rank = int(os.environ['RANK'])
local_rank = int(os.environ['LOCAL_RANK'])
world_size = int(os.environ['WORLD_SIZE'])
assert torch.cuda.is_available()
torch.cuda.set_device(local_rank)
dist.init_process_group(backend='nccl', device_id=torch.device(local_rank))
dist.barrier()
master_process = (rank == 0) # this process will do logging, checkpointing etc.

# begin logging
logfile = None
if master_process:
    run_id = uuid.uuid4()
    os.makedirs('logs', exist_ok=True)
    logfile = f'logs/{run_id}.txt'
    print(logfile)

def print0(s, console=False):
    if master_process:
        with open(logfile, 'a') as f:
            if console:
                print(s)
            print(s, file=f)

# begin by printing this file (the Python code)
print0(code)
print0('='*100)
# log information about the hardware/software environment this is running on
print0(f'Running Python {sys.version}')
print0(f'Running PyTorch {torch.version.__version__} compiled for CUDA {torch.version.cuda}')
print0(subprocess.run(['nvidia-smi'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True).stdout)
print0('='*100)

# load data
train_loader = DistributedDataLoader(args.train_files)
val_loader = DistributedDataLoader(args.val_files)
print0(f'Training dataloader files: {train_loader.files}')
print0(f'Validation dataloader files: {val_loader.files}')
print0('='*100)

# there are only 50257 unique GPT-2 tokens; we extend to nearest multiple of 128 for efficiency. suggested to me by @Grad62304977.
# this originates from Karpathy's experiments.
model = GPT(vocab_size=50304, num_layers=12, num_heads=6, model_dim=768)
model = model.cuda()
if args.bf16_embeds:
    for m in model.modules():
        if isinstance(m, nn.Embedding):
            m.bfloat16()
model: GPT = torch.compile(model)
ddp_model = DDP(model, device_ids=[local_rank], broadcast_buffers=False, gradient_as_bucket_view=True)

# collect the parameters to optimize
hidden_matrix_params = [p for p in model.blocks.parameters() if p.ndim == 2]
embed_params = [model.embed.weight, *model.value_embeds.parameters()]
scalar_params = [p for n, p in model.named_parameters() if p.ndim < 2 and "attn_scale" not in n]
attn_scale_params = [p for n, p in model.named_parameters() if p.ndim < 2 and "attn_scale" in n]
head_params = [model.lm_head.weight]

# init the optimizer(s)
optimizer1 = torch.optim.Adam([dict(params=embed_params, lr=0.6),
                               dict(params=head_params, lr=0.008),
                               dict(params=scalar_params, lr=0.04),
                               dict(params=attn_scale_params, lr=0.01)],
                              betas=(0.8, 0.95), fused=True)
optimizer2 = Muon(hidden_matrix_params, lr=0.05, momentum=0.95)
optimizers = [optimizer1, optimizer2]

# learning rate schedule: stable then decay
def get_lr(it):
    t = 1 - it / args.num_iterations # time remaining in training
    assert 1 >= t > 0
    # 1) constant lr for first part of training
    if t >= args.cooldown_frac:
        return 1.0
    # 2) then linear cooldown
    else:
        return t / args.cooldown_frac
schedulers = [torch.optim.lr_scheduler.LambdaLR(opt, get_lr) for opt in optimizers]

# sliding window size schedule: linear increase over training in chunks of 128 from 128 -> 1792. By @fernbear.bsky.social
def get_sliding_window_blocks(it):
    x = it / args.num_iterations # training progress
    assert 0 <= x <= 1
    return int(((1 - x) * 128 + x * 1856) // 128)
sliding_window_num_blocks = torch.tensor(1, dtype=torch.int32, device='cuda')

# Start training loop
training_time_ms = 0
# start the clock
torch.cuda.synchronize()
t0 = time.perf_counter()
# begin training
train_steps = args.num_iterations
for step in range(train_steps + 1):
    last_step = (step == train_steps)
    # This effectively ignores timing first 10 steps, which are slower for weird reasons.
    # Alternately, and slightly more correctly in terms of benchmarking, we could do 10
    # steps with dummy data first, and then re-initialize the model and reset the loader.
    if step == 10:
        training_time_ms = 0
        t0 = time.perf_counter()
    timed_steps = float('nan') if step <= 11 else (step - 10) + 1 # <= 11 to avoid bug in val

    sliding_window_num_blocks.copy_(get_sliding_window_blocks(step))

    # --------------- VALIDATION SECTION -----------------
    if last_step or (args.val_loss_every > 0 and step % args.val_loss_every == 0):
        # stop the clock
        torch.cuda.synchronize()
        training_time_ms += 1000 * (time.perf_counter() - t0)
        # run validation batches
        model.eval()
        val_loader.reset()
        val_loss = 0.0
        # calculate the number of steps to take in the val loop.
        val_batch_size = world_size * micro_bs
        assert args.val_tokens % val_batch_size == 0
        val_steps = args.val_tokens // val_batch_size
        for _ in range(val_steps):
            with torch.no_grad():
                inputs_val, targets_val = val_loader.next_batch(val_batch_size)
                val_loss += ddp_model(inputs_val, targets_val, sliding_window_num_blocks)
        # Print attention scales
        for n, p in model.named_parameters():
            if p.ndim < 2 and "attn_scale" in n:
                print0(f'{n}: {p.item()}', console=True)
        dist.all_reduce(val_loss, op=dist.ReduceOp.AVG)
        val_loss /= val_steps
        # logging
        print0(f'step:{step}/{train_steps} val_loss:{val_loss:.4f} train_time:{training_time_ms:.0f}ms step_avg:{training_time_ms/(timed_steps-1):.2f}ms', console=True)
        # start the clock again
        torch.cuda.synchronize()
        t0 = time.perf_counter()

    if last_step:
        if master_process and args.save_checkpoint:
            log = dict(step=step, code=code, model=model.state_dict(), optimizers=[opt.state_dict() for opt in optimizers])
            os.makedirs(f'logs/{run_id}', exist_ok=True)
            torch.save(log, f'logs/{run_id}/state_step{step:06d}.pt')
        # the last step only has the validation loop, so break to avoid training
        break

    # --------------- TRAINING SECTION -----------------
    model.train()
    batch_size = args.batch_size
    assert batch_size % world_size == 0
    inputs_train, targets_train = train_loader.next_batch(batch_size)
    assert len(inputs_train) <= micro_bs or len(inputs_train) % micro_bs == 0
    for micro_inputs_train, micro_targets_train in zip(inputs_train.split(micro_bs), targets_train.split(micro_bs)):
        ddp_model(micro_inputs_train, micro_targets_train, sliding_window_num_blocks).backward()
    # momentum warmup for Muon
    frac = min(step/300, 1)
    for group in optimizer2.param_groups:
        group['momentum'] = (1 - frac) * 0.85 + frac * 0.95
    # step the optimizers and schedulers
    for opt, sched in zip(optimizers, schedulers):
        opt.step()
        if step != train_steps-1:
            sched.step()
    # null the gradients
    model.zero_grad(set_to_none=True)
    # logging
    approx_time = training_time_ms + 1000 * (time.perf_counter() - t0)
    print0(f'step:{step+1}/{train_steps} train_time:{approx_time:.0f}ms step_avg:{approx_time/timed_steps:.2f}ms', console=True)

print0(f'peak memory consumption: {torch.cuda.max_memory_allocated() // 1024 // 1024} MiB')
dist.destroy_process_group()

====================================================================================================
Running Python 3.10.12 (main, Sep 11 2024, 15:47:36) [GCC 11.4.0]
Running PyTorch 2.7.0.dev20250110+cu126 compiled for CUDA 12.6
Wed Jan 15 21:46:09 2025       
+---------------------------------------------------------------------------------------+
| NVIDIA-SMI 535.183.06             Driver Version: 535.183.06   CUDA Version: 12.4     |
|-----------------------------------------+----------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |
|                                         |                      |               MIG M. |
|=========================================+======================+======================|
|   0  NVIDIA H100 80GB HBM3          On  | 00000000:19:00.0 Off |                    0 |
| N/A   39C    P0             122W / 700W |   7713MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   1  NVIDIA H100 80GB HBM3          On  | 00000000:3B:00.0 Off |                    0 |
| N/A   30C    P0             114W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   2  NVIDIA H100 80GB HBM3          On  | 00000000:4C:00.0 Off |                    0 |
| N/A   29C    P0             115W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   3  NVIDIA H100 80GB HBM3          On  | 00000000:5D:00.0 Off |                    0 |
| N/A   38C    P0             118W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   4  NVIDIA H100 80GB HBM3          On  | 00000000:9B:00.0 Off |                    0 |
| N/A   39C    P0             120W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   5  NVIDIA H100 80GB HBM3          On  | 00000000:BB:00.0 Off |                    0 |
| N/A   31C    P0             114W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   6  NVIDIA H100 80GB HBM3          On  | 00000000:CB:00.0 Off |                    0 |
| N/A   37C    P0             117W / 700W |   3451MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   7  NVIDIA H100 80GB HBM3          On  | 00000000:DB:00.0 Off |                    0 |
| N/A   30C    P0             113W / 700W |   3211MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
                                                                                         
+---------------------------------------------------------------------------------------+
| Processes:                                                                            |
|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |
|        ID   ID                                                             Usage      |
|=======================================================================================|
+---------------------------------------------------------------------------------------+

====================================================================================================
Training dataloader files: ['data/fineweb10B/fineweb_train_000001.bin', 'data/fineweb10B/fineweb_train_000002.bin', 'data/fineweb10B/fineweb_train_000003.bin', 'data/fineweb10B/fineweb_train_000004.bin', 'data/fineweb10B/fineweb_train_000005.bin', 'data/fineweb10B/fineweb_train_000006.bin', 'data/fineweb10B/fineweb_train_000007.bin', 'data/fineweb10B/fineweb_train_000008.bin', 'data/fineweb10B/fineweb_train_000009.bin']
Validation dataloader files: ['data/fineweb10B/fineweb_val_000000.bin']
====================================================================================================
step:0/1375 val_loss:10.8258 train_time:0ms step_avg:nanms
step:1/1375 train_time:27738ms step_avg:nanms
step:2/1375 train_time:27827ms step_avg:nanms
step:3/1375 train_time:28009ms step_avg:nanms
step:4/1375 train_time:28142ms step_avg:nanms
step:5/1375 train_time:28277ms step_avg:nanms
step:6/1375 train_time:28409ms step_avg:nanms
step:7/1375 train_time:28541ms step_avg:nanms
step:8/1375 train_time:28673ms step_avg:nanms
step:9/1375 train_time:28805ms step_avg:nanms
step:10/1375 train_time:28943ms step_avg:nanms
step:11/1375 train_time:135ms step_avg:nanms
step:12/1375 train_time:270ms step_avg:nanms
step:13/1375 train_time:403ms step_avg:134.23ms
step:14/1375 train_time:537ms step_avg:134.13ms
step:15/1375 train_time:669ms step_avg:133.74ms
step:16/1375 train_time:801ms step_avg:133.52ms
step:17/1375 train_time:936ms step_avg:133.78ms
step:18/1375 train_time:1072ms step_avg:133.95ms
step:19/1375 train_time:1206ms step_avg:133.96ms
step:20/1375 train_time:1340ms step_avg:134.02ms
step:21/1375 train_time:1474ms step_avg:134.00ms
step:22/1375 train_time:1607ms step_avg:133.91ms
step:23/1375 train_time:1740ms step_avg:133.81ms
step:24/1375 train_time:1874ms step_avg:133.84ms
step:25/1375 train_time:2007ms step_avg:133.78ms
step:26/1375 train_time:2142ms step_avg:133.87ms
step:27/1375 train_time:2276ms step_avg:133.91ms
step:28/1375 train_time:2410ms step_avg:133.89ms
step:29/1375 train_time:2543ms step_avg:133.82ms
step:30/1375 train_time:2677ms step_avg:133.84ms
step:31/1375 train_time:2810ms step_avg:133.82ms
step:32/1375 train_time:2944ms step_avg:133.84ms
step:33/1375 train_time:3079ms step_avg:133.87ms
step:34/1375 train_time:3215ms step_avg:133.97ms
step:35/1375 train_time:3348ms step_avg:133.92ms
step:36/1375 train_time:3481ms step_avg:133.90ms
step:37/1375 train_time:3615ms step_avg:133.89ms
step:38/1375 train_time:3747ms step_avg:133.83ms
step:39/1375 train_time:3882ms step_avg:133.85ms
step:40/1375 train_time:4017ms step_avg:133.89ms
step:41/1375 train_time:4151ms step_avg:133.90ms
step:42/1375 train_time:4285ms step_avg:133.91ms
step:43/1375 train_time:4419ms step_avg:133.90ms
step:44/1375 train_time:4552ms step_avg:133.88ms
step:45/1375 train_time:4685ms step_avg:133.86ms
step:46/1375 train_time:4820ms step_avg:133.88ms
step:47/1375 train_time:4953ms step_avg:133.87ms
step:48/1375 train_time:5087ms step_avg:133.87ms
step:49/1375 train_time:5221ms step_avg:133.87ms
step:50/1375 train_time:5355ms step_avg:133.87ms
step:51/1375 train_time:5487ms step_avg:133.84ms
step:52/1375 train_time:5621ms step_avg:133.84ms
step:53/1375 train_time:5755ms step_avg:133.84ms
step:54/1375 train_time:5888ms step_avg:133.83ms
step:55/1375 train_time:6023ms step_avg:133.84ms
step:56/1375 train_time:6156ms step_avg:133.82ms
step:57/1375 train_time:6289ms step_avg:133.82ms
step:58/1375 train_time:6422ms step_avg:133.80ms
step:59/1375 train_time:6555ms step_avg:133.78ms
step:60/1375 train_time:6688ms step_avg:133.76ms
step:61/1375 train_time:6822ms step_avg:133.77ms
step:62/1375 train_time:6957ms step_avg:133.79ms
step:63/1375 train_time:7092ms step_avg:133.81ms
step:64/1375 train_time:7226ms step_avg:133.81ms
step:65/1375 train_time:7360ms step_avg:133.82ms
step:66/1375 train_time:7494ms step_avg:133.81ms
step:67/1375 train_time:7627ms step_avg:133.81ms
step:68/1375 train_time:7760ms step_avg:133.80ms
step:69/1375 train_time:7895ms step_avg:133.82ms
step:70/1375 train_time:8029ms step_avg:133.81ms
step:71/1375 train_time:8162ms step_avg:133.81ms
step:72/1375 train_time:8297ms step_avg:133.82ms
step:73/1375 train_time:8430ms step_avg:133.81ms
step:74/1375 train_time:8563ms step_avg:133.80ms
step:75/1375 train_time:8696ms step_avg:133.79ms
step:76/1375 train_time:8831ms step_avg:133.80ms
step:77/1375 train_time:8964ms step_avg:133.79ms
step:78/1375 train_time:9097ms step_avg:133.79ms
step:79/1375 train_time:9233ms step_avg:133.82ms
step:80/1375 train_time:9368ms step_avg:133.82ms
step:81/1375 train_time:9501ms step_avg:133.82ms
step:82/1375 train_time:9635ms step_avg:133.82ms
step:83/1375 train_time:9769ms step_avg:133.82ms
step:84/1375 train_time:9903ms step_avg:133.83ms
step:85/1375 train_time:10038ms step_avg:133.85ms
step:86/1375 train_time:10173ms step_avg:133.86ms
step:87/1375 train_time:10307ms step_avg:133.85ms
step:88/1375 train_time:10442ms step_avg:133.87ms
step:89/1375 train_time:10578ms step_avg:133.89ms
step:90/1375 train_time:10711ms step_avg:133.89ms
step:91/1375 train_time:10845ms step_avg:133.89ms
step:92/1375 train_time:10980ms step_avg:133.90ms
step:93/1375 train_time:11113ms step_avg:133.89ms
step:94/1375 train_time:11246ms step_avg:133.88ms
step:95/1375 train_time:11382ms step_avg:133.90ms
step:96/1375 train_time:11516ms step_avg:133.91ms
step:97/1375 train_time:11650ms step_avg:133.91ms
step:98/1375 train_time:11784ms step_avg:133.91ms
step:99/1375 train_time:11919ms step_avg:133.93ms
step:100/1375 train_time:12055ms step_avg:133.94ms
step:101/1375 train_time:12189ms step_avg:133.95ms
step:102/1375 train_time:12323ms step_avg:133.95ms
step:103/1375 train_time:12461ms step_avg:133.98ms
step:104/1375 train_time:12598ms step_avg:134.02ms
step:105/1375 train_time:12735ms step_avg:134.05ms
step:106/1375 train_time:12873ms step_avg:134.10ms
step:107/1375 train_time:13010ms step_avg:134.13ms
step:108/1375 train_time:13146ms step_avg:134.15ms
step:109/1375 train_time:13284ms step_avg:134.18ms
step:110/1375 train_time:13421ms step_avg:134.21ms
step:111/1375 train_time:13558ms step_avg:134.24ms
step:112/1375 train_time:13695ms step_avg:134.27ms
step:113/1375 train_time:13832ms step_avg:134.30ms
step:114/1375 train_time:13970ms step_avg:134.32ms
step:115/1375 train_time:14107ms step_avg:134.35ms
step:116/1375 train_time:14244ms step_avg:134.38ms
step:117/1375 train_time:14383ms step_avg:134.42ms
step:118/1375 train_time:14520ms step_avg:134.44ms
step:119/1375 train_time:14657ms step_avg:134.47ms
step:120/1375 train_time:14793ms step_avg:134.48ms
step:121/1375 train_time:14930ms step_avg:134.51ms
step:122/1375 train_time:15068ms step_avg:134.54ms
step:123/1375 train_time:15206ms step_avg:134.57ms
step:124/1375 train_time:15345ms step_avg:134.60ms
step:125/1375 train_time:15483ms step_avg:134.63ms
step:125/1375 val_loss:4.3698 train_time:15549ms step_avg:135.21ms
step:126/1375 train_time:15625ms step_avg:134.70ms
step:127/1375 train_time:15765ms step_avg:134.74ms
step:128/1375 train_time:15902ms step_avg:134.76ms
step:129/1375 train_time:16038ms step_avg:134.77ms
step:130/1375 train_time:16174ms step_avg:134.78ms
step:131/1375 train_time:16310ms step_avg:134.79ms
step:132/1375 train_time:16446ms step_avg:134.80ms
step:133/1375 train_time:16585ms step_avg:134.83ms
step:134/1375 train_time:16724ms step_avg:134.87ms
step:135/1375 train_time:16863ms step_avg:134.90ms
step:136/1375 train_time:17000ms step_avg:134.92ms
step:137/1375 train_time:17136ms step_avg:134.93ms
step:138/1375 train_time:17273ms step_avg:134.95ms
step:139/1375 train_time:17408ms step_avg:134.95ms
step:140/1375 train_time:17546ms step_avg:134.97ms
step:141/1375 train_time:17684ms step_avg:134.99ms
step:142/1375 train_time:17824ms step_avg:135.03ms
step:143/1375 train_time:17962ms step_avg:135.05ms
step:144/1375 train_time:18099ms step_avg:135.07ms
step:145/1375 train_time:18236ms step_avg:135.08ms
step:146/1375 train_time:18373ms step_avg:135.10ms
step:147/1375 train_time:18511ms step_avg:135.11ms
step:148/1375 train_time:18649ms step_avg:135.13ms
step:149/1375 train_time:18785ms step_avg:135.15ms
step:150/1375 train_time:18924ms step_avg:135.17ms
step:151/1375 train_time:19062ms step_avg:135.19ms
step:152/1375 train_time:19198ms step_avg:135.20ms
step:153/1375 train_time:19335ms step_avg:135.21ms
step:154/1375 train_time:19472ms step_avg:135.22ms
step:155/1375 train_time:19609ms step_avg:135.24ms
step:156/1375 train_time:19749ms step_avg:135.27ms
step:157/1375 train_time:19887ms step_avg:135.29ms
step:158/1375 train_time:20025ms step_avg:135.30ms
step:159/1375 train_time:20163ms step_avg:135.32ms
step:160/1375 train_time:20299ms step_avg:135.33ms
step:161/1375 train_time:20436ms step_avg:135.34ms
step:162/1375 train_time:20573ms step_avg:135.35ms
step:163/1375 train_time:20712ms step_avg:135.37ms
step:164/1375 train_time:20851ms step_avg:135.40ms
step:165/1375 train_time:20989ms step_avg:135.41ms
step:166/1375 train_time:21127ms step_avg:135.43ms
step:167/1375 train_time:21265ms step_avg:135.44ms
step:168/1375 train_time:21401ms step_avg:135.45ms
step:169/1375 train_time:21539ms step_avg:135.46ms
step:170/1375 train_time:21675ms step_avg:135.47ms
step:171/1375 train_time:21813ms step_avg:135.49ms
step:172/1375 train_time:21952ms step_avg:135.50ms
step:173/1375 train_time:22089ms step_avg:135.52ms
step:174/1375 train_time:22227ms step_avg:135.53ms
step:175/1375 train_time:22367ms step_avg:135.56ms
step:176/1375 train_time:22503ms step_avg:135.56ms
step:177/1375 train_time:22641ms step_avg:135.57ms
step:178/1375 train_time:22778ms step_avg:135.58ms
step:179/1375 train_time:22915ms step_avg:135.59ms
step:180/1375 train_time:23054ms step_avg:135.61ms
step:181/1375 train_time:23192ms step_avg:135.63ms
step:182/1375 train_time:23329ms step_avg:135.63ms
step:183/1375 train_time:23467ms step_avg:135.65ms
step:184/1375 train_time:23606ms step_avg:135.66ms
step:185/1375 train_time:23743ms step_avg:135.67ms
step:186/1375 train_time:23882ms step_avg:135.69ms
step:187/1375 train_time:24019ms step_avg:135.70ms
step:188/1375 train_time:24157ms step_avg:135.71ms
step:189/1375 train_time:24294ms step_avg:135.72ms
step:190/1375 train_time:24432ms step_avg:135.73ms
step:191/1375 train_time:24611ms step_avg:135.97ms
step:192/1375 train_time:24747ms step_avg:135.97ms
step:193/1375 train_time:24884ms step_avg:135.98ms
step:194/1375 train_time:25020ms step_avg:135.98ms
step:195/1375 train_time:25156ms step_avg:135.98ms
step:196/1375 train_time:25293ms step_avg:135.99ms
step:197/1375 train_time:25430ms step_avg:135.99ms
step:198/1375 train_time:25574ms step_avg:136.03ms
step:199/1375 train_time:25713ms step_avg:136.05ms
step:200/1375 train_time:25850ms step_avg:136.05ms
step:201/1375 train_time:25987ms step_avg:136.06ms
step:202/1375 train_time:26124ms step_avg:136.06ms
step:203/1375 train_time:26261ms step_avg:136.07ms
step:204/1375 train_time:26399ms step_avg:136.08ms
step:205/1375 train_time:26540ms step_avg:136.10ms
step:206/1375 train_time:26681ms step_avg:136.13ms
step:207/1375 train_time:26822ms step_avg:136.15ms
step:208/1375 train_time:26963ms step_avg:136.18ms
step:209/1375 train_time:27103ms step_avg:136.19ms
step:210/1375 train_time:27243ms step_avg:136.22ms
step:211/1375 train_time:27383ms step_avg:136.23ms
step:212/1375 train_time:27524ms step_avg:136.26ms
step:213/1375 train_time:27664ms step_avg:136.28ms
step:214/1375 train_time:27806ms step_avg:136.30ms
step:215/1375 train_time:27946ms step_avg:136.32ms
step:216/1375 train_time:28086ms step_avg:136.34ms
step:217/1375 train_time:28228ms step_avg:136.37ms
step:218/1375 train_time:28367ms step_avg:136.38ms
step:219/1375 train_time:28508ms step_avg:136.40ms
step:220/1375 train_time:28648ms step_avg:136.42ms
step:221/1375 train_time:28789ms step_avg:136.44ms
step:222/1375 train_time:28930ms step_avg:136.46ms
step:223/1375 train_time:29071ms step_avg:136.48ms
step:224/1375 train_time:29211ms step_avg:136.50ms
step:225/1375 train_time:29351ms step_avg:136.52ms
step:226/1375 train_time:29493ms step_avg:136.54ms
step:227/1375 train_time:29633ms step_avg:136.56ms
step:228/1375 train_time:29775ms step_avg:136.58ms
step:229/1375 train_time:29915ms step_avg:136.60ms
step:230/1375 train_time:30055ms step_avg:136.61ms
step:231/1375 train_time:30195ms step_avg:136.63ms
step:232/1375 train_time:30336ms step_avg:136.65ms
step:233/1375 train_time:30476ms step_avg:136.66ms
step:234/1375 train_time:30616ms step_avg:136.68ms
step:235/1375 train_time:30756ms step_avg:136.69ms
step:236/1375 train_time:30896ms step_avg:136.71ms
step:237/1375 train_time:31036ms step_avg:136.72ms
step:238/1375 train_time:31177ms step_avg:136.74ms
step:239/1375 train_time:31316ms step_avg:136.75ms
step:240/1375 train_time:31458ms step_avg:136.77ms
step:241/1375 train_time:31597ms step_avg:136.78ms
step:242/1375 train_time:31738ms step_avg:136.80ms
step:243/1375 train_time:31879ms step_avg:136.82ms
step:244/1375 train_time:32019ms step_avg:136.83ms
step:245/1375 train_time:32160ms step_avg:136.85ms
step:246/1375 train_time:32300ms step_avg:136.87ms
step:247/1375 train_time:32440ms step_avg:136.88ms
step:248/1375 train_time:32581ms step_avg:136.90ms
step:249/1375 train_time:32721ms step_avg:136.91ms
step:250/1375 train_time:32862ms step_avg:136.93ms
step:250/1375 val_loss:3.9533 train_time:32930ms step_avg:137.21ms
step:251/1375 train_time:33006ms step_avg:136.95ms
step:252/1375 train_time:33147ms step_avg:136.97ms
step:253/1375 train_time:33287ms step_avg:136.98ms
step:254/1375 train_time:33426ms step_avg:136.99ms
step:255/1375 train_time:33565ms step_avg:137.00ms
step:256/1375 train_time:33704ms step_avg:137.01ms
step:257/1375 train_time:33844ms step_avg:137.02ms
step:258/1375 train_time:33986ms step_avg:137.04ms
step:259/1375 train_time:34129ms step_avg:137.06ms
step:260/1375 train_time:34271ms step_avg:137.08ms
step:261/1375 train_time:34412ms step_avg:137.10ms
step:262/1375 train_time:34552ms step_avg:137.11ms
step:263/1375 train_time:34691ms step_avg:137.12ms
step:264/1375 train_time:34831ms step_avg:137.13ms
step:265/1375 train_time:34971ms step_avg:137.14ms
step:266/1375 train_time:35114ms step_avg:137.16ms
step:267/1375 train_time:35255ms step_avg:137.18ms
step:268/1375 train_time:35397ms step_avg:137.20ms
step:269/1375 train_time:35537ms step_avg:137.21ms
step:270/1375 train_time:35677ms step_avg:137.22ms
step:271/1375 train_time:35816ms step_avg:137.23ms
step:272/1375 train_time:35957ms step_avg:137.24ms
step:273/1375 train_time:36098ms step_avg:137.26ms
step:274/1375 train_time:36240ms step_avg:137.27ms
step:275/1375 train_time:36381ms step_avg:137.29ms
step:276/1375 train_time:36522ms step_avg:137.30ms
step:277/1375 train_time:36664ms step_avg:137.32ms
step:278/1375 train_time:36805ms step_avg:137.33ms
step:279/1375 train_time:36945ms step_avg:137.34ms
step:280/1375 train_time:37086ms step_avg:137.36ms
step:281/1375 train_time:37226ms step_avg:137.37ms
step:282/1375 train_time:37368ms step_avg:137.38ms
step:283/1375 train_time:37507ms step_avg:137.39ms
step:284/1375 train_time:37649ms step_avg:137.40ms
step:285/1375 train_time:37788ms step_avg:137.41ms
step:286/1375 train_time:37928ms step_avg:137.42ms
step:287/1375 train_time:38069ms step_avg:137.43ms
step:288/1375 train_time:38210ms step_avg:137.44ms
step:289/1375 train_time:38350ms step_avg:137.46ms
step:290/1375 train_time:38492ms step_avg:137.47ms
step:291/1375 train_time:38632ms step_avg:137.48ms
step:292/1375 train_time:38773ms step_avg:137.49ms
step:293/1375 train_time:38914ms step_avg:137.51ms
step:294/1375 train_time:39055ms step_avg:137.52ms
step:295/1375 train_time:39196ms step_avg:137.53ms
step:296/1375 train_time:39337ms step_avg:137.54ms
step:297/1375 train_time:39477ms step_avg:137.55ms
step:298/1375 train_time:39617ms step_avg:137.56ms
step:299/1375 train_time:39758ms step_avg:137.57ms
step:300/1375 train_time:39899ms step_avg:137.58ms
step:301/1375 train_time:40040ms step_avg:137.59ms
step:302/1375 train_time:40181ms step_avg:137.61ms
step:303/1375 train_time:40323ms step_avg:137.62ms
step:304/1375 train_time:40464ms step_avg:137.63ms
step:305/1375 train_time:40603ms step_avg:137.64ms
step:306/1375 train_time:40743ms step_avg:137.65ms
step:307/1375 train_time:40886ms step_avg:137.66ms
step:308/1375 train_time:41027ms step_avg:137.68ms
step:309/1375 train_time:41171ms step_avg:137.70ms
step:310/1375 train_time:41313ms step_avg:137.71ms
step:311/1375 train_time:41456ms step_avg:137.73ms
step:312/1375 train_time:41598ms step_avg:137.74ms
step:313/1375 train_time:41740ms step_avg:137.76ms
step:314/1375 train_time:41883ms step_avg:137.77ms
step:315/1375 train_time:42026ms step_avg:137.79ms
step:316/1375 train_time:42167ms step_avg:137.80ms
step:317/1375 train_time:42310ms step_avg:137.82ms
step:318/1375 train_time:42452ms step_avg:137.83ms
step:319/1375 train_time:42595ms step_avg:137.85ms
step:320/1375 train_time:42737ms step_avg:137.86ms
step:321/1375 train_time:42881ms step_avg:137.88ms
step:322/1375 train_time:43023ms step_avg:137.89ms
step:323/1375 train_time:43165ms step_avg:137.91ms
step:324/1375 train_time:43308ms step_avg:137.92ms
step:325/1375 train_time:43452ms step_avg:137.94ms
step:326/1375 train_time:43593ms step_avg:137.95ms
step:327/1375 train_time:43736ms step_avg:137.97ms
step:328/1375 train_time:43879ms step_avg:137.98ms
step:329/1375 train_time:44022ms step_avg:138.00ms
step:330/1375 train_time:44165ms step_avg:138.01ms
step:331/1375 train_time:44307ms step_avg:138.03ms
step:332/1375 train_time:44450ms step_avg:138.04ms
step:333/1375 train_time:44594ms step_avg:138.06ms
step:334/1375 train_time:44736ms step_avg:138.07ms
step:335/1375 train_time:44879ms step_avg:138.09ms
step:336/1375 train_time:45021ms step_avg:138.10ms
step:337/1375 train_time:45163ms step_avg:138.11ms
step:338/1375 train_time:45305ms step_avg:138.13ms
step:339/1375 train_time:45447ms step_avg:138.14ms
step:340/1375 train_time:45589ms step_avg:138.15ms
step:341/1375 train_time:45732ms step_avg:138.16ms
step:342/1375 train_time:45875ms step_avg:138.18ms
step:343/1375 train_time:46018ms step_avg:138.19ms
step:344/1375 train_time:46160ms step_avg:138.20ms
step:345/1375 train_time:46303ms step_avg:138.22ms
step:346/1375 train_time:46445ms step_avg:138.23ms
step:347/1375 train_time:46587ms step_avg:138.24ms
step:348/1375 train_time:46729ms step_avg:138.25ms
step:349/1375 train_time:46873ms step_avg:138.27ms
step:350/1375 train_time:47017ms step_avg:138.28ms
step:351/1375 train_time:47159ms step_avg:138.30ms
step:352/1375 train_time:47301ms step_avg:138.31ms
step:353/1375 train_time:47444ms step_avg:138.32ms
step:354/1375 train_time:47587ms step_avg:138.33ms
step:355/1375 train_time:47730ms step_avg:138.35ms
step:356/1375 train_time:47872ms step_avg:138.36ms
step:357/1375 train_time:48015ms step_avg:138.37ms
step:358/1375 train_time:48157ms step_avg:138.38ms
step:359/1375 train_time:48299ms step_avg:138.39ms
step:360/1375 train_time:48443ms step_avg:138.41ms
step:361/1375 train_time:48586ms step_avg:138.42ms
step:362/1375 train_time:48728ms step_avg:138.43ms
step:363/1375 train_time:48870ms step_avg:138.44ms
step:364/1375 train_time:49012ms step_avg:138.45ms
step:365/1375 train_time:49154ms step_avg:138.46ms
step:366/1375 train_time:49297ms step_avg:138.47ms
step:367/1375 train_time:49439ms step_avg:138.48ms
step:368/1375 train_time:49582ms step_avg:138.50ms
step:369/1375 train_time:49725ms step_avg:138.51ms
step:370/1375 train_time:49868ms step_avg:138.52ms
step:371/1375 train_time:50010ms step_avg:138.53ms
step:372/1375 train_time:50152ms step_avg:138.54ms
step:373/1375 train_time:50294ms step_avg:138.55ms
step:374/1375 train_time:50437ms step_avg:138.56ms
step:375/1375 train_time:50580ms step_avg:138.57ms
step:375/1375 val_loss:3.7726 train_time:50648ms step_avg:138.76ms
step:376/1375 train_time:50726ms step_avg:138.60ms
step:377/1375 train_time:50871ms step_avg:138.61ms
step:378/1375 train_time:51013ms step_avg:138.62ms
step:379/1375 train_time:51155ms step_avg:138.63ms
step:380/1375 train_time:51296ms step_avg:138.64ms
step:381/1375 train_time:51475ms step_avg:138.75ms
step:382/1375 train_time:51616ms step_avg:138.75ms
step:383/1375 train_time:51756ms step_avg:138.76ms
step:384/1375 train_time:51898ms step_avg:138.77ms
step:385/1375 train_time:52040ms step_avg:138.77ms
step:386/1375 train_time:52182ms step_avg:138.78ms
step:387/1375 train_time:52325ms step_avg:138.79ms
step:388/1375 train_time:52471ms step_avg:138.81ms
step:389/1375 train_time:52614ms step_avg:138.82ms
step:390/1375 train_time:52756ms step_avg:138.83ms
step:391/1375 train_time:52898ms step_avg:138.84ms
step:392/1375 train_time:53039ms step_avg:138.85ms
step:393/1375 train_time:53181ms step_avg:138.85ms
step:394/1375 train_time:53325ms step_avg:138.87ms
step:395/1375 train_time:53468ms step_avg:138.88ms
step:396/1375 train_time:53612ms step_avg:138.89ms
step:397/1375 train_time:53755ms step_avg:138.90ms
step:398/1375 train_time:53896ms step_avg:138.91ms
step:399/1375 train_time:54040ms step_avg:138.92ms
step:400/1375 train_time:54181ms step_avg:138.93ms
step:401/1375 train_time:54325ms step_avg:138.94ms
step:402/1375 train_time:54469ms step_avg:138.95ms
step:403/1375 train_time:54612ms step_avg:138.96ms
step:404/1375 train_time:54754ms step_avg:138.97ms
step:405/1375 train_time:54897ms step_avg:138.98ms
step:406/1375 train_time:55038ms step_avg:138.99ms
step:407/1375 train_time:55181ms step_avg:138.99ms
step:408/1375 train_time:55324ms step_avg:139.00ms
step:409/1375 train_time:55468ms step_avg:139.02ms
step:410/1375 train_time:55613ms step_avg:139.03ms
step:411/1375 train_time:55756ms step_avg:139.04ms
step:412/1375 train_time:55901ms step_avg:139.06ms
step:413/1375 train_time:56044ms step_avg:139.07ms
step:414/1375 train_time:56189ms step_avg:139.08ms
step:415/1375 train_time:56333ms step_avg:139.09ms
step:416/1375 train_time:56476ms step_avg:139.10ms
step:417/1375 train_time:56621ms step_avg:139.12ms
step:418/1375 train_time:56766ms step_avg:139.13ms
step:419/1375 train_time:56912ms step_avg:139.15ms
step:420/1375 train_time:57056ms step_avg:139.16ms
step:421/1375 train_time:57200ms step_avg:139.17ms
step:422/1375 train_time:57345ms step_avg:139.19ms
step:423/1375 train_time:57489ms step_avg:139.20ms
step:424/1375 train_time:57634ms step_avg:139.21ms
step:425/1375 train_time:57778ms step_avg:139.22ms
step:426/1375 train_time:57923ms step_avg:139.24ms
step:427/1375 train_time:58066ms step_avg:139.25ms
step:428/1375 train_time:58212ms step_avg:139.26ms
step:429/1375 train_time:58355ms step_avg:139.27ms
step:430/1375 train_time:58500ms step_avg:139.29ms
step:431/1375 train_time:58645ms step_avg:139.30ms
step:432/1375 train_time:58789ms step_avg:139.31ms
step:433/1375 train_time:58934ms step_avg:139.32ms
step:434/1375 train_time:59078ms step_avg:139.33ms
step:435/1375 train_time:59221ms step_avg:139.34ms
step:436/1375 train_time:59366ms step_avg:139.36ms
step:437/1375 train_time:59510ms step_avg:139.37ms
step:438/1375 train_time:59654ms step_avg:139.38ms
step:439/1375 train_time:59797ms step_avg:139.39ms
step:440/1375 train_time:59941ms step_avg:139.40ms
step:441/1375 train_time:60085ms step_avg:139.41ms
step:442/1375 train_time:60231ms step_avg:139.42ms
step:443/1375 train_time:60375ms step_avg:139.43ms
step:444/1375 train_time:60518ms step_avg:139.44ms
step:445/1375 train_time:60662ms step_avg:139.45ms
step:446/1375 train_time:60806ms step_avg:139.46ms
step:447/1375 train_time:60950ms step_avg:139.47ms
step:448/1375 train_time:61095ms step_avg:139.49ms
step:449/1375 train_time:61239ms step_avg:139.50ms
step:450/1375 train_time:61383ms step_avg:139.51ms
step:451/1375 train_time:61527ms step_avg:139.52ms
step:452/1375 train_time:61671ms step_avg:139.53ms
step:453/1375 train_time:61816ms step_avg:139.54ms
step:454/1375 train_time:61959ms step_avg:139.55ms
step:455/1375 train_time:62103ms step_avg:139.56ms
step:456/1375 train_time:62248ms step_avg:139.57ms
step:457/1375 train_time:62394ms step_avg:139.58ms
step:458/1375 train_time:62537ms step_avg:139.59ms
step:459/1375 train_time:62681ms step_avg:139.60ms
step:460/1375 train_time:62825ms step_avg:139.61ms
step:461/1375 train_time:62970ms step_avg:139.62ms
step:462/1375 train_time:63115ms step_avg:139.63ms
step:463/1375 train_time:63259ms step_avg:139.64ms
step:464/1375 train_time:63404ms step_avg:139.66ms
step:465/1375 train_time:63548ms step_avg:139.67ms
step:466/1375 train_time:63693ms step_avg:139.68ms
step:467/1375 train_time:63837ms step_avg:139.69ms
step:468/1375 train_time:63981ms step_avg:139.70ms
step:469/1375 train_time:64124ms step_avg:139.70ms
step:470/1375 train_time:64269ms step_avg:139.71ms
step:471/1375 train_time:64414ms step_avg:139.73ms
step:472/1375 train_time:64558ms step_avg:139.74ms
step:473/1375 train_time:64702ms step_avg:139.75ms
step:474/1375 train_time:64846ms step_avg:139.76ms
step:475/1375 train_time:64991ms step_avg:139.77ms
step:476/1375 train_time:65135ms step_avg:139.78ms
step:477/1375 train_time:65280ms step_avg:139.79ms
step:478/1375 train_time:65424ms step_avg:139.79ms
step:479/1375 train_time:65569ms step_avg:139.81ms
step:480/1375 train_time:65714ms step_avg:139.82ms
step:481/1375 train_time:65858ms step_avg:139.83ms
step:482/1375 train_time:66002ms step_avg:139.83ms
step:483/1375 train_time:66147ms step_avg:139.85ms
step:484/1375 train_time:66293ms step_avg:139.86ms
step:485/1375 train_time:66437ms step_avg:139.87ms
step:486/1375 train_time:66581ms step_avg:139.88ms
step:487/1375 train_time:66725ms step_avg:139.88ms
step:488/1375 train_time:66870ms step_avg:139.89ms
step:489/1375 train_time:67014ms step_avg:139.90ms
step:490/1375 train_time:67159ms step_avg:139.91ms
step:491/1375 train_time:67303ms step_avg:139.92ms
step:492/1375 train_time:67447ms step_avg:139.93ms
step:493/1375 train_time:67592ms step_avg:139.94ms
step:494/1375 train_time:67736ms step_avg:139.95ms
step:495/1375 train_time:67880ms step_avg:139.96ms
step:496/1375 train_time:68025ms step_avg:139.97ms
step:497/1375 train_time:68169ms step_avg:139.98ms
step:498/1375 train_time:68314ms step_avg:139.99ms
step:499/1375 train_time:68459ms step_avg:140.00ms
step:500/1375 train_time:68603ms step_avg:140.01ms
step:500/1375 val_loss:3.6558 train_time:68673ms step_avg:140.15ms
step:501/1375 train_time:68749ms step_avg:140.02ms
step:502/1375 train_time:68894ms step_avg:140.03ms
step:503/1375 train_time:69038ms step_avg:140.04ms
step:504/1375 train_time:69181ms step_avg:140.04ms
step:505/1375 train_time:69324ms step_avg:140.05ms
step:506/1375 train_time:69468ms step_avg:140.06ms
step:507/1375 train_time:69612ms step_avg:140.07ms
step:508/1375 train_time:69758ms step_avg:140.08ms
step:509/1375 train_time:69903ms step_avg:140.09ms
step:510/1375 train_time:70048ms step_avg:140.10ms
step:511/1375 train_time:70194ms step_avg:140.11ms
step:512/1375 train_time:70339ms step_avg:140.12ms
step:513/1375 train_time:70483ms step_avg:140.13ms
step:514/1375 train_time:70632ms step_avg:140.14ms
step:515/1375 train_time:70777ms step_avg:140.15ms
step:516/1375 train_time:70922ms step_avg:140.16ms
step:517/1375 train_time:71070ms step_avg:140.18ms
step:518/1375 train_time:71216ms step_avg:140.19ms
step:519/1375 train_time:71362ms step_avg:140.20ms
step:520/1375 train_time:71508ms step_avg:140.21ms
step:521/1375 train_time:71653ms step_avg:140.22ms
step:522/1375 train_time:71798ms step_avg:140.23ms
step:523/1375 train_time:71943ms step_avg:140.24ms
step:524/1375 train_time:72091ms step_avg:140.25ms
step:525/1375 train_time:72236ms step_avg:140.26ms
step:526/1375 train_time:72381ms step_avg:140.27ms
step:527/1375 train_time:72528ms step_avg:140.29ms
step:528/1375 train_time:72673ms step_avg:140.30ms
step:529/1375 train_time:72817ms step_avg:140.30ms
step:530/1375 train_time:72962ms step_avg:140.31ms
step:531/1375 train_time:73109ms step_avg:140.33ms
step:532/1375 train_time:73256ms step_avg:140.34ms
step:533/1375 train_time:73401ms step_avg:140.35ms
step:534/1375 train_time:73546ms step_avg:140.36ms
step:535/1375 train_time:73693ms step_avg:140.37ms
step:536/1375 train_time:73837ms step_avg:140.38ms
step:537/1375 train_time:73984ms step_avg:140.39ms
step:538/1375 train_time:74131ms step_avg:140.40ms
step:539/1375 train_time:74277ms step_avg:140.41ms
step:540/1375 train_time:74424ms step_avg:140.42ms
step:541/1375 train_time:74571ms step_avg:140.43ms
step:542/1375 train_time:74716ms step_avg:140.44ms
step:543/1375 train_time:74861ms step_avg:140.45ms
step:544/1375 train_time:75007ms step_avg:140.46ms
step:545/1375 train_time:75154ms step_avg:140.47ms
step:546/1375 train_time:75298ms step_avg:140.48ms
step:547/1375 train_time:75444ms step_avg:140.49ms
step:548/1375 train_time:75592ms step_avg:140.51ms
step:549/1375 train_time:75737ms step_avg:140.51ms
step:550/1375 train_time:75882ms step_avg:140.52ms
step:551/1375 train_time:76030ms step_avg:140.54ms
step:552/1375 train_time:76175ms step_avg:140.54ms
step:553/1375 train_time:76321ms step_avg:140.55ms
step:554/1375 train_time:76466ms step_avg:140.56ms
step:555/1375 train_time:76613ms step_avg:140.57ms
step:556/1375 train_time:76757ms step_avg:140.58ms
step:557/1375 train_time:76903ms step_avg:140.59ms
step:558/1375 train_time:77051ms step_avg:140.60ms
step:559/1375 train_time:77195ms step_avg:140.61ms
step:560/1375 train_time:77340ms step_avg:140.62ms
step:561/1375 train_time:77485ms step_avg:140.63ms
step:562/1375 train_time:77632ms step_avg:140.64ms
step:563/1375 train_time:77777ms step_avg:140.65ms
step:564/1375 train_time:77922ms step_avg:140.65ms
step:565/1375 train_time:78069ms step_avg:140.67ms
step:566/1375 train_time:78216ms step_avg:140.68ms
step:567/1375 train_time:78362ms step_avg:140.69ms
step:568/1375 train_time:78507ms step_avg:140.69ms
step:569/1375 train_time:78654ms step_avg:140.70ms
step:570/1375 train_time:78800ms step_avg:140.71ms
step:571/1375 train_time:78982ms step_avg:140.79ms
step:572/1375 train_time:79129ms step_avg:140.80ms
step:573/1375 train_time:79275ms step_avg:140.81ms
step:574/1375 train_time:79420ms step_avg:140.82ms
step:575/1375 train_time:79565ms step_avg:140.82ms
step:576/1375 train_time:79711ms step_avg:140.83ms
step:577/1375 train_time:79857ms step_avg:140.84ms
step:578/1375 train_time:80005ms step_avg:140.85ms
step:579/1375 train_time:80151ms step_avg:140.86ms
step:580/1375 train_time:80296ms step_avg:140.87ms
step:581/1375 train_time:80441ms step_avg:140.88ms
step:582/1375 train_time:80586ms step_avg:140.89ms
step:583/1375 train_time:80732ms step_avg:140.89ms
step:584/1375 train_time:80878ms step_avg:140.90ms
step:585/1375 train_time:81024ms step_avg:140.91ms
step:586/1375 train_time:81171ms step_avg:140.92ms
step:587/1375 train_time:81317ms step_avg:140.93ms
step:588/1375 train_time:81461ms step_avg:140.94ms
step:589/1375 train_time:81607ms step_avg:140.95ms
step:590/1375 train_time:81753ms step_avg:140.95ms
step:591/1375 train_time:81897ms step_avg:140.96ms
step:592/1375 train_time:82043ms step_avg:140.97ms
step:593/1375 train_time:82191ms step_avg:140.98ms
step:594/1375 train_time:82337ms step_avg:140.99ms
step:595/1375 train_time:82484ms step_avg:141.00ms
step:596/1375 train_time:82633ms step_avg:141.01ms
step:597/1375 train_time:82778ms step_avg:141.02ms
step:598/1375 train_time:82924ms step_avg:141.03ms
step:599/1375 train_time:83070ms step_avg:141.04ms
step:600/1375 train_time:83216ms step_avg:141.04ms
step:601/1375 train_time:83361ms step_avg:141.05ms
step:602/1375 train_time:83506ms step_avg:141.06ms
step:603/1375 train_time:83653ms step_avg:141.07ms
step:604/1375 train_time:83799ms step_avg:141.08ms
step:605/1375 train_time:83945ms step_avg:141.08ms
step:606/1375 train_time:84092ms step_avg:141.09ms
step:607/1375 train_time:84238ms step_avg:141.10ms
step:608/1375 train_time:84383ms step_avg:141.11ms
step:609/1375 train_time:84530ms step_avg:141.12ms
step:610/1375 train_time:84675ms step_avg:141.13ms
step:611/1375 train_time:84821ms step_avg:141.13ms
step:612/1375 train_time:84967ms step_avg:141.14ms
step:613/1375 train_time:85114ms step_avg:141.15ms
step:614/1375 train_time:85262ms step_avg:141.16ms
step:615/1375 train_time:85409ms step_avg:141.17ms
step:616/1375 train_time:85555ms step_avg:141.18ms
step:617/1375 train_time:85701ms step_avg:141.19ms
step:618/1375 train_time:85849ms step_avg:141.20ms
step:619/1375 train_time:85997ms step_avg:141.21ms
step:620/1375 train_time:86146ms step_avg:141.22ms
step:621/1375 train_time:86294ms step_avg:141.23ms
step:622/1375 train_time:86440ms step_avg:141.24ms
step:623/1375 train_time:86588ms step_avg:141.25ms
step:624/1375 train_time:86735ms step_avg:141.26ms
step:625/1375 train_time:86881ms step_avg:141.27ms
step:625/1375 val_loss:3.5743 train_time:86954ms step_avg:141.39ms
step:626/1375 train_time:87032ms step_avg:141.29ms
step:627/1375 train_time:87179ms step_avg:141.30ms
step:628/1375 train_time:87327ms step_avg:141.31ms
step:629/1375 train_time:87474ms step_avg:141.31ms
step:630/1375 train_time:87619ms step_avg:141.32ms
step:631/1375 train_time:87766ms step_avg:141.33ms
step:632/1375 train_time:87913ms step_avg:141.34ms
step:633/1375 train_time:88060ms step_avg:141.35ms
step:634/1375 train_time:88208ms step_avg:141.36ms
step:635/1375 train_time:88355ms step_avg:141.37ms
step:636/1375 train_time:88502ms step_avg:141.38ms
step:637/1375 train_time:88650ms step_avg:141.39ms
step:638/1375 train_time:88796ms step_avg:141.40ms
step:639/1375 train_time:88943ms step_avg:141.40ms
step:640/1375 train_time:89091ms step_avg:141.41ms
step:641/1375 train_time:89238ms step_avg:141.42ms
step:642/1375 train_time:89385ms step_avg:141.43ms
step:643/1375 train_time:89532ms step_avg:141.44ms
step:644/1375 train_time:89678ms step_avg:141.45ms
step:645/1375 train_time:89826ms step_avg:141.46ms
step:646/1375 train_time:89974ms step_avg:141.47ms
step:647/1375 train_time:90121ms step_avg:141.48ms
step:648/1375 train_time:90271ms step_avg:141.49ms
step:649/1375 train_time:90418ms step_avg:141.50ms
step:650/1375 train_time:90567ms step_avg:141.51ms
step:651/1375 train_time:90715ms step_avg:141.52ms
step:652/1375 train_time:90860ms step_avg:141.53ms
step:653/1375 train_time:91009ms step_avg:141.54ms
step:654/1375 train_time:91156ms step_avg:141.55ms
step:655/1375 train_time:91303ms step_avg:141.56ms
step:656/1375 train_time:91451ms step_avg:141.56ms
step:657/1375 train_time:91597ms step_avg:141.57ms
step:658/1375 train_time:91744ms step_avg:141.58ms
step:659/1375 train_time:91892ms step_avg:141.59ms
step:660/1375 train_time:92038ms step_avg:141.60ms
step:661/1375 train_time:92185ms step_avg:141.61ms
step:662/1375 train_time:92333ms step_avg:141.61ms
step:663/1375 train_time:92478ms step_avg:141.62ms
step:664/1375 train_time:92627ms step_avg:141.63ms
step:665/1375 train_time:92774ms step_avg:141.64ms
step:666/1375 train_time:92920ms step_avg:141.65ms
step:667/1375 train_time:93068ms step_avg:141.66ms
step:668/1375 train_time:93215ms step_avg:141.66ms
step:669/1375 train_time:93362ms step_avg:141.67ms
step:670/1375 train_time:93511ms step_avg:141.68ms
step:671/1375 train_time:93658ms step_avg:141.69ms
step:672/1375 train_time:93806ms step_avg:141.70ms
step:673/1375 train_time:93954ms step_avg:141.71ms
step:674/1375 train_time:94100ms step_avg:141.72ms
step:675/1375 train_time:94251ms step_avg:141.73ms
step:676/1375 train_time:94397ms step_avg:141.74ms
step:677/1375 train_time:94544ms step_avg:141.75ms
step:678/1375 train_time:94691ms step_avg:141.75ms
step:679/1375 train_time:94838ms step_avg:141.76ms
step:680/1375 train_time:94987ms step_avg:141.77ms
step:681/1375 train_time:95134ms step_avg:141.78ms
step:682/1375 train_time:95280ms step_avg:141.79ms
step:683/1375 train_time:95429ms step_avg:141.80ms
step:684/1375 train_time:95576ms step_avg:141.80ms
step:685/1375 train_time:95725ms step_avg:141.81ms
step:686/1375 train_time:95873ms step_avg:141.82ms
step:687/1375 train_time:96019ms step_avg:141.83ms
step:688/1375 train_time:96168ms step_avg:141.84ms
step:689/1375 train_time:96316ms step_avg:141.85ms
step:690/1375 train_time:96464ms step_avg:141.86ms
step:691/1375 train_time:96612ms step_avg:141.87ms
step:692/1375 train_time:96759ms step_avg:141.88ms
step:693/1375 train_time:96907ms step_avg:141.88ms
step:694/1375 train_time:97054ms step_avg:141.89ms
step:695/1375 train_time:97200ms step_avg:141.90ms
step:696/1375 train_time:97348ms step_avg:141.91ms
step:697/1375 train_time:97495ms step_avg:141.91ms
step:698/1375 train_time:97642ms step_avg:141.92ms
step:699/1375 train_time:97792ms step_avg:141.93ms
step:700/1375 train_time:97938ms step_avg:141.94ms
step:701/1375 train_time:98085ms step_avg:141.95ms
step:702/1375 train_time:98233ms step_avg:141.96ms
step:703/1375 train_time:98380ms step_avg:141.96ms
step:704/1375 train_time:98528ms step_avg:141.97ms
step:705/1375 train_time:98675ms step_avg:141.98ms
step:706/1375 train_time:98826ms step_avg:141.99ms
step:707/1375 train_time:98974ms step_avg:142.00ms
step:708/1375 train_time:99121ms step_avg:142.01ms
step:709/1375 train_time:99270ms step_avg:142.02ms
step:710/1375 train_time:99417ms step_avg:142.02ms
step:711/1375 train_time:99564ms step_avg:142.03ms
step:712/1375 train_time:99712ms step_avg:142.04ms
step:713/1375 train_time:99859ms step_avg:142.05ms
step:714/1375 train_time:100008ms step_avg:142.06ms
step:715/1375 train_time:100155ms step_avg:142.06ms
step:716/1375 train_time:100303ms step_avg:142.07ms
step:717/1375 train_time:100452ms step_avg:142.08ms
step:718/1375 train_time:100600ms step_avg:142.09ms
step:719/1375 train_time:100748ms step_avg:142.10ms
step:720/1375 train_time:100898ms step_avg:142.11ms
step:721/1375 train_time:101048ms step_avg:142.12ms
step:722/1375 train_time:101197ms step_avg:142.13ms
step:723/1375 train_time:101345ms step_avg:142.14ms
step:724/1375 train_time:101493ms step_avg:142.15ms
step:725/1375 train_time:101643ms step_avg:142.16ms
step:726/1375 train_time:101792ms step_avg:142.17ms
step:727/1375 train_time:101942ms step_avg:142.18ms
step:728/1375 train_time:102091ms step_avg:142.19ms
step:729/1375 train_time:102239ms step_avg:142.20ms
step:730/1375 train_time:102390ms step_avg:142.21ms
step:731/1375 train_time:102539ms step_avg:142.22ms
step:732/1375 train_time:102688ms step_avg:142.23ms
step:733/1375 train_time:102836ms step_avg:142.24ms
step:734/1375 train_time:102985ms step_avg:142.24ms
step:735/1375 train_time:103134ms step_avg:142.25ms
step:736/1375 train_time:103282ms step_avg:142.26ms
step:737/1375 train_time:103432ms step_avg:142.27ms
step:738/1375 train_time:103578ms step_avg:142.28ms
step:739/1375 train_time:103728ms step_avg:142.29ms
step:740/1375 train_time:103877ms step_avg:142.30ms
step:741/1375 train_time:104029ms step_avg:142.31ms
step:742/1375 train_time:104178ms step_avg:142.32ms
step:743/1375 train_time:104326ms step_avg:142.33ms
step:744/1375 train_time:104475ms step_avg:142.34ms
step:745/1375 train_time:104624ms step_avg:142.35ms
step:746/1375 train_time:104774ms step_avg:142.36ms
step:747/1375 train_time:104921ms step_avg:142.36ms
step:748/1375 train_time:105071ms step_avg:142.37ms
step:749/1375 train_time:105220ms step_avg:142.38ms
step:750/1375 train_time:105370ms step_avg:142.39ms
step:750/1375 val_loss:3.5214 train_time:105446ms step_avg:142.49ms
step:751/1375 train_time:105524ms step_avg:142.41ms
step:752/1375 train_time:105675ms step_avg:142.42ms
step:753/1375 train_time:105821ms step_avg:142.42ms
step:754/1375 train_time:105969ms step_avg:142.43ms
step:755/1375 train_time:106117ms step_avg:142.44ms
step:756/1375 train_time:106263ms step_avg:142.44ms
step:757/1375 train_time:106415ms step_avg:142.46ms
step:758/1375 train_time:106565ms step_avg:142.47ms
step:759/1375 train_time:106719ms step_avg:142.48ms
step:760/1375 train_time:106867ms step_avg:142.49ms
step:761/1375 train_time:107051ms step_avg:142.54ms
step:762/1375 train_time:107199ms step_avg:142.55ms
step:763/1375 train_time:107348ms step_avg:142.56ms
step:764/1375 train_time:107498ms step_avg:142.57ms
step:765/1375 train_time:107645ms step_avg:142.58ms
step:766/1375 train_time:107796ms step_avg:142.59ms
step:767/1375 train_time:107945ms step_avg:142.60ms
step:768/1375 train_time:108096ms step_avg:142.61ms
step:769/1375 train_time:108243ms step_avg:142.61ms
step:770/1375 train_time:108391ms step_avg:142.62ms
step:771/1375 train_time:108540ms step_avg:142.63ms
step:772/1375 train_time:108690ms step_avg:142.64ms
step:773/1375 train_time:108839ms step_avg:142.65ms
step:774/1375 train_time:108988ms step_avg:142.65ms
step:775/1375 train_time:109138ms step_avg:142.66ms
step:776/1375 train_time:109285ms step_avg:142.67ms
step:777/1375 train_time:109436ms step_avg:142.68ms
step:778/1375 train_time:109584ms step_avg:142.69ms
step:779/1375 train_time:109733ms step_avg:142.70ms
step:780/1375 train_time:109882ms step_avg:142.70ms
step:781/1375 train_time:110031ms step_avg:142.71ms
step:782/1375 train_time:110179ms step_avg:142.72ms
step:783/1375 train_time:110327ms step_avg:142.73ms
step:784/1375 train_time:110478ms step_avg:142.74ms
step:785/1375 train_time:110625ms step_avg:142.74ms
step:786/1375 train_time:110776ms step_avg:142.75ms
step:787/1375 train_time:110923ms step_avg:142.76ms
step:788/1375 train_time:111073ms step_avg:142.77ms
step:789/1375 train_time:111220ms step_avg:142.77ms
step:790/1375 train_time:111368ms step_avg:142.78ms
step:791/1375 train_time:111517ms step_avg:142.79ms
step:792/1375 train_time:111668ms step_avg:142.80ms
step:793/1375 train_time:111817ms step_avg:142.81ms
step:794/1375 train_time:111966ms step_avg:142.81ms
step:795/1375 train_time:112118ms step_avg:142.82ms
step:796/1375 train_time:112268ms step_avg:142.83ms
step:797/1375 train_time:112417ms step_avg:142.84ms
step:798/1375 train_time:112566ms step_avg:142.85ms
step:799/1375 train_time:112717ms step_avg:142.86ms
step:800/1375 train_time:112865ms step_avg:142.87ms
step:801/1375 train_time:113015ms step_avg:142.88ms
step:802/1375 train_time:113163ms step_avg:142.88ms
step:803/1375 train_time:113314ms step_avg:142.89ms
step:804/1375 train_time:113461ms step_avg:142.90ms
step:805/1375 train_time:113612ms step_avg:142.91ms
step:806/1375 train_time:113759ms step_avg:142.91ms
step:807/1375 train_time:113905ms step_avg:142.92ms
step:808/1375 train_time:114055ms step_avg:142.93ms
step:809/1375 train_time:114203ms step_avg:142.93ms
step:810/1375 train_time:114353ms step_avg:142.94ms
step:811/1375 train_time:114501ms step_avg:142.95ms
step:812/1375 train_time:114651ms step_avg:142.96ms
step:813/1375 train_time:114799ms step_avg:142.96ms
step:814/1375 train_time:114946ms step_avg:142.97ms
step:815/1375 train_time:115095ms step_avg:142.98ms
step:816/1375 train_time:115245ms step_avg:142.98ms
step:817/1375 train_time:115396ms step_avg:142.99ms
step:818/1375 train_time:115544ms step_avg:143.00ms
step:819/1375 train_time:115695ms step_avg:143.01ms
step:820/1375 train_time:115844ms step_avg:143.02ms
step:821/1375 train_time:115994ms step_avg:143.03ms
step:822/1375 train_time:116144ms step_avg:143.03ms
step:823/1375 train_time:116295ms step_avg:143.04ms
step:824/1375 train_time:116444ms step_avg:143.05ms
step:825/1375 train_time:116596ms step_avg:143.06ms
step:826/1375 train_time:116747ms step_avg:143.07ms
step:827/1375 train_time:116898ms step_avg:143.08ms
step:828/1375 train_time:117049ms step_avg:143.09ms
step:829/1375 train_time:117201ms step_avg:143.10ms
step:830/1375 train_time:117351ms step_avg:143.11ms
step:831/1375 train_time:117501ms step_avg:143.12ms
step:832/1375 train_time:117651ms step_avg:143.13ms
step:833/1375 train_time:117800ms step_avg:143.14ms
step:834/1375 train_time:117952ms step_avg:143.15ms
step:835/1375 train_time:118102ms step_avg:143.15ms
step:836/1375 train_time:118255ms step_avg:143.17ms
step:837/1375 train_time:118404ms step_avg:143.17ms
step:838/1375 train_time:118555ms step_avg:143.18ms
step:839/1375 train_time:118703ms step_avg:143.19ms
step:840/1375 train_time:118855ms step_avg:143.20ms
step:841/1375 train_time:119005ms step_avg:143.21ms
step:842/1375 train_time:119155ms step_avg:143.22ms
step:843/1375 train_time:119305ms step_avg:143.22ms
step:844/1375 train_time:119455ms step_avg:143.23ms
step:845/1375 train_time:119603ms step_avg:143.24ms
step:846/1375 train_time:119755ms step_avg:143.25ms
step:847/1375 train_time:119906ms step_avg:143.26ms
step:848/1375 train_time:120057ms step_avg:143.27ms
step:849/1375 train_time:120206ms step_avg:143.27ms
step:850/1375 train_time:120357ms step_avg:143.28ms
step:851/1375 train_time:120510ms step_avg:143.29ms
step:852/1375 train_time:120661ms step_avg:143.30ms
step:853/1375 train_time:120809ms step_avg:143.31ms
step:854/1375 train_time:120958ms step_avg:143.32ms
step:855/1375 train_time:121108ms step_avg:143.32ms
step:856/1375 train_time:121257ms step_avg:143.33ms
step:857/1375 train_time:121407ms step_avg:143.34ms
step:858/1375 train_time:121559ms step_avg:143.35ms
step:859/1375 train_time:121710ms step_avg:143.36ms
step:860/1375 train_time:121860ms step_avg:143.37ms
step:861/1375 train_time:122012ms step_avg:143.37ms
step:862/1375 train_time:122162ms step_avg:143.38ms
step:863/1375 train_time:122315ms step_avg:143.39ms
step:864/1375 train_time:122465ms step_avg:143.40ms
step:865/1375 train_time:122616ms step_avg:143.41ms
step:866/1375 train_time:122772ms step_avg:143.43ms
step:867/1375 train_time:122922ms step_avg:143.43ms
step:868/1375 train_time:123070ms step_avg:143.44ms
step:869/1375 train_time:123220ms step_avg:143.45ms
step:870/1375 train_time:123372ms step_avg:143.46ms
step:871/1375 train_time:123521ms step_avg:143.46ms
step:872/1375 train_time:123671ms step_avg:143.47ms
step:873/1375 train_time:123820ms step_avg:143.48ms
step:874/1375 train_time:123972ms step_avg:143.49ms
step:875/1375 train_time:124123ms step_avg:143.50ms
step:875/1375 val_loss:3.4684 train_time:124198ms step_avg:143.58ms
step:876/1375 train_time:124275ms step_avg:143.50ms
step:877/1375 train_time:124424ms step_avg:143.51ms
step:878/1375 train_time:124575ms step_avg:143.52ms
step:879/1375 train_time:124724ms step_avg:143.53ms
step:880/1375 train_time:124874ms step_avg:143.53ms
step:881/1375 train_time:125022ms step_avg:143.54ms
step:882/1375 train_time:125174ms step_avg:143.55ms
step:883/1375 train_time:125325ms step_avg:143.56ms
step:884/1375 train_time:125477ms step_avg:143.57ms
step:885/1375 train_time:125627ms step_avg:143.57ms
step:886/1375 train_time:125779ms step_avg:143.58ms
step:887/1375 train_time:125930ms step_avg:143.59ms
step:888/1375 train_time:126082ms step_avg:143.60ms
step:889/1375 train_time:126237ms step_avg:143.61ms
step:890/1375 train_time:126384ms step_avg:143.62ms
step:891/1375 train_time:126536ms step_avg:143.63ms
step:892/1375 train_time:126685ms step_avg:143.63ms
step:893/1375 train_time:126835ms step_avg:143.64ms
step:894/1375 train_time:126984ms step_avg:143.65ms
step:895/1375 train_time:127136ms step_avg:143.66ms
step:896/1375 train_time:127284ms step_avg:143.66ms
step:897/1375 train_time:127436ms step_avg:143.67ms
step:898/1375 train_time:127585ms step_avg:143.68ms
step:899/1375 train_time:127738ms step_avg:143.69ms
step:900/1375 train_time:127888ms step_avg:143.69ms
step:901/1375 train_time:128039ms step_avg:143.70ms
step:902/1375 train_time:128186ms step_avg:143.71ms
step:903/1375 train_time:128338ms step_avg:143.72ms
step:904/1375 train_time:128488ms step_avg:143.72ms
step:905/1375 train_time:128639ms step_avg:143.73ms
step:906/1375 train_time:128787ms step_avg:143.74ms
step:907/1375 train_time:128941ms step_avg:143.75ms
step:908/1375 train_time:129092ms step_avg:143.76ms
step:909/1375 train_time:129241ms step_avg:143.76ms
step:910/1375 train_time:129397ms step_avg:143.77ms
step:911/1375 train_time:129546ms step_avg:143.78ms
step:912/1375 train_time:129696ms step_avg:143.79ms
step:913/1375 train_time:129846ms step_avg:143.79ms
step:914/1375 train_time:129998ms step_avg:143.80ms
step:915/1375 train_time:130147ms step_avg:143.81ms
step:916/1375 train_time:130298ms step_avg:143.82ms
step:917/1375 train_time:130448ms step_avg:143.82ms
step:918/1375 train_time:130600ms step_avg:143.83ms
step:919/1375 train_time:130758ms step_avg:143.85ms
step:920/1375 train_time:130910ms step_avg:143.86ms
step:921/1375 train_time:131060ms step_avg:143.86ms
step:922/1375 train_time:131213ms step_avg:143.87ms
step:923/1375 train_time:131361ms step_avg:143.88ms
step:924/1375 train_time:131513ms step_avg:143.89ms
step:925/1375 train_time:131665ms step_avg:143.90ms
step:926/1375 train_time:131818ms step_avg:143.91ms
step:927/1375 train_time:131968ms step_avg:143.91ms
step:928/1375 train_time:132119ms step_avg:143.92ms
step:929/1375 train_time:132271ms step_avg:143.93ms
step:930/1375 train_time:132423ms step_avg:143.94ms
step:931/1375 train_time:132573ms step_avg:143.94ms
step:932/1375 train_time:132723ms step_avg:143.95ms
step:933/1375 train_time:132876ms step_avg:143.96ms
step:934/1375 train_time:133027ms step_avg:143.97ms
step:935/1375 train_time:133182ms step_avg:143.98ms
step:936/1375 train_time:133335ms step_avg:143.99ms
step:937/1375 train_time:133488ms step_avg:144.00ms
step:938/1375 train_time:133641ms step_avg:144.01ms
step:939/1375 train_time:133797ms step_avg:144.02ms
step:940/1375 train_time:133950ms step_avg:144.03ms
step:941/1375 train_time:134101ms step_avg:144.04ms
step:942/1375 train_time:134251ms step_avg:144.05ms
step:943/1375 train_time:134403ms step_avg:144.05ms
step:944/1375 train_time:134557ms step_avg:144.06ms
step:945/1375 train_time:134708ms step_avg:144.07ms
step:946/1375 train_time:134862ms step_avg:144.08ms
step:947/1375 train_time:135016ms step_avg:144.09ms
step:948/1375 train_time:135167ms step_avg:144.10ms
step:949/1375 train_time:135319ms step_avg:144.11ms
step:950/1375 train_time:135471ms step_avg:144.12ms
step:951/1375 train_time:135662ms step_avg:144.17ms
step:952/1375 train_time:135812ms step_avg:144.17ms
step:953/1375 train_time:135963ms step_avg:144.18ms
step:954/1375 train_time:136114ms step_avg:144.19ms
step:955/1375 train_time:136263ms step_avg:144.19ms
step:956/1375 train_time:136417ms step_avg:144.20ms
step:957/1375 train_time:136569ms step_avg:144.21ms
step:958/1375 train_time:136721ms step_avg:144.22ms
step:959/1375 train_time:136876ms step_avg:144.23ms
step:960/1375 train_time:137028ms step_avg:144.24ms
step:961/1375 train_time:137179ms step_avg:144.25ms
step:962/1375 train_time:137330ms step_avg:144.25ms
step:963/1375 train_time:137487ms step_avg:144.27ms
step:964/1375 train_time:137641ms step_avg:144.28ms
step:965/1375 train_time:137794ms step_avg:144.29ms
step:966/1375 train_time:137944ms step_avg:144.29ms
step:967/1375 train_time:138097ms step_avg:144.30ms
step:968/1375 train_time:138246ms step_avg:144.31ms
step:969/1375 train_time:138398ms step_avg:144.32ms
step:970/1375 train_time:138548ms step_avg:144.32ms
step:971/1375 train_time:138699ms step_avg:144.33ms
step:972/1375 train_time:138849ms step_avg:144.33ms
step:973/1375 train_time:139000ms step_avg:144.34ms
step:974/1375 train_time:139152ms step_avg:144.35ms
step:975/1375 train_time:139302ms step_avg:144.35ms
step:976/1375 train_time:139454ms step_avg:144.36ms
step:977/1375 train_time:139604ms step_avg:144.37ms
step:978/1375 train_time:139756ms step_avg:144.38ms
step:979/1375 train_time:139908ms step_avg:144.38ms
step:980/1375 train_time:140061ms step_avg:144.39ms
step:981/1375 train_time:140209ms step_avg:144.40ms
step:982/1375 train_time:140359ms step_avg:144.40ms
step:983/1375 train_time:140508ms step_avg:144.41ms
step:984/1375 train_time:140660ms step_avg:144.41ms
step:985/1375 train_time:140813ms step_avg:144.42ms
step:986/1375 train_time:140970ms step_avg:144.44ms
step:987/1375 train_time:141121ms step_avg:144.44ms
step:988/1375 train_time:141272ms step_avg:144.45ms
step:989/1375 train_time:141422ms step_avg:144.46ms
step:990/1375 train_time:141577ms step_avg:144.47ms
step:991/1375 train_time:141729ms step_avg:144.47ms
step:992/1375 train_time:141883ms step_avg:144.48ms
step:993/1375 train_time:142043ms step_avg:144.50ms
step:994/1375 train_time:142194ms step_avg:144.51ms
step:995/1375 train_time:142344ms step_avg:144.51ms
step:996/1375 train_time:142492ms step_avg:144.52ms
step:997/1375 train_time:142642ms step_avg:144.52ms
step:998/1375 train_time:142792ms step_avg:144.53ms
step:999/1375 train_time:142944ms step_avg:144.53ms
step:1000/1375 train_time:143096ms step_avg:144.54ms
step:1000/1375 val_loss:3.4032 train_time:143169ms step_avg:144.61ms
step:1001/1375 train_time:143247ms step_avg:144.55ms
step:1002/1375 train_time:143400ms step_avg:144.56ms
step:1003/1375 train_time:143552ms step_avg:144.56ms
step:1004/1375 train_time:143703ms step_avg:144.57ms
step:1005/1375 train_time:143855ms step_avg:144.58ms
step:1006/1375 train_time:144004ms step_avg:144.58ms
step:1007/1375 train_time:144156ms step_avg:144.59ms
step:1008/1375 train_time:144308ms step_avg:144.60ms
step:1009/1375 train_time:144464ms step_avg:144.61ms
step:1010/1375 train_time:144615ms step_avg:144.62ms
step:1011/1375 train_time:144766ms step_avg:144.62ms
step:1012/1375 train_time:144917ms step_avg:144.63ms
step:1013/1375 train_time:145068ms step_avg:144.63ms
step:1014/1375 train_time:145219ms step_avg:144.64ms
step:1015/1375 train_time:145369ms step_avg:144.65ms
step:1016/1375 train_time:145520ms step_avg:144.65ms
step:1017/1375 train_time:145671ms step_avg:144.66ms
step:1018/1375 train_time:145823ms step_avg:144.67ms
step:1019/1375 train_time:145975ms step_avg:144.67ms
step:1020/1375 train_time:146129ms step_avg:144.68ms
step:1021/1375 train_time:146281ms step_avg:144.69ms
step:1022/1375 train_time:146432ms step_avg:144.70ms
step:1023/1375 train_time:146586ms step_avg:144.71ms
step:1024/1375 train_time:146741ms step_avg:144.71ms
step:1025/1375 train_time:146895ms step_avg:144.72ms
step:1026/1375 train_time:147049ms step_avg:144.73ms
step:1027/1375 train_time:147201ms step_avg:144.74ms
step:1028/1375 train_time:147356ms step_avg:144.75ms
step:1029/1375 train_time:147509ms step_avg:144.76ms
step:1030/1375 train_time:147661ms step_avg:144.77ms
step:1031/1375 train_time:147811ms step_avg:144.77ms
step:1032/1375 train_time:147962ms step_avg:144.78ms
step:1033/1375 train_time:148115ms step_avg:144.78ms
step:1034/1375 train_time:148266ms step_avg:144.79ms
step:1035/1375 train_time:148420ms step_avg:144.80ms
step:1036/1375 train_time:148572ms step_avg:144.81ms
step:1037/1375 train_time:148727ms step_avg:144.82ms
step:1038/1375 train_time:148879ms step_avg:144.82ms
step:1039/1375 train_time:149029ms step_avg:144.83ms
step:1040/1375 train_time:149181ms step_avg:144.84ms
step:1041/1375 train_time:149333ms step_avg:144.84ms
step:1042/1375 train_time:149484ms step_avg:144.85ms
step:1043/1375 train_time:149638ms step_avg:144.86ms
step:1044/1375 train_time:149792ms step_avg:144.87ms
step:1045/1375 train_time:149944ms step_avg:144.87ms
step:1046/1375 train_time:150098ms step_avg:144.88ms
step:1047/1375 train_time:150247ms step_avg:144.89ms
step:1048/1375 train_time:150400ms step_avg:144.89ms
step:1049/1375 train_time:150552ms step_avg:144.90ms
step:1050/1375 train_time:150706ms step_avg:144.91ms
step:1051/1375 train_time:150861ms step_avg:144.92ms
step:1052/1375 train_time:151015ms step_avg:144.93ms
step:1053/1375 train_time:151165ms step_avg:144.93ms
step:1054/1375 train_time:151319ms step_avg:144.94ms
step:1055/1375 train_time:151471ms step_avg:144.95ms
step:1056/1375 train_time:151622ms step_avg:144.95ms
step:1057/1375 train_time:151775ms step_avg:144.96ms
step:1058/1375 train_time:151928ms step_avg:144.97ms
step:1059/1375 train_time:152084ms step_avg:144.98ms
step:1060/1375 train_time:152238ms step_avg:144.99ms
step:1061/1375 train_time:152387ms step_avg:144.99ms
step:1062/1375 train_time:152542ms step_avg:145.00ms
step:1063/1375 train_time:152695ms step_avg:145.01ms
step:1064/1375 train_time:152844ms step_avg:145.01ms
step:1065/1375 train_time:153000ms step_avg:145.02ms
step:1066/1375 train_time:153156ms step_avg:145.03ms
step:1067/1375 train_time:153308ms step_avg:145.04ms
step:1068/1375 train_time:153461ms step_avg:145.05ms
step:1069/1375 train_time:153620ms step_avg:145.06ms
step:1070/1375 train_time:153771ms step_avg:145.07ms
step:1071/1375 train_time:153927ms step_avg:145.08ms
step:1072/1375 train_time:154080ms step_avg:145.08ms
step:1073/1375 train_time:154229ms step_avg:145.09ms
step:1074/1375 train_time:154380ms step_avg:145.09ms
step:1075/1375 train_time:154534ms step_avg:145.10ms
step:1076/1375 train_time:154684ms step_avg:145.11ms
step:1077/1375 train_time:154837ms step_avg:145.11ms
step:1078/1375 train_time:154992ms step_avg:145.12ms
step:1079/1375 train_time:155150ms step_avg:145.14ms
step:1080/1375 train_time:155302ms step_avg:145.14ms
step:1081/1375 train_time:155454ms step_avg:145.15ms
step:1082/1375 train_time:155604ms step_avg:145.15ms
step:1083/1375 train_time:155759ms step_avg:145.16ms
step:1084/1375 train_time:155914ms step_avg:145.17ms
step:1085/1375 train_time:156067ms step_avg:145.18ms
step:1086/1375 train_time:156220ms step_avg:145.19ms
step:1087/1375 train_time:156372ms step_avg:145.19ms
step:1088/1375 train_time:156524ms step_avg:145.20ms
step:1089/1375 train_time:156682ms step_avg:145.21ms
step:1090/1375 train_time:156837ms step_avg:145.22ms
step:1091/1375 train_time:156990ms step_avg:145.23ms
step:1092/1375 train_time:157142ms step_avg:145.23ms
step:1093/1375 train_time:157294ms step_avg:145.24ms
step:1094/1375 train_time:157445ms step_avg:145.24ms
step:1095/1375 train_time:157597ms step_avg:145.25ms
step:1096/1375 train_time:157752ms step_avg:145.26ms
step:1097/1375 train_time:157907ms step_avg:145.27ms
step:1098/1375 train_time:158062ms step_avg:145.28ms
step:1099/1375 train_time:158213ms step_avg:145.28ms
step:1100/1375 train_time:158364ms step_avg:145.29ms
step:1101/1375 train_time:158518ms step_avg:145.30ms
step:1102/1375 train_time:158671ms step_avg:145.30ms
step:1103/1375 train_time:158825ms step_avg:145.31ms
step:1104/1375 train_time:158980ms step_avg:145.32ms
step:1105/1375 train_time:159135ms step_avg:145.33ms
step:1106/1375 train_time:159287ms step_avg:145.34ms
step:1107/1375 train_time:159439ms step_avg:145.34ms
step:1108/1375 train_time:159595ms step_avg:145.35ms
step:1109/1375 train_time:159745ms step_avg:145.35ms
step:1110/1375 train_time:159899ms step_avg:145.36ms
step:1111/1375 train_time:160053ms step_avg:145.37ms
step:1112/1375 train_time:160204ms step_avg:145.38ms
step:1113/1375 train_time:160356ms step_avg:145.38ms
step:1114/1375 train_time:160508ms step_avg:145.39ms
step:1115/1375 train_time:160661ms step_avg:145.40ms
step:1116/1375 train_time:160814ms step_avg:145.40ms
step:1117/1375 train_time:160966ms step_avg:145.41ms
step:1118/1375 train_time:161125ms step_avg:145.42ms
step:1119/1375 train_time:161278ms step_avg:145.43ms
step:1120/1375 train_time:161429ms step_avg:145.43ms
step:1121/1375 train_time:161580ms step_avg:145.44ms
step:1122/1375 train_time:161731ms step_avg:145.44ms
step:1123/1375 train_time:161882ms step_avg:145.45ms
step:1124/1375 train_time:162038ms step_avg:145.46ms
step:1125/1375 train_time:162190ms step_avg:145.46ms
step:1125/1375 val_loss:3.3501 train_time:162268ms step_avg:145.53ms
step:1126/1375 train_time:162347ms step_avg:145.47ms
step:1127/1375 train_time:162502ms step_avg:145.48ms
step:1128/1375 train_time:162654ms step_avg:145.49ms
step:1129/1375 train_time:162810ms step_avg:145.50ms
step:1130/1375 train_time:162963ms step_avg:145.50ms
step:1131/1375 train_time:163117ms step_avg:145.51ms
step:1132/1375 train_time:163270ms step_avg:145.52ms
step:1133/1375 train_time:163425ms step_avg:145.53ms
step:1134/1375 train_time:163580ms step_avg:145.53ms
step:1135/1375 train_time:163734ms step_avg:145.54ms
step:1136/1375 train_time:163895ms step_avg:145.56ms
step:1137/1375 train_time:164048ms step_avg:145.56ms
step:1138/1375 train_time:164203ms step_avg:145.57ms
step:1139/1375 train_time:164357ms step_avg:145.58ms
step:1140/1375 train_time:164510ms step_avg:145.58ms
step:1141/1375 train_time:164701ms step_avg:145.62ms
step:1142/1375 train_time:164852ms step_avg:145.63ms
step:1143/1375 train_time:165009ms step_avg:145.64ms
step:1144/1375 train_time:165163ms step_avg:145.65ms
step:1145/1375 train_time:165314ms step_avg:145.65ms
step:1146/1375 train_time:165470ms step_avg:145.66ms
step:1147/1375 train_time:165625ms step_avg:145.67ms
step:1148/1375 train_time:165779ms step_avg:145.68ms
step:1149/1375 train_time:165935ms step_avg:145.68ms
step:1150/1375 train_time:166089ms step_avg:145.69ms
step:1151/1375 train_time:166246ms step_avg:145.70ms
step:1152/1375 train_time:166402ms step_avg:145.71ms
step:1153/1375 train_time:166561ms step_avg:145.72ms
step:1154/1375 train_time:166713ms step_avg:145.73ms
step:1155/1375 train_time:166869ms step_avg:145.74ms
step:1156/1375 train_time:167028ms step_avg:145.75ms
step:1157/1375 train_time:167183ms step_avg:145.76ms
step:1158/1375 train_time:167334ms step_avg:145.76ms
step:1159/1375 train_time:167487ms step_avg:145.77ms
step:1160/1375 train_time:167639ms step_avg:145.77ms
step:1161/1375 train_time:167792ms step_avg:145.78ms
step:1162/1375 train_time:167948ms step_avg:145.79ms
step:1163/1375 train_time:168102ms step_avg:145.80ms
step:1164/1375 train_time:168255ms step_avg:145.80ms
step:1165/1375 train_time:168407ms step_avg:145.81ms
step:1166/1375 train_time:168560ms step_avg:145.81ms
step:1167/1375 train_time:168712ms step_avg:145.82ms
step:1168/1375 train_time:168866ms step_avg:145.83ms
step:1169/1375 train_time:169018ms step_avg:145.83ms
step:1170/1375 train_time:169171ms step_avg:145.84ms
step:1171/1375 train_time:169325ms step_avg:145.84ms
step:1172/1375 train_time:169479ms step_avg:145.85ms
step:1173/1375 train_time:169633ms step_avg:145.86ms
step:1174/1375 train_time:169796ms step_avg:145.87ms
step:1175/1375 train_time:169950ms step_avg:145.88ms
step:1176/1375 train_time:170105ms step_avg:145.89ms
step:1177/1375 train_time:170264ms step_avg:145.90ms
step:1178/1375 train_time:170417ms step_avg:145.90ms
step:1179/1375 train_time:170568ms step_avg:145.91ms
step:1180/1375 train_time:170729ms step_avg:145.92ms
step:1181/1375 train_time:170883ms step_avg:145.93ms
step:1182/1375 train_time:171035ms step_avg:145.93ms
step:1183/1375 train_time:171190ms step_avg:145.94ms
step:1184/1375 train_time:171345ms step_avg:145.95ms
step:1185/1375 train_time:171501ms step_avg:145.96ms
step:1186/1375 train_time:171655ms step_avg:145.96ms
step:1187/1375 train_time:171820ms step_avg:145.98ms
step:1188/1375 train_time:171971ms step_avg:145.99ms
step:1189/1375 train_time:172126ms step_avg:145.99ms
step:1190/1375 train_time:172279ms step_avg:146.00ms
step:1191/1375 train_time:172434ms step_avg:146.01ms
step:1192/1375 train_time:172587ms step_avg:146.01ms
step:1193/1375 train_time:172739ms step_avg:146.02ms
step:1194/1375 train_time:172892ms step_avg:146.02ms
step:1195/1375 train_time:173047ms step_avg:146.03ms
step:1196/1375 train_time:173201ms step_avg:146.04ms
step:1197/1375 train_time:173355ms step_avg:146.05ms
step:1198/1375 train_time:173515ms step_avg:146.06ms
step:1199/1375 train_time:173669ms step_avg:146.06ms
step:1200/1375 train_time:173821ms step_avg:146.07ms
step:1201/1375 train_time:173972ms step_avg:146.07ms
step:1202/1375 train_time:174142ms step_avg:146.09ms
step:1203/1375 train_time:174302ms step_avg:146.10ms
step:1204/1375 train_time:174456ms step_avg:146.11ms
step:1205/1375 train_time:174611ms step_avg:146.12ms
step:1206/1375 train_time:174766ms step_avg:146.13ms
step:1207/1375 train_time:174918ms step_avg:146.13ms
step:1208/1375 train_time:175075ms step_avg:146.14ms
step:1209/1375 train_time:175229ms step_avg:146.15ms
step:1210/1375 train_time:175385ms step_avg:146.15ms
step:1211/1375 train_time:175540ms step_avg:146.16ms
step:1212/1375 train_time:175693ms step_avg:146.17ms
step:1213/1375 train_time:175849ms step_avg:146.18ms
step:1214/1375 train_time:176005ms step_avg:146.18ms
step:1215/1375 train_time:176160ms step_avg:146.19ms
step:1216/1375 train_time:176312ms step_avg:146.20ms
step:1217/1375 train_time:176467ms step_avg:146.20ms
step:1218/1375 train_time:176617ms step_avg:146.21ms
step:1219/1375 train_time:176770ms step_avg:146.21ms
step:1220/1375 train_time:176924ms step_avg:146.22ms
step:1221/1375 train_time:177077ms step_avg:146.22ms
step:1222/1375 train_time:177229ms step_avg:146.23ms
step:1223/1375 train_time:177384ms step_avg:146.24ms
step:1224/1375 train_time:177538ms step_avg:146.24ms
step:1225/1375 train_time:177696ms step_avg:146.25ms
step:1226/1375 train_time:177851ms step_avg:146.26ms
step:1227/1375 train_time:178008ms step_avg:146.27ms
step:1228/1375 train_time:178162ms step_avg:146.27ms
step:1229/1375 train_time:178315ms step_avg:146.28ms
step:1230/1375 train_time:178475ms step_avg:146.29ms
step:1231/1375 train_time:178633ms step_avg:146.30ms
step:1232/1375 train_time:178790ms step_avg:146.31ms
step:1233/1375 train_time:178943ms step_avg:146.31ms
step:1234/1375 train_time:179095ms step_avg:146.32ms
step:1235/1375 train_time:179253ms step_avg:146.33ms
step:1236/1375 train_time:179410ms step_avg:146.34ms
step:1237/1375 train_time:179563ms step_avg:146.34ms
step:1238/1375 train_time:179728ms step_avg:146.36ms
step:1239/1375 train_time:179881ms step_avg:146.36ms
step:1240/1375 train_time:180037ms step_avg:146.37ms
step:1241/1375 train_time:180196ms step_avg:146.38ms
step:1242/1375 train_time:180351ms step_avg:146.39ms
step:1243/1375 train_time:180507ms step_avg:146.40ms
step:1244/1375 train_time:180659ms step_avg:146.40ms
step:1245/1375 train_time:180813ms step_avg:146.41ms
step:1246/1375 train_time:180968ms step_avg:146.41ms
step:1247/1375 train_time:181123ms step_avg:146.42ms
step:1248/1375 train_time:181273ms step_avg:146.42ms
step:1249/1375 train_time:181427ms step_avg:146.43ms
step:1250/1375 train_time:181580ms step_avg:146.44ms
step:1250/1375 val_loss:3.3048 train_time:181657ms step_avg:146.50ms
step:1251/1375 train_time:181738ms step_avg:146.44ms
step:1252/1375 train_time:181894ms step_avg:146.45ms
step:1253/1375 train_time:182047ms step_avg:146.46ms
step:1254/1375 train_time:182198ms step_avg:146.46ms
step:1255/1375 train_time:182362ms step_avg:146.48ms
step:1256/1375 train_time:182517ms step_avg:146.48ms
step:1257/1375 train_time:182671ms step_avg:146.49ms
step:1258/1375 train_time:182827ms step_avg:146.50ms
step:1259/1375 train_time:182984ms step_avg:146.50ms
step:1260/1375 train_time:183136ms step_avg:146.51ms
step:1261/1375 train_time:183290ms step_avg:146.51ms
step:1262/1375 train_time:183449ms step_avg:146.52ms
step:1263/1375 train_time:183603ms step_avg:146.53ms
step:1264/1375 train_time:183756ms step_avg:146.54ms
step:1265/1375 train_time:183910ms step_avg:146.54ms
step:1266/1375 train_time:184066ms step_avg:146.55ms
step:1267/1375 train_time:184218ms step_avg:146.55ms
step:1268/1375 train_time:184374ms step_avg:146.56ms
step:1269/1375 train_time:184532ms step_avg:146.57ms
step:1270/1375 train_time:184688ms step_avg:146.58ms
step:1271/1375 train_time:184843ms step_avg:146.58ms
step:1272/1375 train_time:184995ms step_avg:146.59ms
step:1273/1375 train_time:185147ms step_avg:146.59ms
step:1274/1375 train_time:185299ms step_avg:146.60ms
step:1275/1375 train_time:185457ms step_avg:146.61ms
step:1276/1375 train_time:185610ms step_avg:146.61ms
step:1277/1375 train_time:185765ms step_avg:146.62ms
step:1278/1375 train_time:185916ms step_avg:146.62ms
step:1279/1375 train_time:186071ms step_avg:146.63ms
step:1280/1375 train_time:186229ms step_avg:146.64ms
step:1281/1375 train_time:186383ms step_avg:146.64ms
step:1282/1375 train_time:186533ms step_avg:146.65ms
step:1283/1375 train_time:186689ms step_avg:146.65ms
step:1284/1375 train_time:186844ms step_avg:146.66ms
step:1285/1375 train_time:186996ms step_avg:146.66ms
step:1286/1375 train_time:187150ms step_avg:146.67ms
step:1287/1375 train_time:187304ms step_avg:146.68ms
step:1288/1375 train_time:187457ms step_avg:146.68ms
step:1289/1375 train_time:187620ms step_avg:146.69ms
step:1290/1375 train_time:187780ms step_avg:146.70ms
step:1291/1375 train_time:187936ms step_avg:146.71ms
step:1292/1375 train_time:188092ms step_avg:146.72ms
step:1293/1375 train_time:188251ms step_avg:146.73ms
step:1294/1375 train_time:188406ms step_avg:146.73ms
step:1295/1375 train_time:188560ms step_avg:146.74ms
step:1296/1375 train_time:188714ms step_avg:146.75ms
step:1297/1375 train_time:188871ms step_avg:146.75ms
step:1298/1375 train_time:189025ms step_avg:146.76ms
step:1299/1375 train_time:189177ms step_avg:146.76ms
step:1300/1375 train_time:189331ms step_avg:146.77ms
step:1301/1375 train_time:189486ms step_avg:146.77ms
step:1302/1375 train_time:189641ms step_avg:146.78ms
step:1303/1375 train_time:189801ms step_avg:146.79ms
step:1304/1375 train_time:189958ms step_avg:146.80ms
step:1305/1375 train_time:190112ms step_avg:146.80ms
step:1306/1375 train_time:190268ms step_avg:146.81ms
step:1307/1375 train_time:190421ms step_avg:146.82ms
step:1308/1375 train_time:190577ms step_avg:146.82ms
step:1309/1375 train_time:190734ms step_avg:146.83ms
step:1310/1375 train_time:190891ms step_avg:146.84ms
step:1311/1375 train_time:191043ms step_avg:146.84ms
step:1312/1375 train_time:191196ms step_avg:146.85ms
step:1313/1375 train_time:191351ms step_avg:146.85ms
step:1314/1375 train_time:191506ms step_avg:146.86ms
step:1315/1375 train_time:191661ms step_avg:146.87ms
step:1316/1375 train_time:191814ms step_avg:146.87ms
step:1317/1375 train_time:191968ms step_avg:146.88ms
step:1318/1375 train_time:192129ms step_avg:146.89ms
step:1319/1375 train_time:192286ms step_avg:146.90ms
step:1320/1375 train_time:192441ms step_avg:146.90ms
step:1321/1375 train_time:192595ms step_avg:146.91ms
step:1322/1375 train_time:192754ms step_avg:146.92ms
step:1323/1375 train_time:192910ms step_avg:146.92ms
step:1324/1375 train_time:193063ms step_avg:146.93ms
step:1325/1375 train_time:193219ms step_avg:146.93ms
step:1326/1375 train_time:193378ms step_avg:146.94ms
step:1327/1375 train_time:193533ms step_avg:146.95ms
step:1328/1375 train_time:193687ms step_avg:146.96ms
step:1329/1375 train_time:193857ms step_avg:146.97ms
step:1330/1375 train_time:194017ms step_avg:146.98ms
step:1331/1375 train_time:194215ms step_avg:147.02ms
step:1332/1375 train_time:194379ms step_avg:147.03ms
step:1333/1375 train_time:194535ms step_avg:147.04ms
step:1334/1375 train_time:194690ms step_avg:147.05ms
step:1335/1375 train_time:194842ms step_avg:147.05ms
step:1336/1375 train_time:195003ms step_avg:147.06ms
step:1337/1375 train_time:195162ms step_avg:147.07ms
step:1338/1375 train_time:195316ms step_avg:147.08ms
step:1339/1375 train_time:195472ms step_avg:147.08ms
step:1340/1375 train_time:195633ms step_avg:147.09ms
step:1341/1375 train_time:195789ms step_avg:147.10ms
step:1342/1375 train_time:195944ms step_avg:147.11ms
step:1343/1375 train_time:196097ms step_avg:147.11ms
step:1344/1375 train_time:196250ms step_avg:147.11ms
step:1345/1375 train_time:196405ms step_avg:147.12ms
step:1346/1375 train_time:196560ms step_avg:147.13ms
step:1347/1375 train_time:196716ms step_avg:147.13ms
step:1348/1375 train_time:196870ms step_avg:147.14ms
step:1349/1375 train_time:197023ms step_avg:147.14ms
step:1350/1375 train_time:197176ms step_avg:147.15ms
step:1351/1375 train_time:197331ms step_avg:147.15ms
step:1352/1375 train_time:197494ms step_avg:147.16ms
step:1353/1375 train_time:197652ms step_avg:147.17ms
step:1354/1375 train_time:197808ms step_avg:147.18ms
step:1355/1375 train_time:197961ms step_avg:147.18ms
step:1356/1375 train_time:198113ms step_avg:147.19ms
step:1357/1375 train_time:198270ms step_avg:147.19ms
step:1358/1375 train_time:198428ms step_avg:147.20ms
step:1359/1375 train_time:198584ms step_avg:147.21ms
step:1360/1375 train_time:198741ms step_avg:147.22ms
step:1361/1375 train_time:198901ms step_avg:147.23ms
step:1362/1375 train_time:199060ms step_avg:147.23ms
step:1363/1375 train_time:199219ms step_avg:147.24ms
step:1364/1375 train_time:199374ms step_avg:147.25ms
step:1365/1375 train_time:199526ms step_avg:147.25ms
step:1366/1375 train_time:199681ms step_avg:147.26ms
step:1367/1375 train_time:199836ms step_avg:147.26ms
step:1368/1375 train_time:199993ms step_avg:147.27ms
step:1369/1375 train_time:200156ms step_avg:147.28ms
step:1370/1375 train_time:200315ms step_avg:147.29ms
step:1371/1375 train_time:200471ms step_avg:147.30ms
step:1372/1375 train_time:200630ms step_avg:147.31ms
step:1373/1375 train_time:200785ms step_avg:147.31ms
step:1374/1375 train_time:200944ms step_avg:147.32ms
step:1375/1375 train_time:201097ms step_avg:147.32ms
step:1375/1375 val_loss:3.2793 train_time:201172ms step_avg:147.38ms
peak memory consumption: 31565 MiB
